
STM32Play_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080060a0  080060a0  000070a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800617c  0800617c  00008018  2**0
                  CONTENTS
  4 .ARM          00000000  0800617c  0800617c  00008018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800617c  0800617c  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800617c  0800617c  0000717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006180  08006180  00007180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006184  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000018  0800619c  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  0800619c  000082c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b6e  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033dc  00000000  00000000  0001fbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00022f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106c  00000000  00000000  00024470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016748  00000000  00000000  000254dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfb0  00000000  00000000  0003bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9f7  00000000  00000000  00057bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e35cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb8  00000000  00000000  000e3610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e81c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006088 	.word	0x08006088

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08006088 	.word	0x08006088

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f005 fe14 	bl	8006030 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000408:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800040a:	4a2e      	ldr	r2, [pc, #184]	@ (80004c4 <MX_ADC1_Init+0xd0>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800040e:	4b2c      	ldr	r3, [pc, #176]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000410:	22c0      	movs	r2, #192	@ 0xc0
 8000412:	0612      	lsls	r2, r2, #24
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041c:	4b28      	ldr	r3, [pc, #160]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000422:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000428:	4b25      	ldr	r3, [pc, #148]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800042a:	2204      	movs	r2, #4
 800042c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000430:	2200      	movs	r2, #0
 8000432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000434:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000436:	2200      	movs	r2, #0
 8000438:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800043a:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800043c:	2200      	movs	r2, #0
 800043e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000442:	2201      	movs	r2, #1
 8000444:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b1e      	ldr	r3, [pc, #120]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000448:	2220      	movs	r2, #32
 800044a:	2100      	movs	r1, #0
 800044c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800045c:	222c      	movs	r2, #44	@ 0x2c
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000464:	2200      	movs	r2, #0
 8000466:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800046a:	2200      	movs	r2, #0
 800046c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000470:	2200      	movs	r2, #0
 8000472:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000476:	223c      	movs	r2, #60	@ 0x3c
 8000478:	2100      	movs	r1, #0
 800047a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800047c:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000484:	0018      	movs	r0, r3
 8000486:	f000 ff3b 	bl	8001300 <HAL_ADC_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800048e:	f000 fa04 	bl	800089a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <MX_ADC1_Init+0xd4>)
 8000496:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a4:	1d3a      	adds	r2, r7, #4
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 f9f2 	bl	8001894 <HAL_ADC_ConfigChannel>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004b4:	f000 f9f1 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000034 	.word	0x20000034
 80004c4:	40012400 	.word	0x40012400
 80004c8:	18000040 	.word	0x18000040

080004cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b091      	sub	sp, #68	@ 0x44
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	232c      	movs	r3, #44	@ 0x2c
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f005 fda6 	bl	8006030 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	2410      	movs	r4, #16
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	231c      	movs	r3, #28
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f005 fd9e 	bl	8006030 <memset>
  if(adcHandle->Instance==ADC1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a20      	ldr	r2, [pc, #128]	@ (800057c <HAL_ADC_MspInit+0xb0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d139      	bne.n	8000572 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2280      	movs	r2, #128	@ 0x80
 8000502:	01d2      	lsls	r2, r2, #7
 8000504:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050c:	193b      	adds	r3, r7, r4
 800050e:	0018      	movs	r0, r3
 8000510:	f002 fc82 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000518:	f000 f9bf 	bl	800089a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800051c:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800051e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 8000522:	2180      	movs	r1, #128	@ 0x80
 8000524:	0349      	lsls	r1, r1, #13
 8000526:	430a      	orrs	r2, r1
 8000528:	641a      	str	r2, [r3, #64]	@ 0x40
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800052c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800052e:	2380      	movs	r3, #128	@ 0x80
 8000530:	035b      	lsls	r3, r3, #13
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800053a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800053c:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800053e:	2101      	movs	r1, #1
 8000540:	430a      	orrs	r2, r1
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
 8000544:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 8000546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000548:	2201      	movs	r2, #1
 800054a:	4013      	ands	r3, r2
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000550:	212c      	movs	r1, #44	@ 0x2c
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2244      	movs	r2, #68	@ 0x44
 8000556:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2203      	movs	r2, #3
 800055c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	187a      	adds	r2, r7, r1
 8000566:	23a0      	movs	r3, #160	@ 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fe33 	bl	80021d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b011      	add	sp, #68	@ 0x44
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40012400 	.word	0x40012400
 8000580:	40021000 	.word	0x40021000

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b08b      	sub	sp, #44	@ 0x2c
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	2414      	movs	r4, #20
 800058c:	193b      	adds	r3, r7, r4
 800058e:	0018      	movs	r0, r3
 8000590:	2314      	movs	r3, #20
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f005 fd4b 	bl	8006030 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <MX_GPIO_Init+0xb0>)
 800059c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005a0:	2104      	movs	r1, #4
 80005a2:	430a      	orrs	r2, r1
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005aa:	2204      	movs	r2, #4
 80005ac:	4013      	ands	r3, r2
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005b8:	2120      	movs	r1, #32
 80005ba:	430a      	orrs	r2, r1
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c2:	2220      	movs	r2, #32
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005e8:	2102      	movs	r1, #2
 80005ea:	430a      	orrs	r2, r1
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f2:	2202      	movs	r2, #2
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	0018      	movs	r0, r3
 8000602:	f001 ff5b 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2208      	movs	r2, #8
 800060c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2201      	movs	r2, #1
 8000612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000620:	187b      	adds	r3, r7, r1
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <MX_GPIO_Init+0xb4>)
 8000624:	0019      	movs	r1, r3
 8000626:	0010      	movs	r0, r2
 8000628:	f001 fdd6 	bl	80021d8 <HAL_GPIO_Init>

}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b00b      	add	sp, #44	@ 0x2c
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	50001400 	.word	0x50001400

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	@ (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 ff3d 	bl	80024f8 <HAL_I2C_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 f90a 	bl	800089a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f001 ffda 	bl	8002644 <HAL_I2CEx_ConfigAnalogFilter>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 f901 	bl	800089a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f002 f81d 	bl	80026dc <HAL_I2CEx_ConfigDigitalFilter>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f8f8 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000098 	.word	0x20000098
 80006b4:	40005400 	.word	0x40005400
 80006b8:	00303d5b 	.word	0x00303d5b

080006bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b091      	sub	sp, #68	@ 0x44
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	232c      	movs	r3, #44	@ 0x2c
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	0018      	movs	r0, r3
 80006ca:	2314      	movs	r3, #20
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f005 fcae 	bl	8006030 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	2410      	movs	r4, #16
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	0018      	movs	r0, r3
 80006da:	231c      	movs	r3, #28
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f005 fca6 	bl	8006030 <memset>
  if(i2cHandle->Instance==I2C1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a23      	ldr	r2, [pc, #140]	@ (8000778 <HAL_I2C_MspInit+0xbc>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d13f      	bne.n	800076e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2240      	movs	r2, #64	@ 0x40
 80006f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 fb8b 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000706:	f000 f8c8 	bl	800089a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070e:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000722:	212c      	movs	r1, #44	@ 0x2c
 8000724:	187b      	adds	r3, r7, r1
 8000726:	22c0      	movs	r2, #192	@ 0xc0
 8000728:	00d2      	lsls	r2, r2, #3
 800072a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2212      	movs	r2, #18
 8000730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2206      	movs	r2, #6
 8000742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	187a      	adds	r2, r7, r1
 8000746:	23a0      	movs	r3, #160	@ 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fd43 	bl	80021d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	0389      	lsls	r1, r1, #14
 800075c:	430a      	orrs	r2, r1
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	039b      	lsls	r3, r3, #14
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b011      	add	sp, #68	@ 0x44
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	40005400 	.word	0x40005400
 800077c:	40021000 	.word	0x40021000

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b5b0      	push	{r4, r5, r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fbb1 	bl	8000eea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f84a 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f7ff fefa 	bl	8000584 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000790:	f7ff fe30 	bl	80003f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000794:	f7ff ff52 	bl	800063c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000798:	f000 f886 	bl	80008a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800079c:	f000 fa58 	bl	8000c50 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 faa4 	bl	8000cec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007a4:	f000 f976 	bl	8000a94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007a8:	4b18      	ldr	r3, [pc, #96]	@ (800080c <main+0x8c>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fd91 	bl	80032d4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1,rx_data,4);
 80007b2:	4917      	ldr	r1, [pc, #92]	@ (8000810 <main+0x90>)
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <main+0x94>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	f003 fd5d 	bl	8004278 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_ADC_Start(&hadc1); // start the adc
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <main+0x98>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 ff43 	bl	800164c <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // poll for conversion
 80007c6:	2301      	movs	r3, #1
 80007c8:	425a      	negs	r2, r3
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <main+0x98>)
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 ffc6 	bl	8001760 <HAL_ADC_PollForConversion>

	    *adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <main+0x9c>)
 80007d6:	681c      	ldr	r4, [r3, #0]
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <main+0x98>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 f84e 	bl	800187c <HAL_ADC_GetValue>
 80007e0:	0003      	movs	r3, r0
 80007e2:	6023      	str	r3, [r4, #0]

	    HAL_ADC_Stop(&hadc1); // stop adc
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <main+0x98>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 ff7e 	bl	80016e8 <HAL_ADC_Stop>

	  //HAL_UART_Transmit(&huart1, data, sizeof (data), 10000);
	  HAL_UART_Transmit(&huart1,(uint8_t *) adc_val, 4, HAL_MAX_DELAY);
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <main+0x9c>)
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	425b      	negs	r3, r3
 80007f4:	4807      	ldr	r0, [pc, #28]	@ (8000814 <main+0x94>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	f003 fc9a 	bl	8004130 <HAL_UART_Transmit>
	 // HAL_UART_Transmit(&huart1, data2, 4, HAL_MAX_DELAY);

	  HAL_Delay (2000); // wait for 500ms
 80007fc:	23fa      	movs	r3, #250	@ 0xfa
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fbef 	bl	8000fe4 <HAL_Delay>
	    HAL_ADC_Start(&hadc1); // start the adc
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	e7d9      	b.n	80007be <main+0x3e>
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	20000150 	.word	0x20000150
 8000810:	20000008 	.word	0x20000008
 8000814:	2000019c 	.word	0x2000019c
 8000818:	20000034 	.word	0x20000034
 800081c:	20000004 	.word	0x20000004

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08d      	sub	sp, #52	@ 0x34
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	2414      	movs	r4, #20
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	231c      	movs	r3, #28
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f005 fbfd 	bl	8006030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000836:	003b      	movs	r3, r7
 8000838:	0018      	movs	r0, r3
 800083a:	2314      	movs	r3, #20
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f005 fbf6 	bl	8006030 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	0252      	lsls	r2, r2, #9
 8000850:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	193b      	adds	r3, r7, r4
 8000854:	0018      	movs	r0, r3
 8000856:	f001 ff8d 	bl	8002774 <HAL_RCC_OscConfig>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800085e:	f000 f81c 	bl	800089a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	003b      	movs	r3, r7
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000868:	003b      	movs	r3, r7
 800086a:	2201      	movs	r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	003b      	movs	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800087a:	003b      	movs	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000880:	003b      	movs	r3, r7
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f002 f959 	bl	8002b3c <HAL_RCC_ClockConfig>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800088e:	f000 f804 	bl	800089a <Error_Handler>
  }
}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00d      	add	sp, #52	@ 0x34
 8000898:	bd90      	pop	{r4, r7, pc}

0800089a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089e:	b672      	cpsid	i
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	e7fd      	b.n	80008a2 <Error_Handler+0x8>
	...

080008a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_SPI1_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <MX_SPI1_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_SPI1_Init+0x74>)
 80008b4:	2282      	movs	r2, #130	@ 0x82
 80008b6:	0052      	lsls	r2, r2, #1
 80008b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_SPI1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c0:	4b16      	ldr	r3, [pc, #88]	@ (800091c <MX_SPI1_Init+0x74>)
 80008c2:	22e0      	movs	r2, #224	@ 0xe0
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <MX_SPI1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ce:	4b13      	ldr	r3, [pc, #76]	@ (800091c <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008d4:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_SPI1_Init+0x74>)
 80008d6:	2280      	movs	r2, #128	@ 0x80
 80008d8:	02d2      	lsls	r2, r2, #11
 80008da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_SPI1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_SPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_SPI1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008f4:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_SPI1_Init+0x74>)
 80008f6:	2207      	movs	r2, #7
 80008f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_SPI1_Init+0x74>)
 8000902:	2208      	movs	r2, #8
 8000904:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <MX_SPI1_Init+0x74>)
 8000908:	0018      	movs	r0, r3
 800090a:	f002 fb73 	bl	8002ff4 <HAL_SPI_Init>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000912:	f7ff ffc2 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000ec 	.word	0x200000ec
 8000920:	40013000 	.word	0x40013000

08000924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b091      	sub	sp, #68	@ 0x44
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	232c      	movs	r3, #44	@ 0x2c
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	0018      	movs	r0, r3
 8000932:	2314      	movs	r3, #20
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f005 fb7a 	bl	8006030 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	2410      	movs	r4, #16
 800093e:	193b      	adds	r3, r7, r4
 8000940:	0018      	movs	r0, r3
 8000942:	231c      	movs	r3, #28
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f005 fb72 	bl	8006030 <memset>
  if(spiHandle->Instance==SPI1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <HAL_SPI_MspInit+0xb8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d13e      	bne.n	80009d4 <HAL_SPI_MspInit+0xb0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	f002 fa56 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000970:	f7ff ff93 	bl	800089a <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000974:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <HAL_SPI_MspInit+0xbc>)
 8000976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <HAL_SPI_MspInit+0xbc>)
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	0149      	lsls	r1, r1, #5
 800097e:	430a      	orrs	r2, r1
 8000980:	641a      	str	r2, [r3, #64]	@ 0x40
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <HAL_SPI_MspInit+0xbc>)
 8000984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000986:	2380      	movs	r3, #128	@ 0x80
 8000988:	015b      	lsls	r3, r3, #5
 800098a:	4013      	ands	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <HAL_SPI_MspInit+0xbc>)
 8000992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_SPI_MspInit+0xbc>)
 8000996:	2102      	movs	r1, #2
 8000998:	430a      	orrs	r2, r1
 800099a:	635a      	str	r2, [r3, #52]	@ 0x34
 800099c:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_SPI_MspInit+0xbc>)
 800099e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009a0:	2202      	movs	r2, #2
 80009a2:	4013      	ands	r3, r2
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009a8:	212c      	movs	r1, #44	@ 0x2c
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2239      	movs	r2, #57	@ 0x39
 80009ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2202      	movs	r2, #2
 80009b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <HAL_SPI_MspInit+0xc0>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f001 fc02 	bl	80021d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b011      	add	sp, #68	@ 0x44
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	40013000 	.word	0x40013000
 80009e0:	40021000 	.word	0x40021000
 80009e4:	50000400 	.word	0x50000400

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	2201      	movs	r2, #1
 8000a00:	4013      	ands	r3, r2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	2180      	movs	r1, #128	@ 0x80
 8000a0e:	0549      	lsls	r1, r1, #21
 8000a10:	430a      	orrs	r2, r1
 8000a12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a18:	2380      	movs	r3, #128	@ 0x80
 8000a1a:	055b      	lsls	r3, r3, #21
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	40021000 	.word	0x40021000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 faa8 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <USART1_IRQHandler+0x14>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f003 fc5c 	bl	8004328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	2000019c 	.word	0x2000019c

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <SystemInit+0x14>)
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	0512      	lsls	r2, r2, #20
 8000a86:	609a      	str	r2, [r3, #8]
#endif
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	2328      	movs	r3, #40	@ 0x28
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f005 fac3 	bl	8006030 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	231c      	movs	r3, #28
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	0018      	movs	r0, r3
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f005 fabb 	bl	8006030 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	003b      	movs	r3, r7
 8000abc:	0018      	movs	r0, r3
 8000abe:	231c      	movs	r3, #28
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f005 fab4 	bl	8006030 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000aca:	4a30      	ldr	r2, [pc, #192]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000ace:	4b2e      	ldr	r3, [pc, #184]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000ad0:	2240      	movs	r2, #64	@ 0x40
 8000ad2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000adc:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <MX_TIM3_Init+0xfc>)
 8000ade:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aec:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 fb38 	bl	8003164 <HAL_TIM_Base_Init>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000af8:	f7ff fecf 	bl	800089a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	2128      	movs	r1, #40	@ 0x28
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2280      	movs	r2, #128	@ 0x80
 8000b02:	0152      	lsls	r2, r2, #5
 8000b04:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 fdb9 	bl	8003684 <HAL_TIM_ConfigClockSource>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b16:	f7ff fec0 	bl	800089a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 fb79 	bl	8003214 <HAL_TIM_PWM_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b26:	f7ff feb8 	bl	800089a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	211c      	movs	r1, #28
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b38:	187a      	adds	r2, r7, r1
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f003 fa3e 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b48:	f7ff fea7 	bl	800089a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	2260      	movs	r2, #96	@ 0x60
 8000b50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 8000b52:	003b      	movs	r3, r7
 8000b54:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <MX_TIM3_Init+0x100>)
 8000b56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b64:	0039      	movs	r1, r7
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f002 fc8a 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b74:	f7ff fe91 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <MX_TIM3_Init+0xf4>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 f82a 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b00e      	add	sp, #56	@ 0x38
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000150 	.word	0x20000150
 8000b8c:	40000400 	.word	0x40000400
 8000b90:	00002710 	.word	0x00002710
 8000b94:	00001388 	.word	0x00001388

08000b98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <HAL_TIM_Base_MspInit+0x34>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_TIM_Base_MspInit+0x38>)
 8000bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_TIM_Base_MspInit+0x38>)
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_TIM_Base_MspInit+0x38>)
 8000bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bba:	2202      	movs	r2, #2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	40000400 	.word	0x40000400
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	240c      	movs	r4, #12
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	0018      	movs	r0, r3
 8000be2:	2314      	movs	r3, #20
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f005 fa22 	bl	8006030 <memset>
  if(timHandle->Instance==TIM3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <HAL_TIM_MspPostInit+0x70>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d121      	bne.n	8000c3a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_TIM_MspPostInit+0x74>)
 8000bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <HAL_TIM_MspPostInit+0x74>)
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_TIM_MspPostInit+0x74>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c06:	2204      	movs	r2, #4
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0e:	0021      	movs	r1, r4
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2240      	movs	r2, #64	@ 0x40
 8000c14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2202      	movs	r2, #2
 8000c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	4a06      	ldr	r2, [pc, #24]	@ (8000c4c <HAL_TIM_MspPostInit+0x78>)
 8000c32:	0019      	movs	r1, r3
 8000c34:	0010      	movs	r0, r2
 8000c36:	f001 facf 	bl	80021d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b009      	add	sp, #36	@ 0x24
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	40000400 	.word	0x40000400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	50000800 	.word	0x50000800

08000c50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c54:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c56:	4a24      	ldr	r2, [pc, #144]	@ (8000ce8 <MX_USART1_UART_Init+0x98>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c5c:	2296      	movs	r2, #150	@ 0x96
 8000c5e:	0192      	lsls	r2, r2, #6
 8000c60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f003 f9f2 	bl	8004084 <HAL_UART_Init>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ca4:	f7ff fdf9 	bl	800089a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	0018      	movs	r0, r3
 8000cae:	f005 f8df 	bl	8005e70 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb6:	f7ff fdf0 	bl	800089a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f005 f916 	bl	8005ef0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc8:	f7ff fde7 	bl	800089a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <MX_USART1_UART_Init+0x94>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f005 f894 	bl	8005dfc <HAL_UARTEx_DisableFifoMode>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f7ff fddf 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	2000019c 	.word	0x2000019c
 8000ce8:	40013800 	.word	0x40013800

08000cec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000cf2:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <MX_USART2_UART_Init+0x64>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000cf8:	22e1      	movs	r2, #225	@ 0xe1
 8000cfa:	0252      	lsls	r2, r2, #9
 8000cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <MX_USART2_UART_Init+0x60>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f003 f9a4 	bl	8004084 <HAL_UART_Init>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d40:	f7ff fdab 	bl	800089a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	20000230 	.word	0x20000230
 8000d50:	40004400 	.word	0x40004400

08000d54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b093      	sub	sp, #76	@ 0x4c
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	2334      	movs	r3, #52	@ 0x34
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	0018      	movs	r0, r3
 8000d62:	2314      	movs	r3, #20
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f005 f962 	bl	8006030 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	2418      	movs	r4, #24
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	231c      	movs	r3, #28
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f005 f95a 	bl	8006030 <memset>
  if(uartHandle->Instance==USART1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a42      	ldr	r2, [pc, #264]	@ (8000e8c <HAL_UART_MspInit+0x138>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d147      	bne.n	8000e16 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	0018      	movs	r0, r3
 8000d96:	f002 f83f 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d9e:	f7ff fd7c 	bl	800089a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da2:	4b3b      	ldr	r3, [pc, #236]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000da6:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	01c9      	lsls	r1, r1, #7
 8000dac:	430a      	orrs	r2, r1
 8000dae:	641a      	str	r2, [r3, #64]	@ 0x40
 8000db0:	4b37      	ldr	r3, [pc, #220]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	01db      	lsls	r3, r3, #7
 8000db8:	4013      	ands	r3, r2
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b34      	ldr	r3, [pc, #208]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dc2:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dca:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd6:	2134      	movs	r1, #52	@ 0x34
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2202      	movs	r2, #2
 8000de2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2204      	movs	r2, #4
 8000df4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	187a      	adds	r2, r7, r1
 8000df8:	23a0      	movs	r3, #160	@ 0xa0
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 f9ea 	bl	80021d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	201b      	movs	r0, #27
 8000e0a:	f001 f8d7 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0e:	201b      	movs	r0, #27
 8000e10:	f001 f8e9 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e14:	e036      	b.n	8000e84 <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <HAL_UART_MspInit+0x140>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d131      	bne.n	8000e84 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e24:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000e26:	2180      	movs	r1, #128	@ 0x80
 8000e28:	0289      	lsls	r1, r1, #10
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000e42:	2101      	movs	r1, #1
 8000e44:	430a      	orrs	r2, r1
 8000e46:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_UART_MspInit+0x13c>)
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000e54:	2134      	movs	r1, #52	@ 0x34
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2281      	movs	r2, #129	@ 0x81
 8000e5a:	0212      	lsls	r2, r2, #8
 8000e5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2202      	movs	r2, #2
 8000e62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2201      	movs	r2, #1
 8000e74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	187a      	adds	r2, r7, r1
 8000e78:	23a0      	movs	r3, #160	@ 0xa0
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 f9aa 	bl	80021d8 <HAL_GPIO_Init>
}
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b013      	add	sp, #76	@ 0x4c
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	40013800 	.word	0x40013800
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40004400 	.word	0x40004400

08000e98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e98:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e9c:	f7ff fdee 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ea0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ea2:	e003      	b.n	8000eac <LoopCopyDataInit>

08000ea4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ea6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ea8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eaa:	3104      	adds	r1, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eac:	480a      	ldr	r0, [pc, #40]	@ (8000ed8 <LoopForever+0xa>)
  ldr r3, =_edata
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <LoopForever+0xe>)
  adds r2, r0, r1
 8000eb0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eb2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000eb4:	d3f6      	bcc.n	8000ea4 <CopyDataInit>
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000eb8:	e002      	b.n	8000ec0 <LoopFillZerobss>

08000eba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ebc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebe:	3204      	adds	r2, #4

08000ec0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <LoopForever+0x16>)
  cmp r2, r3
 8000ec2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ec4:	d3f9      	bcc.n	8000eba <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000ec6:	f005 f8bb 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eca:	f7ff fc59 	bl	8000780 <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   r0, =_estack
 8000ed0:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000ed4:	08006184 	.word	0x08006184
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000edc:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000ee0:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8000ee4:	200002c8 	.word	0x200002c8

08000ee8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_IRQHandler>

08000eea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f000 f80e 	bl	8000f18 <HAL_InitTick>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e001      	b.n	8000f0c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f08:	f7ff fd6e 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	230f      	movs	r3, #15
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_InitTick+0x88>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d02b      	beq.n	8000f88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_InitTick+0x8c>)
 8000f32:	681c      	ldr	r4, [r3, #0]
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_InitTick+0x88>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	0019      	movs	r1, r3
 8000f3a:	23fa      	movs	r3, #250	@ 0xfa
 8000f3c:	0098      	lsls	r0, r3, #2
 8000f3e:	f7ff f8e3 	bl	8000108 <__udivsi3>
 8000f42:	0003      	movs	r3, r0
 8000f44:	0019      	movs	r1, r3
 8000f46:	0020      	movs	r0, r4
 8000f48:	f7ff f8de 	bl	8000108 <__udivsi3>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 f859 	bl	8002006 <HAL_SYSTICK_Config>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d112      	bne.n	8000f7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d80a      	bhi.n	8000f74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f001 f828 	bl	8001fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_InitTick+0x90>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e00d      	b.n	8000f90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e008      	b.n	8000f90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f7e:	230f      	movs	r3, #15
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e003      	b.n	8000f90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f90:	230f      	movs	r3, #15
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	781b      	ldrb	r3, [r3, #0]
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b005      	add	sp, #20
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	20000014 	.word	0x20000014
 8000fa4:	2000000c 	.word	0x2000000c
 8000fa8:	20000010 	.word	0x20000010

08000fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <HAL_IncTick+0x1c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	18d2      	adds	r2, r2, r3
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	20000014 	.word	0x20000014
 8000fcc:	200002c4 	.word	0x200002c4

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b02      	ldr	r3, [pc, #8]	@ (8000fe0 <HAL_GetTick+0x10>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	200002c4 	.word	0x200002c4

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff fff0 	bl	8000fd0 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	001a      	movs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	189b      	adds	r3, r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	f7ff ffe0 	bl	8000fd0 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	20000014 	.word	0x20000014

0800102c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800103c:	401a      	ands	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	ff3fffff 	.word	0xff3fffff

08001054 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	23c0      	movs	r3, #192	@ 0xc0
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	4013      	ands	r3, r2
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}

0800106e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	2104      	movs	r1, #4
 8001082:	400a      	ands	r2, r1
 8001084:	2107      	movs	r1, #7
 8001086:	4091      	lsls	r1, r2
 8001088:	000a      	movs	r2, r1
 800108a:	43d2      	mvns	r2, r2
 800108c:	401a      	ands	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2104      	movs	r1, #4
 8001092:	400b      	ands	r3, r1
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4099      	lsls	r1, r3
 8001098:	000b      	movs	r3, r1
 800109a:	431a      	orrs	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b004      	add	sp, #16
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	2104      	movs	r1, #4
 80010ba:	400a      	ands	r2, r1
 80010bc:	2107      	movs	r1, #7
 80010be:	4091      	lsls	r1, r2
 80010c0:	000a      	movs	r2, r1
 80010c2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2104      	movs	r1, #4
 80010c8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010ca:	40da      	lsrs	r2, r3
 80010cc:	0013      	movs	r3, r2
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	23c0      	movs	r3, #192	@ 0xc0
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4013      	ands	r3, r2
 80010e8:	d101      	bne.n	80010ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	211f      	movs	r1, #31
 800110c:	400a      	ands	r2, r1
 800110e:	210f      	movs	r1, #15
 8001110:	4091      	lsls	r1, r2
 8001112:	000a      	movs	r2, r1
 8001114:	43d2      	mvns	r2, r2
 8001116:	401a      	ands	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	0e9b      	lsrs	r3, r3, #26
 800111c:	210f      	movs	r1, #15
 800111e:	4019      	ands	r1, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	201f      	movs	r0, #31
 8001124:	4003      	ands	r3, r0
 8001126:	4099      	lsls	r1, r3
 8001128:	000b      	movs	r3, r1
 800112a:	431a      	orrs	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b004      	add	sp, #16
 8001136:	bd80      	pop	{r7, pc}

08001138 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	025b      	lsls	r3, r3, #9
 800114a:	0a5b      	lsrs	r3, r3, #9
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}

0800115a <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	0252      	lsls	r2, r2, #9
 800116c:	0a52      	lsrs	r2, r2, #9
 800116e:	43d2      	mvns	r2, r2
 8001170:	401a      	ands	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	0212      	lsls	r2, r2, #8
 8001194:	43d2      	mvns	r2, r2
 8001196:	401a      	ands	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	400b      	ands	r3, r1
 80011a0:	4904      	ldr	r1, [pc, #16]	@ (80011b4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80011a2:	400b      	ands	r3, r1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b004      	add	sp, #16
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	7fffff00 	.word	0x7fffff00

080011b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <LL_ADC_EnableInternalRegulator+0x24>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	0552      	lsls	r2, r2, #21
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	6fffffe8 	.word	0x6fffffe8

080011e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	055b      	lsls	r3, r3, #21
 80011f0:	401a      	ands	r2, r3
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	055b      	lsls	r3, r3, #21
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d101      	bne.n	80011fe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <LL_ADC_Enable+0x20>)
 8001216:	4013      	ands	r3, r2
 8001218:	2201      	movs	r2, #1
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	7fffffe8 	.word	0x7fffffe8

0800122c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <LL_ADC_Disable+0x20>)
 800123a:	4013      	ands	r3, r2
 800123c:	2202      	movs	r2, #2
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	7fffffe8 	.word	0x7fffffe8

08001250 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <LL_ADC_IsEnabled+0x18>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <LL_ADC_IsEnabled+0x1a>
 8001268:	2300      	movs	r3, #0
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}

08001272 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2202      	movs	r2, #2
 8001280:	4013      	ands	r3, r2
 8001282:	2b02      	cmp	r3, #2
 8001284:	d101      	bne.n	800128a <LL_ADC_IsDisableOngoing+0x18>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_ADC_IsDisableOngoing+0x1a>
 800128a:	2300      	movs	r3, #0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}

08001294 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <LL_ADC_REG_StartConversion+0x20>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	2204      	movs	r2, #4
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	7fffffe8 	.word	0x7fffffe8

080012b8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <LL_ADC_REG_StopConversion+0x20>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	2210      	movs	r2, #16
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	7fffffe8 	.word	0x7fffffe8

080012dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2204      	movs	r2, #4
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d101      	bne.n	80012f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	231f      	movs	r3, #31
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e17e      	b.n	8001624 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10a      	bne.n	8001344 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff f8cb 	bl	80004cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2254      	movs	r2, #84	@ 0x54
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff ff49 	bl	80011e0 <LL_ADC_IsInternalRegulatorEnabled>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d114      	bne.n	800137c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff2e 	bl	80011b8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800135c:	4bb3      	ldr	r3, [pc, #716]	@ (800162c <HAL_ADC_Init+0x32c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	49b3      	ldr	r1, [pc, #716]	@ (8001630 <HAL_ADC_Init+0x330>)
 8001362:	0018      	movs	r0, r3
 8001364:	f7fe fed0 	bl	8000108 <__udivsi3>
 8001368:	0003      	movs	r3, r0
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800136e:	e002      	b.n	8001376 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b01      	subs	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f9      	bne.n	8001370 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff ff2d 	bl	80011e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d10f      	bne.n	80013aa <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138e:	2210      	movs	r2, #16
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139a:	2201      	movs	r2, #1
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80013a2:	231f      	movs	r3, #31
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff ff94 	bl	80012dc <LL_ADC_REG_IsConversionOngoing>
 80013b4:	0003      	movs	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013bc:	2210      	movs	r2, #16
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_Init+0xc4>
 80013c2:	e122      	b.n	800160a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d000      	beq.n	80013cc <HAL_ADC_Init+0xcc>
 80013ca:	e11e      	b.n	800160a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d0:	4a98      	ldr	r2, [pc, #608]	@ (8001634 <HAL_ADC_Init+0x334>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	2202      	movs	r2, #2
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff ff35 	bl	8001250 <LL_ADC_IsEnabled>
 80013e6:	1e03      	subs	r3, r0, #0
 80013e8:	d000      	beq.n	80013ec <HAL_ADC_Init+0xec>
 80013ea:	e0ad      	b.n	8001548 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e1b      	ldrb	r3, [r3, #24]
 80013f4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7e5b      	ldrb	r3, [r3, #25]
 80013fc:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013fe:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e9b      	ldrb	r3, [r3, #26]
 8001404:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001406:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_ADC_Init+0x116>
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	e000      	b.n	8001418 <HAL_ADC_Init+0x118>
 8001416:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001418:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800141e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	da04      	bge.n	8001432 <HAL_ADC_Init+0x132>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	e001      	b.n	8001436 <HAL_ADC_Init+0x136>
 8001432:	2380      	movs	r3, #128	@ 0x80
 8001434:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001436:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	212c      	movs	r1, #44	@ 0x2c
 800143c:	5c5b      	ldrb	r3, [r3, r1]
 800143e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001440:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	5c9b      	ldrb	r3, [r3, r2]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d115      	bne.n	800147e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7e9b      	ldrb	r3, [r3, #26]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2280      	movs	r2, #128	@ 0x80
 800145e:	0252      	lsls	r2, r2, #9
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	e00b      	b.n	800147e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146a:	2220      	movs	r2, #32
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001476:	2201      	movs	r2, #1
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00a      	beq.n	800149c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800148a:	23e0      	movs	r3, #224	@ 0xe0
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001494:	4313      	orrs	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	4a65      	ldr	r2, [pc, #404]	@ (8001638 <HAL_ADC_Init+0x338>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	0019      	movs	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	0f9b      	lsrs	r3, r3, #30
 80014b8:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014be:	4313      	orrs	r3, r2
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	223c      	movs	r2, #60	@ 0x3c
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d111      	bne.n	80014f4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0f9b      	lsrs	r3, r3, #30
 80014d6:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014dc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80014e2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80014e8:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	2201      	movs	r2, #1
 80014f0:	4313      	orrs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	4a50      	ldr	r2, [pc, #320]	@ (800163c <HAL_ADC_Init+0x33c>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	430a      	orrs	r2, r1
 8001508:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	23c0      	movs	r3, #192	@ 0xc0
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	429a      	cmp	r2, r3
 8001514:	d018      	beq.n	8001548 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	05db      	lsls	r3, r3, #23
 800151e:	429a      	cmp	r2, r3
 8001520:	d012      	beq.n	8001548 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	061b      	lsls	r3, r3, #24
 800152a:	429a      	cmp	r2, r3
 800152c:	d00c      	beq.n	8001548 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800152e:	4b44      	ldr	r3, [pc, #272]	@ (8001640 <HAL_ADC_Init+0x340>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a44      	ldr	r2, [pc, #272]	@ (8001644 <HAL_ADC_Init+0x344>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	23f0      	movs	r3, #240	@ 0xf0
 800153e:	039b      	lsls	r3, r3, #14
 8001540:	401a      	ands	r2, r3
 8001542:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <HAL_ADC_Init+0x340>)
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001550:	001a      	movs	r2, r3
 8001552:	2100      	movs	r1, #0
 8001554:	f7ff fd8b 	bl	800106e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001560:	4939      	ldr	r1, [pc, #228]	@ (8001648 <HAL_ADC_Init+0x348>)
 8001562:	001a      	movs	r2, r3
 8001564:	f7ff fd83 	bl	800106e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d109      	bne.n	8001584 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2110      	movs	r1, #16
 800157c:	4249      	negs	r1, r1
 800157e:	430a      	orrs	r2, r1
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
 8001582:	e018      	b.n	80015b6 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	039b      	lsls	r3, r3, #14
 800158c:	429a      	cmp	r2, r3
 800158e:	d112      	bne.n	80015b6 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	3b01      	subs	r3, #1
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	221c      	movs	r2, #28
 80015a0:	4013      	ands	r3, r2
 80015a2:	2210      	movs	r2, #16
 80015a4:	4252      	negs	r2, r2
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0011      	movs	r1, r2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2100      	movs	r1, #0
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff fd73 	bl	80010a8 <LL_ADC_GetSamplingTimeCommonChannels>
 80015c2:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10b      	bne.n	80015e4 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	2203      	movs	r2, #3
 80015d8:	4393      	bics	r3, r2
 80015da:	2201      	movs	r2, #1
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015e2:	e01c      	b.n	800161e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e8:	2212      	movs	r2, #18
 80015ea:	4393      	bics	r3, r2
 80015ec:	2210      	movs	r2, #16
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f8:	2201      	movs	r2, #1
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001600:	231f      	movs	r3, #31
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001608:	e009      	b.n	800161e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	2210      	movs	r2, #16
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001616:	231f      	movs	r3, #31
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800161e:	231f      	movs	r3, #31
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	781b      	ldrb	r3, [r3, #0]
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b008      	add	sp, #32
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000000c 	.word	0x2000000c
 8001630:	00030d40 	.word	0x00030d40
 8001634:	fffffefd 	.word	0xfffffefd
 8001638:	ffde0201 	.word	0xffde0201
 800163c:	1ffffc02 	.word	0x1ffffc02
 8001640:	40012708 	.word	0x40012708
 8001644:	ffc3ffff 	.word	0xffc3ffff
 8001648:	7fffff04 	.word	0x7fffff04

0800164c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0018      	movs	r0, r3
 800165a:	f7ff fe3f 	bl	80012dc <LL_ADC_REG_IsConversionOngoing>
 800165e:	1e03      	subs	r3, r0, #0
 8001660:	d135      	bne.n	80016ce <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2254      	movs	r2, #84	@ 0x54
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_ADC_Start+0x24>
 800166c:	2302      	movs	r3, #2
 800166e:	e035      	b.n	80016dc <HAL_ADC_Start+0x90>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2254      	movs	r2, #84	@ 0x54
 8001674:	2101      	movs	r1, #1
 8001676:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001678:	250f      	movs	r5, #15
 800167a:	197c      	adds	r4, r7, r5
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	0018      	movs	r0, r3
 8001680:	f000 fb1a 	bl	8001cb8 <ADC_Enable>
 8001684:	0003      	movs	r3, r0
 8001686:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001688:	197b      	adds	r3, r7, r5
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d119      	bne.n	80016c4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001694:	4a13      	ldr	r2, [pc, #76]	@ (80016e4 <HAL_ADC_Start+0x98>)
 8001696:	4013      	ands	r3, r2
 8001698:	2280      	movs	r2, #128	@ 0x80
 800169a:	0052      	lsls	r2, r2, #1
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	221c      	movs	r2, #28
 80016ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2254      	movs	r2, #84	@ 0x54
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff fde9 	bl	8001294 <LL_ADC_REG_StartConversion>
 80016c2:	e008      	b.n	80016d6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2254      	movs	r2, #84	@ 0x54
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]
 80016cc:	e003      	b.n	80016d6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016ce:	230f      	movs	r3, #15
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	2202      	movs	r2, #2
 80016d4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80016d6:	230f      	movs	r3, #15
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b004      	add	sp, #16
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	fffff0fe 	.word	0xfffff0fe

080016e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2254      	movs	r2, #84	@ 0x54
 80016f4:	5c9b      	ldrb	r3, [r3, r2]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_Stop+0x16>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e029      	b.n	8001752 <HAL_ADC_Stop+0x6a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2254      	movs	r2, #84	@ 0x54
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001706:	250f      	movs	r5, #15
 8001708:	197c      	adds	r4, r7, r5
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0018      	movs	r0, r3
 800170e:	f000 fa97 	bl	8001c40 <ADC_ConversionStop>
 8001712:	0003      	movs	r3, r0
 8001714:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001716:	197b      	adds	r3, r7, r5
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d112      	bne.n	8001744 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800171e:	197c      	adds	r4, r7, r5
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0018      	movs	r0, r3
 8001724:	f000 fb46 	bl	8001db4 <ADC_Disable>
 8001728:	0003      	movs	r3, r0
 800172a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800172c:	197b      	adds	r3, r7, r5
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001738:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_ADC_Stop+0x74>)
 800173a:	4013      	ands	r3, r2
 800173c:	2201      	movs	r2, #1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2254      	movs	r2, #84	@ 0x54
 8001748:	2100      	movs	r1, #0
 800174a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800174c:	230f      	movs	r3, #15
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	781b      	ldrb	r3, [r3, #0]
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b004      	add	sp, #16
 8001758:	bdb0      	pop	{r4, r5, r7, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	fffffefe 	.word	0xfffffefe

08001760 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	2b08      	cmp	r3, #8
 8001770:	d102      	bne.n	8001778 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001772:	2308      	movs	r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e00f      	b.n	8001798 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d007      	beq.n	8001794 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001788:	2220      	movs	r2, #32
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e06c      	b.n	800186e <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001794:	2304      	movs	r3, #4
 8001796:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001798:	f7ff fc1a 	bl	8000fd0 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017a0:	e019      	b.n	80017d6 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	d016      	beq.n	80017d6 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017a8:	f7ff fc12 	bl	8000fd0 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d302      	bcc.n	80017be <HAL_ADC_PollForConversion+0x5e>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10b      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	2204      	movs	r2, #4
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2254      	movs	r2, #84	@ 0x54
 80017ce:	2100      	movs	r1, #0
 80017d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04b      	b.n	800186e <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4013      	ands	r3, r2
 80017e0:	d0df      	beq.n	80017a2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	2280      	movs	r2, #128	@ 0x80
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff fc6e 	bl	80010d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d02e      	beq.n	800185c <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7e9b      	ldrb	r3, [r3, #26]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d12a      	bne.n	800185c <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2208      	movs	r2, #8
 800180e:	4013      	ands	r3, r2
 8001810:	2b08      	cmp	r3, #8
 8001812:	d123      	bne.n	800185c <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0018      	movs	r0, r3
 800181a:	f7ff fd5f 	bl	80012dc <LL_ADC_REG_IsConversionOngoing>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d110      	bne.n	8001844 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	210c      	movs	r1, #12
 800182e:	438a      	bics	r2, r1
 8001830:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	4a10      	ldr	r2, [pc, #64]	@ (8001878 <HAL_ADC_PollForConversion+0x118>)
 8001838:	4013      	ands	r3, r2
 800183a:	2201      	movs	r2, #1
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	659a      	str	r2, [r3, #88]	@ 0x58
 8001842:	e00b      	b.n	800185c <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001848:	2220      	movs	r2, #32
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001854:	2201      	movs	r2, #1
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e1b      	ldrb	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	220c      	movs	r2, #12
 800186a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	fffffefe 	.word	0xfffffefe

0800187c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189e:	2317      	movs	r3, #23
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2254      	movs	r2, #84	@ 0x54
 80018ae:	5c9b      	ldrb	r3, [r3, r2]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x24>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e1be      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x3a2>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2254      	movs	r2, #84	@ 0x54
 80018bc:	2101      	movs	r1, #1
 80018be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff fd09 	bl	80012dc <LL_ADC_REG_IsConversionOngoing>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d000      	beq.n	80018d0 <HAL_ADC_ConfigChannel+0x3c>
 80018ce:	e1a1      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d100      	bne.n	80018da <HAL_ADC_ConfigChannel+0x46>
 80018d8:	e152      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d004      	beq.n	80018f0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018ea:	4ac2      	ldr	r2, [pc, #776]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d108      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0019      	movs	r1, r3
 80018fa:	0010      	movs	r0, r2
 80018fc:	f7ff fc1c 	bl	8001138 <LL_ADC_REG_SetSequencerChAdd>
 8001900:	e0ed      	b.n	8001ade <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	211f      	movs	r1, #31
 800190c:	400b      	ands	r3, r1
 800190e:	210f      	movs	r1, #15
 8001910:	4099      	lsls	r1, r3
 8001912:	000b      	movs	r3, r1
 8001914:	43db      	mvns	r3, r3
 8001916:	4013      	ands	r3, r2
 8001918:	0019      	movs	r1, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	0a5b      	lsrs	r3, r3, #9
 8001922:	d105      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x9c>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0e9b      	lsrs	r3, r3, #26
 800192a:	221f      	movs	r2, #31
 800192c:	4013      	ands	r3, r2
 800192e:	e0bc      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	4013      	ands	r3, r2
 8001938:	d000      	beq.n	800193c <HAL_ADC_ConfigChannel+0xa8>
 800193a:	e0b5      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x214>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2202      	movs	r2, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d000      	beq.n	8001948 <HAL_ADC_ConfigChannel+0xb4>
 8001946:	e0ad      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x210>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2204      	movs	r2, #4
 800194e:	4013      	ands	r3, r2
 8001950:	d000      	beq.n	8001954 <HAL_ADC_ConfigChannel+0xc0>
 8001952:	e0a5      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x20c>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2208      	movs	r2, #8
 800195a:	4013      	ands	r3, r2
 800195c:	d000      	beq.n	8001960 <HAL_ADC_ConfigChannel+0xcc>
 800195e:	e09d      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x208>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	4013      	ands	r3, r2
 8001968:	d000      	beq.n	800196c <HAL_ADC_ConfigChannel+0xd8>
 800196a:	e095      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x204>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2220      	movs	r2, #32
 8001972:	4013      	ands	r3, r2
 8001974:	d000      	beq.n	8001978 <HAL_ADC_ConfigChannel+0xe4>
 8001976:	e08d      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x200>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2240      	movs	r2, #64	@ 0x40
 800197e:	4013      	ands	r3, r2
 8001980:	d000      	beq.n	8001984 <HAL_ADC_ConfigChannel+0xf0>
 8001982:	e085      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x1fc>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	4013      	ands	r3, r2
 800198c:	d000      	beq.n	8001990 <HAL_ADC_ConfigChannel+0xfc>
 800198e:	e07d      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x1f8>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4013      	ands	r3, r2
 800199a:	d000      	beq.n	800199e <HAL_ADC_ConfigChannel+0x10a>
 800199c:	e074      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1f4>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d000      	beq.n	80019ac <HAL_ADC_ConfigChannel+0x118>
 80019aa:	e06b      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x1f0>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4013      	ands	r3, r2
 80019b6:	d000      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x126>
 80019b8:	e062      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1ec>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4013      	ands	r3, r2
 80019c4:	d000      	beq.n	80019c8 <HAL_ADC_ConfigChannel+0x134>
 80019c6:	e059      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1e8>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	015b      	lsls	r3, r3, #5
 80019d0:	4013      	ands	r3, r2
 80019d2:	d151      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1e4>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	019b      	lsls	r3, r3, #6
 80019dc:	4013      	ands	r3, r2
 80019de:	d149      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1e0>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	01db      	lsls	r3, r3, #7
 80019e8:	4013      	ands	r3, r2
 80019ea:	d141      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1dc>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	4013      	ands	r3, r2
 80019f6:	d139      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1d8>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	025b      	lsls	r3, r3, #9
 8001a00:	4013      	ands	r3, r2
 8001a02:	d131      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1d4>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	029b      	lsls	r3, r3, #10
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d129      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1d0>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	02db      	lsls	r3, r3, #11
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d121      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1cc>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	031b      	lsls	r3, r3, #12
 8001a24:	4013      	ands	r3, r2
 8001a26:	d119      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1c8>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	035b      	lsls	r3, r3, #13
 8001a30:	4013      	ands	r3, r2
 8001a32:	d111      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1c4>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	@ 0x80
 8001a3a:	039b      	lsls	r3, r3, #14
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d109      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1c0>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	03db      	lsls	r3, r3, #15
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d001      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0x1bc>
 8001a4c:	2316      	movs	r3, #22
 8001a4e:	e02c      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a50:	2300      	movs	r3, #0
 8001a52:	e02a      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a54:	2315      	movs	r3, #21
 8001a56:	e028      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a58:	2314      	movs	r3, #20
 8001a5a:	e026      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a5c:	2313      	movs	r3, #19
 8001a5e:	e024      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a60:	2312      	movs	r3, #18
 8001a62:	e022      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a64:	2311      	movs	r3, #17
 8001a66:	e020      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a68:	2310      	movs	r3, #16
 8001a6a:	e01e      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	e01c      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a70:	230e      	movs	r3, #14
 8001a72:	e01a      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a74:	230d      	movs	r3, #13
 8001a76:	e018      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a78:	230c      	movs	r3, #12
 8001a7a:	e016      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a7c:	230b      	movs	r3, #11
 8001a7e:	e014      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a80:	230a      	movs	r3, #10
 8001a82:	e012      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a84:	2309      	movs	r3, #9
 8001a86:	e010      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a88:	2308      	movs	r3, #8
 8001a8a:	e00e      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	e00c      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a90:	2306      	movs	r3, #6
 8001a92:	e00a      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a94:	2305      	movs	r3, #5
 8001a96:	e008      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e006      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e004      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x216>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	6852      	ldr	r2, [r2, #4]
 8001aae:	201f      	movs	r0, #31
 8001ab0:	4002      	ands	r2, r0
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	000a      	movs	r2, r1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d808      	bhi.n	8001ade <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	001a      	movs	r2, r3
 8001ada:	f7ff fb0d 	bl	80010f8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	001a      	movs	r2, r3
 8001aec:	f7ff fb48 	bl	8001180 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db00      	blt.n	8001afa <HAL_ADC_ConfigChannel+0x266>
 8001af8:	e096      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001afa:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x364>)
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff faa9 	bl	8001054 <LL_ADC_GetCommonPathInternalCh>
 8001b02:	0003      	movs	r3, r0
 8001b04:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001bfc <HAL_ADC_ConfigChannel+0x368>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d123      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b18:	d11e      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2280      	movs	r2, #128	@ 0x80
 8001b1e:	0412      	lsls	r2, r2, #16
 8001b20:	4313      	orrs	r3, r2
 8001b22:	4a35      	ldr	r2, [pc, #212]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x364>)
 8001b24:	0019      	movs	r1, r3
 8001b26:	0010      	movs	r0, r2
 8001b28:	f7ff fa80 	bl	800102c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001b2c:	4b34      	ldr	r3, [pc, #208]	@ (8001c00 <HAL_ADC_ConfigChannel+0x36c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4934      	ldr	r1, [pc, #208]	@ (8001c04 <HAL_ADC_ConfigChannel+0x370>)
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7fe fae8 	bl	8000108 <__udivsi3>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	189b      	adds	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	3301      	adds	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b48:	e002      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b56:	e067      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001c08 <HAL_ADC_ConfigChannel+0x374>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d162      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	03db      	lsls	r3, r3, #15
 8001b68:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b6a:	d15d      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2280      	movs	r2, #128	@ 0x80
 8001b70:	03d2      	lsls	r2, r2, #15
 8001b72:	4313      	orrs	r3, r2
 8001b74:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x364>)
 8001b76:	0019      	movs	r1, r3
 8001b78:	0010      	movs	r0, r2
 8001b7a:	f7ff fa57 	bl	800102c <LL_ADC_SetCommonPathInternalCh>
 8001b7e:	e053      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b90:	4a18      	ldr	r2, [pc, #96]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d107      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	f7ff fada 	bl	800115a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da3c      	bge.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bae:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x364>)
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fa4f 	bl	8001054 <LL_ADC_GetCommonPathInternalCh>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001bfc <HAL_ADC_ConfigChannel+0x368>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d108      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4a11      	ldr	r2, [pc, #68]	@ (8001c0c <HAL_ADC_ConfigChannel+0x378>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x364>)
 8001bcc:	0019      	movs	r1, r3
 8001bce:	0010      	movs	r0, r2
 8001bd0:	f7ff fa2c 	bl	800102c <LL_ADC_SetCommonPathInternalCh>
 8001bd4:	e028      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a0b      	ldr	r2, [pc, #44]	@ (8001c08 <HAL_ADC_ConfigChannel+0x374>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d123      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c10 <HAL_ADC_ConfigChannel+0x37c>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x364>)
 8001be8:	0019      	movs	r1, r3
 8001bea:	0010      	movs	r0, r2
 8001bec:	f7ff fa1e 	bl	800102c <LL_ADC_SetCommonPathInternalCh>
 8001bf0:	e01a      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x394>
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	80000004 	.word	0x80000004
 8001bf8:	40012708 	.word	0x40012708
 8001bfc:	a4000200 	.word	0xa4000200
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	00030d40 	.word	0x00030d40
 8001c08:	a8000400 	.word	0xa8000400
 8001c0c:	ff7fffff 	.word	0xff7fffff
 8001c10:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c18:	2220      	movs	r2, #32
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2254      	movs	r2, #84	@ 0x54
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001c30:	2317      	movs	r3, #23
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	781b      	ldrb	r3, [r3, #0]
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b006      	add	sp, #24
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)

08001c40 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff fb45 	bl	80012dc <LL_ADC_REG_IsConversionOngoing>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d02b      	beq.n	8001cae <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f7ff fb09 	bl	8001272 <LL_ADC_IsDisableOngoing>
 8001c60:	1e03      	subs	r3, r0, #0
 8001c62:	d104      	bne.n	8001c6e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff fb25 	bl	80012b8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c6e:	f7ff f9af 	bl	8000fd0 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001c76:	e014      	b.n	8001ca2 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001c78:	f7ff f9aa 	bl	8000fd0 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d90d      	bls.n	8001ca2 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c96:	2201      	movs	r2, #1
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e006      	b.n	8001cb0 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	4013      	ands	r3, r2
 8001cac:	d1e4      	bne.n	8001c78 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b004      	add	sp, #16
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff fac1 	bl	8001250 <LL_ADC_IsEnabled>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d162      	bne.n	8001d98 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a32      	ldr	r2, [pc, #200]	@ (8001da4 <ADC_Enable+0xec>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	2201      	movs	r2, #1
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e04f      	b.n	8001d9a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff fa82 	bl	8001208 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d04:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <ADC_Enable+0xf0>)
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff f9a4 	bl	8001054 <LL_ADC_GetCommonPathInternalCh>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	2380      	movs	r3, #128	@ 0x80
 8001d10:	041b      	lsls	r3, r3, #16
 8001d12:	4013      	ands	r3, r2
 8001d14:	d00f      	beq.n	8001d36 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001d16:	4b25      	ldr	r3, [pc, #148]	@ (8001dac <ADC_Enable+0xf4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4925      	ldr	r1, [pc, #148]	@ (8001db0 <ADC_Enable+0xf8>)
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7fe f9f3 	bl	8000108 <__udivsi3>
 8001d22:	0003      	movs	r3, r0
 8001d24:	3301      	adds	r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d28:	e002      	b.n	8001d30 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f9      	bne.n	8001d2a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7e5b      	ldrb	r3, [r3, #25]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d02c      	beq.n	8001d98 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f947 	bl	8000fd0 <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d46:	e020      	b.n	8001d8a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff fa7f 	bl	8001250 <LL_ADC_IsEnabled>
 8001d52:	1e03      	subs	r3, r0, #0
 8001d54:	d104      	bne.n	8001d60 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff fa54 	bl	8001208 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d60:	f7ff f936 	bl	8000fd0 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d90d      	bls.n	8001d8a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	2210      	movs	r2, #16
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7e:	2201      	movs	r2, #1
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e007      	b.n	8001d9a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d1d7      	bne.n	8001d48 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	80000017 	.word	0x80000017
 8001da8:	40012708 	.word	0x40012708
 8001dac:	2000000c 	.word	0x2000000c
 8001db0:	00030d40 	.word	0x00030d40

08001db4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff fa56 	bl	8001272 <LL_ADC_IsDisableOngoing>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff fa3e 	bl	8001250 <LL_ADC_IsEnabled>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d040      	beq.n	8001e5a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d13d      	bne.n	8001e5a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2205      	movs	r2, #5
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10d      	bne.n	8001e08 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fa1b 	bl	800122c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dfe:	f7ff f8e7 	bl	8000fd0 <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e06:	e022      	b.n	8001e4e <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e18:	2201      	movs	r2, #1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e01b      	b.n	8001e5c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e24:	f7ff f8d4 	bl	8000fd0 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d90d      	bls.n	8001e4e <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	2210      	movs	r2, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e42:	2201      	movs	r2, #1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e006      	b.n	8001e5c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1e4      	bne.n	8001e24 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b004      	add	sp, #16
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	1dfb      	adds	r3, r7, #7
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e76:	d809      	bhi.n	8001e8c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	231f      	movs	r3, #31
 8001e80:	401a      	ands	r2, r3
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <__NVIC_EnableIRQ+0x30>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	4091      	lsls	r1, r2
 8001e88:	000a      	movs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b002      	add	sp, #8
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8001eac:	d828      	bhi.n	8001f00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eae:	4a2f      	ldr	r2, [pc, #188]	@ (8001f6c <__NVIC_SetPriority+0xd4>)
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	33c0      	adds	r3, #192	@ 0xc0
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	589b      	ldr	r3, [r3, r2]
 8001ebe:	1dfa      	adds	r2, r7, #7
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	00d2      	lsls	r2, r2, #3
 8001eca:	21ff      	movs	r1, #255	@ 0xff
 8001ecc:	4091      	lsls	r1, r2
 8001ece:	000a      	movs	r2, r1
 8001ed0:	43d2      	mvns	r2, r2
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	22ff      	movs	r2, #255	@ 0xff
 8001edc:	401a      	ands	r2, r3
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	4003      	ands	r3, r0
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eec:	481f      	ldr	r0, [pc, #124]	@ (8001f6c <__NVIC_SetPriority+0xd4>)
 8001eee:	1dfb      	adds	r3, r7, #7
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	33c0      	adds	r3, #192	@ 0xc0
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001efe:	e031      	b.n	8001f64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <__NVIC_SetPriority+0xd8>)
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	0019      	movs	r1, r3
 8001f08:	230f      	movs	r3, #15
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	3b08      	subs	r3, #8
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3306      	adds	r3, #6
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	18d3      	adds	r3, r2, r3
 8001f16:	3304      	adds	r3, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1dfa      	adds	r2, r7, #7
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	0011      	movs	r1, r2
 8001f20:	2203      	movs	r2, #3
 8001f22:	400a      	ands	r2, r1
 8001f24:	00d2      	lsls	r2, r2, #3
 8001f26:	21ff      	movs	r1, #255	@ 0xff
 8001f28:	4091      	lsls	r1, r2
 8001f2a:	000a      	movs	r2, r1
 8001f2c:	43d2      	mvns	r2, r2
 8001f2e:	401a      	ands	r2, r3
 8001f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	22ff      	movs	r2, #255	@ 0xff
 8001f38:	401a      	ands	r2, r3
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	2303      	movs	r3, #3
 8001f42:	4003      	ands	r3, r0
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f48:	4809      	ldr	r0, [pc, #36]	@ (8001f70 <__NVIC_SetPriority+0xd8>)
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	001c      	movs	r4, r3
 8001f50:	230f      	movs	r3, #15
 8001f52:	4023      	ands	r3, r4
 8001f54:	3b08      	subs	r3, #8
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	3306      	adds	r3, #6
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	18c3      	adds	r3, r0, r3
 8001f60:	3304      	adds	r3, #4
 8001f62:	601a      	str	r2, [r3, #0]
}
 8001f64:	46c0      	nop			@ (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b003      	add	sp, #12
 8001f6a:	bd90      	pop	{r4, r7, pc}
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	045b      	lsls	r3, r3, #17
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d301      	bcc.n	8001f8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e010      	b.n	8001fae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <SysTick_Config+0x44>)
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	3a01      	subs	r2, #1
 8001f92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f94:	2301      	movs	r3, #1
 8001f96:	425b      	negs	r3, r3
 8001f98:	2103      	movs	r1, #3
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff ff7c 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <SysTick_Config+0x44>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <SysTick_Config+0x44>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b002      	add	sp, #8
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	1c02      	adds	r2, r0, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	0002      	movs	r2, r0
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7ff ff33 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff ffaf 	bl	8001f74 <SysTick_Config>
 8002016:	0003      	movs	r3, r0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e050      	b.n	80020d4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2225      	movs	r2, #37	@ 0x25
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d008      	beq.n	8002050 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2204      	movs	r2, #4
 8002042:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	@ 0x24
 8002048:	2100      	movs	r1, #0
 800204a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e041      	b.n	80020d4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	210e      	movs	r1, #14
 800205c:	438a      	bics	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	491c      	ldr	r1, [pc, #112]	@ (80020dc <HAL_DMA_Abort+0xbc>)
 800206c:	400a      	ands	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002080:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <HAL_DMA_Abort+0xc0>)
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	221c      	movs	r2, #28
 800208a:	4013      	ands	r3, r2
 800208c:	2201      	movs	r2, #1
 800208e:	409a      	lsls	r2, r3
 8002090:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <HAL_DMA_Abort+0xc0>)
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800209e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00c      	beq.n	80020c2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b2:	490a      	ldr	r1, [pc, #40]	@ (80020dc <HAL_DMA_Abort+0xbc>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80020c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2225      	movs	r2, #37	@ 0x25
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2224      	movs	r2, #36	@ 0x24
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	fffffeff 	.word	0xfffffeff
 80020e0:	40020000 	.word	0x40020000

080020e4 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ec:	230f      	movs	r3, #15
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2224      	movs	r2, #36	@ 0x24
 80020f8:	2100      	movs	r1, #0
 80020fa:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	@ 0x24
 8002100:	5c9b      	ldrb	r3, [r3, r2]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_DMA_Abort_IT+0x26>
 8002106:	2302      	movs	r3, #2
 8002108:	e05e      	b.n	80021c8 <HAL_DMA_Abort_IT+0xe4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2224      	movs	r2, #36	@ 0x24
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2225      	movs	r2, #37	@ 0x25
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d007      	beq.n	800212e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002124:	230f      	movs	r3, #15
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e049      	b.n	80021c2 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	210e      	movs	r1, #14
 800213a:	438a      	bics	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	438a      	bics	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	491d      	ldr	r1, [pc, #116]	@ (80021d0 <HAL_DMA_Abort_IT+0xec>)
 800215a:	400a      	ands	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800215e:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_DMA_Abort_IT+0xf0>)
 8002160:	6859      	ldr	r1, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	221c      	movs	r2, #28
 8002168:	4013      	ands	r3, r2
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_DMA_Abort_IT+0xf0>)
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800217c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002190:	490f      	ldr	r1, [pc, #60]	@ (80021d0 <HAL_DMA_Abort_IT+0xec>)
 8002192:	400a      	ands	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800219e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2225      	movs	r2, #37	@ 0x25
 80021a4:	2101      	movs	r1, #1
 80021a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	@ 0x24
 80021ac:	2100      	movs	r1, #0
 80021ae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	0010      	movs	r0, r2
 80021c0:	4798      	blx	r3
    }
  }
  return status;
 80021c2:	230f      	movs	r3, #15
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	781b      	ldrb	r3, [r3, #0]
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b004      	add	sp, #16
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	fffffeff 	.word	0xfffffeff
 80021d4:	40020000 	.word	0x40020000

080021d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021e6:	e153      	b.n	8002490 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4091      	lsls	r1, r2
 80021f2:	000a      	movs	r2, r1
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d100      	bne.n	8002200 <HAL_GPIO_Init+0x28>
 80021fe:	e144      	b.n	800248a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x38>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b12      	cmp	r3, #18
 800220e:	d125      	bne.n	800225c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	58d3      	ldr	r3, [r2, r3]
 800221c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2207      	movs	r2, #7
 8002222:	4013      	ands	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	409a      	lsls	r2, r3
 800222a:	0013      	movs	r3, r2
 800222c:	43da      	mvns	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4013      	ands	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	220f      	movs	r2, #15
 800223a:	401a      	ands	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2107      	movs	r1, #7
 8002240:	400b      	ands	r3, r1
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	409a      	lsls	r2, r3
 8002246:	0013      	movs	r3, r2
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	6979      	ldr	r1, [r7, #20]
 800225a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	409a      	lsls	r2, r3
 800226a:	0013      	movs	r3, r2
 800226c:	43da      	mvns	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4013      	ands	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	401a      	ands	r2, r3
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	409a      	lsls	r2, r3
 8002282:	0013      	movs	r3, r2
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d00b      	beq.n	80022b0 <HAL_GPIO_Init+0xd8>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d007      	beq.n	80022b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a4:	2b11      	cmp	r3, #17
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b12      	cmp	r3, #18
 80022ae:	d130      	bne.n	8002312 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	409a      	lsls	r2, r3
 80022be:	0013      	movs	r3, r2
 80022c0:	43da      	mvns	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	409a      	lsls	r2, r3
 80022d2:	0013      	movs	r3, r2
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e6:	2201      	movs	r2, #1
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	409a      	lsls	r2, r3
 80022ec:	0013      	movs	r3, r2
 80022ee:	43da      	mvns	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	4013      	ands	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	2201      	movs	r2, #1
 80022fe:	401a      	ands	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	409a      	lsls	r2, r3
 8002304:	0013      	movs	r3, r2
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	43da      	mvns	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4013      	ands	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	409a      	lsls	r2, r3
 800233c:	0013      	movs	r3, r2
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	055b      	lsls	r3, r3, #21
 8002352:	4013      	ands	r3, r2
 8002354:	d100      	bne.n	8002358 <HAL_GPIO_Init+0x180>
 8002356:	e098      	b.n	800248a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002358:	4a53      	ldr	r2, [pc, #332]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3318      	adds	r3, #24
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	589b      	ldr	r3, [r3, r2]
 8002364:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2203      	movs	r2, #3
 800236a:	4013      	ands	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	220f      	movs	r2, #15
 8002370:	409a      	lsls	r2, r3
 8002372:	0013      	movs	r3, r2
 8002374:	43da      	mvns	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4013      	ands	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	23a0      	movs	r3, #160	@ 0xa0
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	429a      	cmp	r2, r3
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x1e2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a48      	ldr	r2, [pc, #288]	@ (80024ac <HAL_GPIO_Init+0x2d4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x1de>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a47      	ldr	r2, [pc, #284]	@ (80024b0 <HAL_GPIO_Init+0x2d8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x1da>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a46      	ldr	r2, [pc, #280]	@ (80024b4 <HAL_GPIO_Init+0x2dc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x1d6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a45      	ldr	r2, [pc, #276]	@ (80024b8 <HAL_GPIO_Init+0x2e0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x1d2>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x1e4>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x1e4>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x1e4>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x1e4>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x1e4>
 80023ba:	2300      	movs	r3, #0
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	2103      	movs	r1, #3
 80023c0:	400a      	ands	r2, r1
 80023c2:	00d2      	lsls	r2, r2, #3
 80023c4:	4093      	lsls	r3, r2
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80023cc:	4936      	ldr	r1, [pc, #216]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3318      	adds	r3, #24
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80023da:	4a33      	ldr	r2, [pc, #204]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	58d3      	ldr	r3, [r2, r3]
 80023e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43da      	mvns	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	025b      	lsls	r3, r3, #9
 80023f4:	4013      	ands	r3, r2
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002400:	4929      	ldr	r1, [pc, #164]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002402:	2280      	movs	r2, #128	@ 0x80
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002408:	4a27      	ldr	r2, [pc, #156]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 800240a:	2384      	movs	r3, #132	@ 0x84
 800240c:	58d3      	ldr	r3, [r2, r3]
 800240e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43da      	mvns	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	4013      	ands	r3, r2
 8002418:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	4013      	ands	r3, r2
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800242e:	491e      	ldr	r1, [pc, #120]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002430:	2284      	movs	r2, #132	@ 0x84
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43da      	mvns	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4013      	ands	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	035b      	lsls	r3, r3, #13
 800244e:	4013      	ands	r3, r2
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43da      	mvns	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	039b      	lsls	r3, r3, #14
 8002478:	4013      	ands	r3, r2
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002484:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	3301      	adds	r3, #1
 800248e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	40da      	lsrs	r2, r3
 8002498:	1e13      	subs	r3, r2, #0
 800249a:	d000      	beq.n	800249e <HAL_GPIO_Init+0x2c6>
 800249c:	e6a4      	b.n	80021e8 <HAL_GPIO_Init+0x10>
  }
}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	46c0      	nop			@ (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b006      	add	sp, #24
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021800 	.word	0x40021800
 80024ac:	50000400 	.word	0x50000400
 80024b0:	50000800 	.word	0x50000800
 80024b4:	50000c00 	.word	0x50000c00
 80024b8:	50001400 	.word	0x50001400

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	0008      	movs	r0, r1
 80024c6:	0011      	movs	r1, r2
 80024c8:	1cbb      	adds	r3, r7, #2
 80024ca:	1c02      	adds	r2, r0, #0
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	1c7b      	adds	r3, r7, #1
 80024d0:	1c0a      	adds	r2, r1, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d4:	1c7b      	adds	r3, r7, #1
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024dc:	1cbb      	adds	r3, r7, #2
 80024de:	881a      	ldrh	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e6:	1cbb      	adds	r3, r7, #2
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e08f      	b.n	800262a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2241      	movs	r2, #65	@ 0x41
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2240      	movs	r2, #64	@ 0x40
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f7fe f8cb 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2241      	movs	r2, #65	@ 0x41
 800252a:	2124      	movs	r1, #36	@ 0x24
 800252c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	438a      	bics	r2, r1
 800253c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	493b      	ldr	r1, [pc, #236]	@ (8002634 <HAL_I2C_Init+0x13c>)
 8002548:	400a      	ands	r2, r1
 800254a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4938      	ldr	r1, [pc, #224]	@ (8002638 <HAL_I2C_Init+0x140>)
 8002558:	400a      	ands	r2, r1
 800255a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d108      	bne.n	8002576 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2180      	movs	r1, #128	@ 0x80
 800256e:	0209      	lsls	r1, r1, #8
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e007      	b.n	8002586 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2184      	movs	r1, #132	@ 0x84
 8002580:	0209      	lsls	r1, r1, #8
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d109      	bne.n	80025a2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2180      	movs	r1, #128	@ 0x80
 800259a:	0109      	lsls	r1, r1, #4
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	e007      	b.n	80025b2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4923      	ldr	r1, [pc, #140]	@ (800263c <HAL_I2C_Init+0x144>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4920      	ldr	r1, [pc, #128]	@ (8002640 <HAL_I2C_Init+0x148>)
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	491a      	ldr	r1, [pc, #104]	@ (8002638 <HAL_I2C_Init+0x140>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	431a      	orrs	r2, r3
 80025dc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69d9      	ldr	r1, [r3, #28]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1a      	ldr	r2, [r3, #32]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2241      	movs	r2, #65	@ 0x41
 8002616:	2120      	movs	r1, #32
 8002618:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2242      	movs	r2, #66	@ 0x42
 8002624:	2100      	movs	r1, #0
 8002626:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	f0ffffff 	.word	0xf0ffffff
 8002638:	ffff7fff 	.word	0xffff7fff
 800263c:	fffff7ff 	.word	0xfffff7ff
 8002640:	02008000 	.word	0x02008000

08002644 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2241      	movs	r2, #65	@ 0x41
 8002652:	5c9b      	ldrb	r3, [r3, r2]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	d138      	bne.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2240      	movs	r2, #64	@ 0x40
 800265e:	5c9b      	ldrb	r3, [r3, r2]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002664:	2302      	movs	r3, #2
 8002666:	e032      	b.n	80026ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	2101      	movs	r1, #1
 800266e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2241      	movs	r2, #65	@ 0x41
 8002674:	2124      	movs	r1, #36	@ 0x24
 8002676:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	438a      	bics	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4911      	ldr	r1, [pc, #68]	@ (80026d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2241      	movs	r2, #65	@ 0x41
 80026bc:	2120      	movs	r1, #32
 80026be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	ffffefff 	.word	0xffffefff

080026dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2241      	movs	r2, #65	@ 0x41
 80026ea:	5c9b      	ldrb	r3, [r3, r2]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d139      	bne.n	8002766 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2240      	movs	r2, #64	@ 0x40
 80026f6:	5c9b      	ldrb	r3, [r3, r2]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e033      	b.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	2101      	movs	r1, #1
 8002706:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2241      	movs	r2, #65	@ 0x41
 800270c:	2124      	movs	r1, #36	@ 0x24
 800270e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2101      	movs	r1, #1
 800271c:	438a      	bics	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2241      	movs	r2, #65	@ 0x41
 8002756:	2120      	movs	r1, #32
 8002758:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2240      	movs	r2, #64	@ 0x40
 800275e:	2100      	movs	r1, #0
 8002760:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}
 8002770:	fffff0ff 	.word	0xfffff0ff

08002774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e1d0      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2201      	movs	r2, #1
 800278c:	4013      	ands	r3, r2
 800278e:	d100      	bne.n	8002792 <HAL_RCC_OscConfig+0x1e>
 8002790:	e069      	b.n	8002866 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002792:	4bc8      	ldr	r3, [pc, #800]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2238      	movs	r2, #56	@ 0x38
 8002798:	4013      	ands	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d15d      	bne.n	8002866 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1bc      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	025b      	lsls	r3, r3, #9
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_OscConfig+0x56>
 80027ba:	4bbe      	ldr	r3, [pc, #760]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4bbd      	ldr	r3, [pc, #756]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80027c0:	2180      	movs	r1, #128	@ 0x80
 80027c2:	0249      	lsls	r1, r1, #9
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e020      	b.n	800280c <HAL_RCC_OscConfig+0x98>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	23a0      	movs	r3, #160	@ 0xa0
 80027d0:	02db      	lsls	r3, r3, #11
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d10e      	bne.n	80027f4 <HAL_RCC_OscConfig+0x80>
 80027d6:	4bb7      	ldr	r3, [pc, #732]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4bb6      	ldr	r3, [pc, #728]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80027dc:	2180      	movs	r1, #128	@ 0x80
 80027de:	02c9      	lsls	r1, r1, #11
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	4bb3      	ldr	r3, [pc, #716]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4bb2      	ldr	r3, [pc, #712]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	0249      	lsls	r1, r1, #9
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0x98>
 80027f4:	4baf      	ldr	r3, [pc, #700]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4bae      	ldr	r3, [pc, #696]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80027fa:	49af      	ldr	r1, [pc, #700]	@ (8002ab8 <HAL_RCC_OscConfig+0x344>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	4bac      	ldr	r3, [pc, #688]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4bab      	ldr	r3, [pc, #684]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002806:	49ad      	ldr	r1, [pc, #692]	@ (8002abc <HAL_RCC_OscConfig+0x348>)
 8002808:	400a      	ands	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d014      	beq.n	800283e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fbdc 	bl	8000fd0 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800281e:	f7fe fbd7 	bl	8000fd0 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	@ 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e17b      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002830:	4ba0      	ldr	r3, [pc, #640]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	4013      	ands	r3, r2
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0xaa>
 800283c:	e013      	b.n	8002866 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7fe fbc7 	bl	8000fd0 <HAL_GetTick>
 8002842:	0003      	movs	r3, r0
 8002844:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002848:	f7fe fbc2 	bl	8000fd0 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	@ 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e166      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800285a:	4b96      	ldr	r3, [pc, #600]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	@ 0x80
 8002860:	029b      	lsls	r3, r3, #10
 8002862:	4013      	ands	r3, r2
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2202      	movs	r2, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d100      	bne.n	8002872 <HAL_RCC_OscConfig+0xfe>
 8002870:	e086      	b.n	8002980 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002872:	4b90      	ldr	r3, [pc, #576]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2238      	movs	r2, #56	@ 0x38
 8002878:	4013      	ands	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12f      	bne.n	80028e2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e14c      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288e:	4b89      	ldr	r3, [pc, #548]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a8b      	ldr	r2, [pc, #556]	@ (8002ac0 <HAL_RCC_OscConfig+0x34c>)
 8002894:	4013      	ands	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	4b85      	ldr	r3, [pc, #532]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028aa:	4b82      	ldr	r3, [pc, #520]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a85      	ldr	r2, [pc, #532]	@ (8002ac4 <HAL_RCC_OscConfig+0x350>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80028be:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0adb      	lsrs	r3, r3, #11
 80028c4:	2207      	movs	r2, #7
 80028c6:	4013      	ands	r3, r2
 80028c8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ac8 <HAL_RCC_OscConfig+0x354>)
 80028ca:	40da      	lsrs	r2, r3
 80028cc:	4b7f      	ldr	r3, [pc, #508]	@ (8002acc <HAL_RCC_OscConfig+0x358>)
 80028ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028d0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad0 <HAL_RCC_OscConfig+0x35c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7fe fb1f 	bl	8000f18 <HAL_InitTick>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d050      	beq.n	8002980 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e122      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d030      	beq.n	800294c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028ea:	4b72      	ldr	r3, [pc, #456]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a75      	ldr	r2, [pc, #468]	@ (8002ac4 <HAL_RCC_OscConfig+0x350>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80028fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002904:	2180      	movs	r1, #128	@ 0x80
 8002906:	0049      	lsls	r1, r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fb60 	bl	8000fd0 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002916:	f7fe fb5b 	bl	8000fd0 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0ff      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002928:	4b62      	ldr	r3, [pc, #392]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4013      	ands	r3, r2
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a61      	ldr	r2, [pc, #388]	@ (8002ac0 <HAL_RCC_OscConfig+0x34c>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	e019      	b.n	8002980 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800294c:	4b59      	ldr	r3, [pc, #356]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b58      	ldr	r3, [pc, #352]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002952:	4960      	ldr	r1, [pc, #384]	@ (8002ad4 <HAL_RCC_OscConfig+0x360>)
 8002954:	400a      	ands	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fb3a 	bl	8000fd0 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002962:	f7fe fb35 	bl	8000fd0 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0d9      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002974:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4013      	ands	r3, r2
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2208      	movs	r2, #8
 8002986:	4013      	ands	r3, r2
 8002988:	d042      	beq.n	8002a10 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800298a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2238      	movs	r2, #56	@ 0x38
 8002990:	4013      	ands	r3, r2
 8002992:	2b18      	cmp	r3, #24
 8002994:	d105      	bne.n	80029a2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d138      	bne.n	8002a10 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0c2      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d019      	beq.n	80029de <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80029aa:	4b42      	ldr	r3, [pc, #264]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80029ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029ae:	4b41      	ldr	r3, [pc, #260]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80029b0:	2101      	movs	r1, #1
 80029b2:	430a      	orrs	r2, r1
 80029b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fb0b 	bl	8000fd0 <HAL_GetTick>
 80029ba:	0003      	movs	r3, r0
 80029bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80029c0:	f7fe fb06 	bl	8000fd0 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0aa      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80029d2:	4b38      	ldr	r3, [pc, #224]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80029d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d6:	2202      	movs	r2, #2
 80029d8:	4013      	ands	r3, r2
 80029da:	d0f1      	beq.n	80029c0 <HAL_RCC_OscConfig+0x24c>
 80029dc:	e018      	b.n	8002a10 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029de:	4b35      	ldr	r3, [pc, #212]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80029e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029e2:	4b34      	ldr	r3, [pc, #208]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	438a      	bics	r2, r1
 80029e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe faf1 	bl	8000fd0 <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80029f4:	f7fe faec 	bl	8000fd0 <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e090      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002a06:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d1f1      	bne.n	80029f4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2204      	movs	r2, #4
 8002a16:	4013      	ands	r3, r2
 8002a18:	d100      	bne.n	8002a1c <HAL_RCC_OscConfig+0x2a8>
 8002a1a:	e084      	b.n	8002b26 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1c:	230f      	movs	r3, #15
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002a24:	4b23      	ldr	r3, [pc, #140]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2238      	movs	r2, #56	@ 0x38
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d000      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2c6>
 8002a38:	e075      	b.n	8002b26 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e074      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2e0>
 8002a46:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a52:	e01c      	b.n	8002a8e <HAL_RCC_OscConfig+0x31a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x302>
 8002a5c:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a60:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a62:	2104      	movs	r1, #4
 8002a64:	430a      	orrs	r2, r1
 8002a66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	430a      	orrs	r2, r1
 8002a72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0x31a>
 8002a76:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	438a      	bics	r2, r1
 8002a80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a82:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x340>)
 8002a88:	2104      	movs	r1, #4
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d028      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fa9b 	bl	8000fd0 <HAL_GetTick>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fa96 	bl	8000fd0 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad8 <HAL_RCC_OscConfig+0x364>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d915      	bls.n	8002adc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e039      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	fffeffff 	.word	0xfffeffff
 8002abc:	fffbffff 	.word	0xfffbffff
 8002ac0:	ffff80ff 	.word	0xffff80ff
 8002ac4:	ffffc7ff 	.word	0xffffc7ff
 8002ac8:	02dc6c00 	.word	0x02dc6c00
 8002acc:	2000000c 	.word	0x2000000c
 8002ad0:	20000010 	.word	0x20000010
 8002ad4:	fffffeff 	.word	0xfffffeff
 8002ad8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <HAL_RCC_OscConfig+0x3bc>)
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d0dc      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x32c>
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fa72 	bl	8000fd0 <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002af0:	e009      	b.n	8002b06 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe fa6d 	bl	8000fd0 <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b34 <HAL_RCC_OscConfig+0x3c0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e010      	b.n	8002b28 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_RCC_OscConfig+0x3bc>)
 8002b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b10:	230f      	movs	r3, #15
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <HAL_RCC_OscConfig+0x3bc>)
 8002b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b1e:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <HAL_RCC_OscConfig+0x3bc>)
 8002b20:	4905      	ldr	r1, [pc, #20]	@ (8002b38 <HAL_RCC_OscConfig+0x3c4>)
 8002b22:	400a      	ands	r2, r1
 8002b24:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b006      	add	sp, #24
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	00001388 	.word	0x00001388
 8002b38:	efffffff 	.word	0xefffffff

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0e9      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b76      	ldr	r3, [pc, #472]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2207      	movs	r2, #7
 8002b56:	4013      	ands	r3, r2
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d91e      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b73      	ldr	r3, [pc, #460]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2207      	movs	r2, #7
 8002b64:	4393      	bics	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	4b70      	ldr	r3, [pc, #448]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b70:	f7fe fa2e 	bl	8000fd0 <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b78:	e009      	b.n	8002b8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7a:	f7fe fa29 	bl	8000fd0 <HAL_GetTick>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	4a6a      	ldr	r2, [pc, #424]	@ (8002d30 <HAL_RCC_ClockConfig+0x1f4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e0ca      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b8e:	4b67      	ldr	r3, [pc, #412]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2207      	movs	r2, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1ee      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d017      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2204      	movs	r2, #4
 8002bac:	4013      	ands	r3, r2
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002bb0:	4b60      	ldr	r3, [pc, #384]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a60      	ldr	r2, [pc, #384]	@ (8002d38 <HAL_RCC_ClockConfig+0x1fc>)
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002bba:	21b0      	movs	r1, #176	@ 0xb0
 8002bbc:	0109      	lsls	r1, r1, #4
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4a5d      	ldr	r2, [pc, #372]	@ (8002d3c <HAL_RCC_ClockConfig+0x200>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	4b58      	ldr	r3, [pc, #352]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d055      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002be0:	4b54      	ldr	r3, [pc, #336]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	221c      	movs	r2, #28
 8002be6:	4393      	bics	r3, r2
 8002be8:	0019      	movs	r1, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	4b51      	ldr	r3, [pc, #324]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	d11f      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e08b      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c14:	4b47      	ldr	r3, [pc, #284]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d113      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e07f      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002c2c:	4b41      	ldr	r3, [pc, #260]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c30:	2202      	movs	r2, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d108      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e074      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	2202      	movs	r2, #2
 8002c40:	4013      	ands	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e06d      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c48:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	4393      	bics	r3, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4b37      	ldr	r3, [pc, #220]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5c:	f7fe f9b8 	bl	8000fd0 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c64:	e009      	b.n	8002c7a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c66:	f7fe f9b3 	bl	8000fd0 <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	4a2f      	ldr	r2, [pc, #188]	@ (8002d30 <HAL_RCC_ClockConfig+0x1f4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e054      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2238      	movs	r2, #56	@ 0x38
 8002c80:	401a      	ands	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1ec      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2207      	movs	r2, #7
 8002c92:	4013      	ands	r3, r2
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d21e      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2207      	movs	r2, #7
 8002ca0:	4393      	bics	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	4b21      	ldr	r3, [pc, #132]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cac:	f7fe f990 	bl	8000fd0 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cb4:	e009      	b.n	8002cca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb6:	f7fe f98b 	bl	8000fd0 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <HAL_RCC_ClockConfig+0x1f4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e02c      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cca:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2204      	movs	r2, #4
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce2:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4a16      	ldr	r2, [pc, #88]	@ (8002d40 <HAL_RCC_ClockConfig+0x204>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	0019      	movs	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002cf6:	f000 f82b 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002cfa:	0001      	movs	r1, r0
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	220f      	movs	r2, #15
 8002d04:	401a      	ands	r2, r3
 8002d06:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <HAL_RCC_ClockConfig+0x208>)
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	58d3      	ldr	r3, [r2, r3]
 8002d0c:	221f      	movs	r2, #31
 8002d0e:	4013      	ands	r3, r2
 8002d10:	000a      	movs	r2, r1
 8002d12:	40da      	lsrs	r2, r3
 8002d14:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <HAL_RCC_ClockConfig+0x20c>)
 8002d16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d18:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <HAL_RCC_ClockConfig+0x210>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7fe f8fb 	bl	8000f18 <HAL_InitTick>
 8002d22:	0003      	movs	r3, r0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b004      	add	sp, #16
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	00001388 	.word	0x00001388
 8002d34:	40021000 	.word	0x40021000
 8002d38:	ffff84ff 	.word	0xffff84ff
 8002d3c:	fffff0ff 	.word	0xfffff0ff
 8002d40:	ffff8fff 	.word	0xffff8fff
 8002d44:	080060a0 	.word	0x080060a0
 8002d48:	2000000c 	.word	0x2000000c
 8002d4c:	20000010 	.word	0x20000010

08002d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d56:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2238      	movs	r2, #56	@ 0x38
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d10f      	bne.n	8002d80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0adb      	lsrs	r3, r3, #11
 8002d66:	2207      	movs	r2, #7
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	0013      	movs	r3, r2
 8002d70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	4815      	ldr	r0, [pc, #84]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x7c>)
 8002d76:	f7fd f9c7 	bl	8000108 <__udivsi3>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	e01e      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d80:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2238      	movs	r2, #56	@ 0x38
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d8c:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x80>)
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2238      	movs	r2, #56	@ 0x38
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d103      	bne.n	8002da6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002da6:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2238      	movs	r2, #56	@ 0x38
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b18      	cmp	r3, #24
 8002db0:	d103      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002db2:	23fa      	movs	r3, #250	@ 0xfa
 8002db4:	01db      	lsls	r3, r3, #7
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	e001      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002dbe:	687b      	ldr	r3, [r7, #4]
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	02dc6c00 	.word	0x02dc6c00
 8002dd0:	00f42400 	.word	0x00f42400

08002dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	2000000c 	.word	0x2000000c

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002dec:	f7ff fff2 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df0:	0001      	movs	r1, r0
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0b1b      	lsrs	r3, r3, #12
 8002df8:	2207      	movs	r2, #7
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	58d3      	ldr	r3, [r2, r3]
 8002e02:	221f      	movs	r2, #31
 8002e04:	4013      	ands	r3, r2
 8002e06:	40d9      	lsrs	r1, r3
 8002e08:	000b      	movs	r3, r1
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000
 8002e14:	080060e0 	.word	0x080060e0

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e20:	2313      	movs	r3, #19
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e28:	2312      	movs	r3, #18
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	029b      	lsls	r3, r3, #10
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e3c:	e079      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2011      	movs	r0, #17
 8002e40:	183b      	adds	r3, r7, r0
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b64      	ldr	r3, [pc, #400]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	055b      	lsls	r3, r3, #21
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d110      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b61      	ldr	r3, [pc, #388]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e56:	4b60      	ldr	r3, [pc, #384]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	0549      	lsls	r1, r1, #21
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e60:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	055b      	lsls	r3, r3, #21
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002e74:	4b58      	ldr	r3, [pc, #352]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e78:	23c0      	movs	r3, #192	@ 0xc0
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d019      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d014      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002e90:	4b51      	ldr	r3, [pc, #324]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	4a51      	ldr	r2, [pc, #324]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	0249      	lsls	r1, r1, #9
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002eac:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eae:	494c      	ldr	r1, [pc, #304]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002eb4:	4b48      	ldr	r3, [pc, #288]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d016      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec2:	f7fe f885 	bl	8000fd0 <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe f880 	bl	8000fd0 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	4a43      	ldr	r2, [pc, #268]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d904      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002edc:	2313      	movs	r3, #19
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	701a      	strb	r2, [r3, #0]
          break;
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	2202      	movs	r2, #2
 8002eec:	4013      	ands	r3, r2
 8002eee:	d0ed      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002ef0:	2313      	movs	r3, #19
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002efa:	4b37      	ldr	r3, [pc, #220]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efe:	4a37      	ldr	r2, [pc, #220]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	4b33      	ldr	r3, [pc, #204]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f0e:	e005      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f10:	2312      	movs	r3, #18
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2213      	movs	r2, #19
 8002f16:	18ba      	adds	r2, r7, r2
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f1c:	2311      	movs	r3, #17
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f2c:	492e      	ldr	r1, [pc, #184]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2e:	400a      	ands	r2, r1
 8002f30:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2201      	movs	r2, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3c:	4b26      	ldr	r3, [pc, #152]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f40:	2203      	movs	r2, #3
 8002f42:	4393      	bics	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2240      	movs	r2, #64	@ 0x40
 8002f56:	4013      	ands	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5e:	4a23      	ldr	r2, [pc, #140]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	@ 0x80
 8002f74:	01db      	lsls	r3, r3, #7
 8002f76:	4013      	ands	r3, r2
 8002f78:	d008      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f7a:	4b17      	ldr	r3, [pc, #92]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	0899      	lsrs	r1, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f98:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da09      	bge.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002fb4:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	22e0      	movs	r2, #224	@ 0xe0
 8002fba:	4393      	bics	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002fc8:	2312      	movs	r3, #18
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	781b      	ldrb	r3, [r3, #0]
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b006      	add	sp, #24
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	fffffcff 	.word	0xfffffcff
 8002fe0:	fffeffff 	.word	0xfffeffff
 8002fe4:	00001388 	.word	0x00001388
 8002fe8:	efffffff 	.word	0xefffffff
 8002fec:	ffffcfff 	.word	0xffffcfff
 8002ff0:	ffff3fff 	.word	0xffff3fff

08002ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0a8      	b.n	8003158 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d109      	bne.n	8003022 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	2382      	movs	r3, #130	@ 0x82
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	429a      	cmp	r2, r3
 8003018:	d009      	beq.n	800302e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	61da      	str	r2, [r3, #28]
 8003020:	e005      	b.n	800302e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	225d      	movs	r2, #93	@ 0x5d
 8003038:	5c9b      	ldrb	r3, [r3, r2]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	225c      	movs	r2, #92	@ 0x5c
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f7fd fc6a 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	225d      	movs	r2, #93	@ 0x5d
 8003054:	2102      	movs	r1, #2
 8003056:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2140      	movs	r1, #64	@ 0x40
 8003064:	438a      	bics	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	23e0      	movs	r3, #224	@ 0xe0
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	429a      	cmp	r2, r3
 8003072:	d902      	bls.n	800307a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e002      	b.n	8003080 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	015b      	lsls	r3, r3, #5
 800307e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	23f0      	movs	r3, #240	@ 0xf0
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	429a      	cmp	r2, r3
 800308a:	d008      	beq.n	800309e <HAL_SPI_Init+0xaa>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	23e0      	movs	r3, #224	@ 0xe0
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	429a      	cmp	r2, r3
 8003096:	d002      	beq.n	800309e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	2382      	movs	r3, #130	@ 0x82
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	401a      	ands	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	2384      	movs	r3, #132	@ 0x84
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	400b      	ands	r3, r1
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2102      	movs	r1, #2
 80030ba:	400b      	ands	r3, r1
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	2101      	movs	r1, #1
 80030c4:	400b      	ands	r3, r1
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6999      	ldr	r1, [r3, #24]
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	400b      	ands	r3, r1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	2138      	movs	r1, #56	@ 0x38
 80030da:	400b      	ands	r3, r1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	2180      	movs	r1, #128	@ 0x80
 80030e4:	400b      	ands	r3, r1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	0011      	movs	r1, r2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	401a      	ands	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	2204      	movs	r2, #4
 8003104:	401a      	ands	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	2110      	movs	r1, #16
 800310c:	400b      	ands	r3, r1
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003114:	2108      	movs	r1, #8
 8003116:	400b      	ands	r3, r1
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68d9      	ldr	r1, [r3, #12]
 800311e:	23f0      	movs	r3, #240	@ 0xf0
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	400b      	ands	r3, r1
 8003124:	431a      	orrs	r2, r3
 8003126:	0011      	movs	r1, r2
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	015b      	lsls	r3, r3, #5
 800312e:	401a      	ands	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4907      	ldr	r1, [pc, #28]	@ (8003160 <HAL_SPI_Init+0x16c>)
 8003144:	400a      	ands	r2, r1
 8003146:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	225d      	movs	r2, #93	@ 0x5d
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	b004      	add	sp, #16
 800315e:	bd80      	pop	{r7, pc}
 8003160:	fffff7ff 	.word	0xfffff7ff

08003164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e04a      	b.n	800320c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	223d      	movs	r2, #61	@ 0x3d
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	223c      	movs	r2, #60	@ 0x3c
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f7fd fd03 	bl	8000b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	223d      	movs	r2, #61	@ 0x3d
 8003196:	2102      	movs	r1, #2
 8003198:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	0019      	movs	r1, r3
 80031a4:	0010      	movs	r0, r2
 80031a6:	f000 fb43 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2248      	movs	r2, #72	@ 0x48
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	223e      	movs	r2, #62	@ 0x3e
 80031b6:	2101      	movs	r1, #1
 80031b8:	5499      	strb	r1, [r3, r2]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	223f      	movs	r2, #63	@ 0x3f
 80031be:	2101      	movs	r1, #1
 80031c0:	5499      	strb	r1, [r3, r2]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2240      	movs	r2, #64	@ 0x40
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2241      	movs	r2, #65	@ 0x41
 80031ce:	2101      	movs	r1, #1
 80031d0:	5499      	strb	r1, [r3, r2]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2242      	movs	r2, #66	@ 0x42
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2243      	movs	r2, #67	@ 0x43
 80031de:	2101      	movs	r1, #1
 80031e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2244      	movs	r2, #68	@ 0x44
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2245      	movs	r2, #69	@ 0x45
 80031ee:	2101      	movs	r1, #1
 80031f0:	5499      	strb	r1, [r3, r2]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2246      	movs	r2, #70	@ 0x46
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2247      	movs	r2, #71	@ 0x47
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223d      	movs	r2, #61	@ 0x3d
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e04a      	b.n	80032bc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	223d      	movs	r2, #61	@ 0x3d
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	223c      	movs	r2, #60	@ 0x3c
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f000 f841 	bl	80032c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	223d      	movs	r2, #61	@ 0x3d
 8003246:	2102      	movs	r1, #2
 8003248:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	0019      	movs	r1, r3
 8003254:	0010      	movs	r0, r2
 8003256:	f000 faeb 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2248      	movs	r2, #72	@ 0x48
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	223e      	movs	r2, #62	@ 0x3e
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	223f      	movs	r2, #63	@ 0x3f
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2240      	movs	r2, #64	@ 0x40
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2241      	movs	r2, #65	@ 0x41
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2242      	movs	r2, #66	@ 0x42
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2243      	movs	r2, #67	@ 0x43
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2244      	movs	r2, #68	@ 0x44
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2245      	movs	r2, #69	@ 0x45
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2246      	movs	r2, #70	@ 0x46
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2247      	movs	r2, #71	@ 0x47
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	223d      	movs	r2, #61	@ 0x3d
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d108      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x22>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	223e      	movs	r2, #62	@ 0x3e
 80032e8:	5c9b      	ldrb	r3, [r3, r2]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	1e5a      	subs	r2, r3, #1
 80032f0:	4193      	sbcs	r3, r2
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	e037      	b.n	8003366 <HAL_TIM_PWM_Start+0x92>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d108      	bne.n	800330e <HAL_TIM_PWM_Start+0x3a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	223f      	movs	r2, #63	@ 0x3f
 8003300:	5c9b      	ldrb	r3, [r3, r2]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	4193      	sbcs	r3, r2
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e02b      	b.n	8003366 <HAL_TIM_PWM_Start+0x92>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d108      	bne.n	8003326 <HAL_TIM_PWM_Start+0x52>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2240      	movs	r2, #64	@ 0x40
 8003318:	5c9b      	ldrb	r3, [r3, r2]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	4193      	sbcs	r3, r2
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e01f      	b.n	8003366 <HAL_TIM_PWM_Start+0x92>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d108      	bne.n	800333e <HAL_TIM_PWM_Start+0x6a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2241      	movs	r2, #65	@ 0x41
 8003330:	5c9b      	ldrb	r3, [r3, r2]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	1e5a      	subs	r2, r3, #1
 8003338:	4193      	sbcs	r3, r2
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e013      	b.n	8003366 <HAL_TIM_PWM_Start+0x92>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b10      	cmp	r3, #16
 8003342:	d108      	bne.n	8003356 <HAL_TIM_PWM_Start+0x82>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2242      	movs	r2, #66	@ 0x42
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	1e5a      	subs	r2, r3, #1
 8003350:	4193      	sbcs	r3, r2
 8003352:	b2db      	uxtb	r3, r3
 8003354:	e007      	b.n	8003366 <HAL_TIM_PWM_Start+0x92>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2243      	movs	r2, #67	@ 0x43
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	4193      	sbcs	r3, r2
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07b      	b.n	8003466 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0xaa>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	223e      	movs	r2, #62	@ 0x3e
 8003378:	2102      	movs	r1, #2
 800337a:	5499      	strb	r1, [r3, r2]
 800337c:	e023      	b.n	80033c6 <HAL_TIM_PWM_Start+0xf2>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0xba>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	223f      	movs	r2, #63	@ 0x3f
 8003388:	2102      	movs	r1, #2
 800338a:	5499      	strb	r1, [r3, r2]
 800338c:	e01b      	b.n	80033c6 <HAL_TIM_PWM_Start+0xf2>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d104      	bne.n	800339e <HAL_TIM_PWM_Start+0xca>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2240      	movs	r2, #64	@ 0x40
 8003398:	2102      	movs	r1, #2
 800339a:	5499      	strb	r1, [r3, r2]
 800339c:	e013      	b.n	80033c6 <HAL_TIM_PWM_Start+0xf2>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_PWM_Start+0xda>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2241      	movs	r2, #65	@ 0x41
 80033a8:	2102      	movs	r1, #2
 80033aa:	5499      	strb	r1, [r3, r2]
 80033ac:	e00b      	b.n	80033c6 <HAL_TIM_PWM_Start+0xf2>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d104      	bne.n	80033be <HAL_TIM_PWM_Start+0xea>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2242      	movs	r2, #66	@ 0x42
 80033b8:	2102      	movs	r1, #2
 80033ba:	5499      	strb	r1, [r3, r2]
 80033bc:	e003      	b.n	80033c6 <HAL_TIM_PWM_Start+0xf2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2243      	movs	r2, #67	@ 0x43
 80033c2:	2102      	movs	r1, #2
 80033c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6839      	ldr	r1, [r7, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 fdd2 	bl	8003f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a25      	ldr	r2, [pc, #148]	@ (8003470 <HAL_TIM_PWM_Start+0x19c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_TIM_PWM_Start+0x11e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a24      	ldr	r2, [pc, #144]	@ (8003474 <HAL_TIM_PWM_Start+0x1a0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_TIM_PWM_Start+0x11e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a22      	ldr	r2, [pc, #136]	@ (8003478 <HAL_TIM_PWM_Start+0x1a4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_Start+0x122>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_TIM_PWM_Start+0x124>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2180      	movs	r1, #128	@ 0x80
 8003408:	0209      	lsls	r1, r1, #8
 800340a:	430a      	orrs	r2, r1
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a17      	ldr	r2, [pc, #92]	@ (8003470 <HAL_TIM_PWM_Start+0x19c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_TIM_PWM_Start+0x14e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a17      	ldr	r2, [pc, #92]	@ (800347c <HAL_TIM_PWM_Start+0x1a8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d116      	bne.n	8003450 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a15      	ldr	r2, [pc, #84]	@ (8003480 <HAL_TIM_PWM_Start+0x1ac>)
 800342a:	4013      	ands	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b06      	cmp	r3, #6
 8003432:	d016      	beq.n	8003462 <HAL_TIM_PWM_Start+0x18e>
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	025b      	lsls	r3, r3, #9
 800343a:	429a      	cmp	r2, r3
 800343c:	d011      	beq.n	8003462 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	e008      	b.n	8003462 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2101      	movs	r1, #1
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e000      	b.n	8003464 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003462:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b004      	add	sp, #16
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	40000400 	.word	0x40000400
 8003480:	00010007 	.word	0x00010007

08003484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2317      	movs	r3, #23
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	223c      	movs	r2, #60	@ 0x3c
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e0e5      	b.n	8003672 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	223c      	movs	r2, #60	@ 0x3c
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b14      	cmp	r3, #20
 80034b2:	d900      	bls.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80034b4:	e0d1      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	009a      	lsls	r2, r3, #2
 80034ba:	4b70      	ldr	r3, [pc, #448]	@ (800367c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fa1c 	bl	8003908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2108      	movs	r1, #8
 80034dc:	430a      	orrs	r2, r1
 80034de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2104      	movs	r1, #4
 80034ec:	438a      	bics	r2, r1
 80034ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6999      	ldr	r1, [r3, #24]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	619a      	str	r2, [r3, #24]
      break;
 8003502:	e0af      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fa7b 	bl	8003a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2180      	movs	r1, #128	@ 0x80
 800351e:	0109      	lsls	r1, r1, #4
 8003520:	430a      	orrs	r2, r1
 8003522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4954      	ldr	r1, [pc, #336]	@ (8003680 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003530:	400a      	ands	r2, r1
 8003532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6999      	ldr	r1, [r3, #24]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	021a      	lsls	r2, r3, #8
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	619a      	str	r2, [r3, #24]
      break;
 8003548:	e08c      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	0011      	movs	r1, r2
 8003552:	0018      	movs	r0, r3
 8003554:	f000 fad6 	bl	8003b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2108      	movs	r1, #8
 8003564:	430a      	orrs	r2, r1
 8003566:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2104      	movs	r1, #4
 8003574:	438a      	bics	r2, r1
 8003576:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69d9      	ldr	r1, [r3, #28]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	61da      	str	r2, [r3, #28]
      break;
 800358a:	e06b      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f000 fb37 	bl	8003c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2180      	movs	r1, #128	@ 0x80
 80035a6:	0109      	lsls	r1, r1, #4
 80035a8:	430a      	orrs	r2, r1
 80035aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4932      	ldr	r1, [pc, #200]	@ (8003680 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69d9      	ldr	r1, [r3, #28]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	61da      	str	r2, [r3, #28]
      break;
 80035d0:	e048      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	0011      	movs	r1, r2
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fb78 	bl	8003cd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2108      	movs	r1, #8
 80035ec:	430a      	orrs	r2, r1
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2104      	movs	r1, #4
 80035fc:	438a      	bics	r2, r1
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003612:	e027      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	0011      	movs	r1, r2
 800361c:	0018      	movs	r0, r3
 800361e:	f000 fbb1 	bl	8003d84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2180      	movs	r1, #128	@ 0x80
 800362e:	0109      	lsls	r1, r1, #4
 8003630:	430a      	orrs	r2, r1
 8003632:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4910      	ldr	r1, [pc, #64]	@ (8003680 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003640:	400a      	ands	r2, r1
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	021a      	lsls	r2, r3, #8
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003658:	e004      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800365a:	2317      	movs	r3, #23
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	223c      	movs	r2, #60	@ 0x3c
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

  return status;
 800366c:	2317      	movs	r3, #23
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b006      	add	sp, #24
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	08006100 	.word	0x08006100
 8003680:	fffffbff 	.word	0xfffffbff

08003684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	230f      	movs	r3, #15
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	223c      	movs	r2, #60	@ 0x3c
 800369a:	5c9b      	ldrb	r3, [r3, r2]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_ConfigClockSource+0x20>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0bc      	b.n	800381e <HAL_TIM_ConfigClockSource+0x19a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	223c      	movs	r2, #60	@ 0x3c
 80036a8:	2101      	movs	r1, #1
 80036aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	223d      	movs	r2, #61	@ 0x3d
 80036b0:	2102      	movs	r1, #2
 80036b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4a5a      	ldr	r2, [pc, #360]	@ (8003828 <HAL_TIM_ConfigClockSource+0x1a4>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4a59      	ldr	r2, [pc, #356]	@ (800382c <HAL_TIM_ConfigClockSource+0x1a8>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2280      	movs	r2, #128	@ 0x80
 80036da:	0192      	lsls	r2, r2, #6
 80036dc:	4293      	cmp	r3, r2
 80036de:	d040      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xde>
 80036e0:	2280      	movs	r2, #128	@ 0x80
 80036e2:	0192      	lsls	r2, r2, #6
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d900      	bls.n	80036ea <HAL_TIM_ConfigClockSource+0x66>
 80036e8:	e088      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
 80036ea:	2280      	movs	r2, #128	@ 0x80
 80036ec:	0152      	lsls	r2, r2, #5
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d100      	bne.n	80036f4 <HAL_TIM_ConfigClockSource+0x70>
 80036f2:	e088      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x182>
 80036f4:	2280      	movs	r2, #128	@ 0x80
 80036f6:	0152      	lsls	r2, r2, #5
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d900      	bls.n	80036fe <HAL_TIM_ConfigClockSource+0x7a>
 80036fc:	e07e      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
 80036fe:	2b70      	cmp	r3, #112	@ 0x70
 8003700:	d018      	beq.n	8003734 <HAL_TIM_ConfigClockSource+0xb0>
 8003702:	d900      	bls.n	8003706 <HAL_TIM_ConfigClockSource+0x82>
 8003704:	e07a      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
 8003706:	2b60      	cmp	r3, #96	@ 0x60
 8003708:	d04f      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x126>
 800370a:	d900      	bls.n	800370e <HAL_TIM_ConfigClockSource+0x8a>
 800370c:	e076      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
 800370e:	2b50      	cmp	r3, #80	@ 0x50
 8003710:	d03b      	beq.n	800378a <HAL_TIM_ConfigClockSource+0x106>
 8003712:	d900      	bls.n	8003716 <HAL_TIM_ConfigClockSource+0x92>
 8003714:	e072      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
 8003716:	2b40      	cmp	r3, #64	@ 0x40
 8003718:	d057      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x146>
 800371a:	d900      	bls.n	800371e <HAL_TIM_ConfigClockSource+0x9a>
 800371c:	e06e      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
 800371e:	2b30      	cmp	r3, #48	@ 0x30
 8003720:	d063      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x166>
 8003722:	d86b      	bhi.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
 8003724:	2b20      	cmp	r3, #32
 8003726:	d060      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x166>
 8003728:	d868      	bhi.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d05d      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x166>
 800372e:	2b10      	cmp	r3, #16
 8003730:	d05b      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x166>
 8003732:	e063      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003744:	f000 fbf8 	bl	8003f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2277      	movs	r2, #119	@ 0x77
 8003754:	4313      	orrs	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	609a      	str	r2, [r3, #8]
      break;
 8003760:	e052      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	f000 fbe1 	bl	8003f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2180      	movs	r1, #128	@ 0x80
 8003782:	01c9      	lsls	r1, r1, #7
 8003784:	430a      	orrs	r2, r1
 8003786:	609a      	str	r2, [r3, #8]
      break;
 8003788:	e03e      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003796:	001a      	movs	r2, r3
 8003798:	f000 fb52 	bl	8003e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2150      	movs	r1, #80	@ 0x50
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 fbac 	bl	8003f00 <TIM_ITRx_SetConfig>
      break;
 80037a8:	e02e      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b6:	001a      	movs	r2, r3
 80037b8:	f000 fb70 	bl	8003e9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2160      	movs	r1, #96	@ 0x60
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 fb9c 	bl	8003f00 <TIM_ITRx_SetConfig>
      break;
 80037c8:	e01e      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d6:	001a      	movs	r2, r3
 80037d8:	f000 fb32 	bl	8003e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2140      	movs	r1, #64	@ 0x40
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 fb8c 	bl	8003f00 <TIM_ITRx_SetConfig>
      break;
 80037e8:	e00e      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	0019      	movs	r1, r3
 80037f4:	0010      	movs	r0, r2
 80037f6:	f000 fb83 	bl	8003f00 <TIM_ITRx_SetConfig>
      break;
 80037fa:	e005      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80037fc:	230f      	movs	r3, #15
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
      break;
 8003804:	e000      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003806:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	223d      	movs	r2, #61	@ 0x3d
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	223c      	movs	r2, #60	@ 0x3c
 8003814:	2100      	movs	r1, #0
 8003816:	5499      	strb	r1, [r3, r2]

  return status;
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	781b      	ldrb	r3, [r3, #0]
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	ffceff88 	.word	0xffceff88
 800382c:	ffff00ff 	.word	0xffff00ff

08003830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a2b      	ldr	r2, [pc, #172]	@ (80038f0 <TIM_Base_SetConfig+0xc0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_Base_SetConfig+0x20>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a2a      	ldr	r2, [pc, #168]	@ (80038f4 <TIM_Base_SetConfig+0xc4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d108      	bne.n	8003862 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2270      	movs	r2, #112	@ 0x70
 8003854:	4393      	bics	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a22      	ldr	r2, [pc, #136]	@ (80038f0 <TIM_Base_SetConfig+0xc0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00f      	beq.n	800388a <TIM_Base_SetConfig+0x5a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a21      	ldr	r2, [pc, #132]	@ (80038f4 <TIM_Base_SetConfig+0xc4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <TIM_Base_SetConfig+0x5a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a20      	ldr	r2, [pc, #128]	@ (80038f8 <TIM_Base_SetConfig+0xc8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <TIM_Base_SetConfig+0x5a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <TIM_Base_SetConfig+0xcc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_Base_SetConfig+0x5a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1e      	ldr	r2, [pc, #120]	@ (8003900 <TIM_Base_SetConfig+0xd0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d108      	bne.n	800389c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a1d      	ldr	r2, [pc, #116]	@ (8003904 <TIM_Base_SetConfig+0xd4>)
 800388e:	4013      	ands	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2280      	movs	r2, #128	@ 0x80
 80038a0:	4393      	bics	r3, r2
 80038a2:	001a      	movs	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <TIM_Base_SetConfig+0xc0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_Base_SetConfig+0xaa>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a0b      	ldr	r2, [pc, #44]	@ (80038fc <TIM_Base_SetConfig+0xcc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_Base_SetConfig+0xaa>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <TIM_Base_SetConfig+0xd0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d103      	bne.n	80038e2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	615a      	str	r2, [r3, #20]
}
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b004      	add	sp, #16
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40002000 	.word	0x40002000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800
 8003904:	fffffcff 	.word	0xfffffcff

08003908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	2201      	movs	r2, #1
 800391e:	4393      	bics	r3, r2
 8003920:	001a      	movs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a2e      	ldr	r2, [pc, #184]	@ (80039f0 <TIM_OC1_SetConfig+0xe8>)
 8003936:	4013      	ands	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2203      	movs	r2, #3
 800393e:	4393      	bics	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2202      	movs	r2, #2
 8003950:	4393      	bics	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a24      	ldr	r2, [pc, #144]	@ (80039f4 <TIM_OC1_SetConfig+0xec>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d007      	beq.n	8003976 <TIM_OC1_SetConfig+0x6e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a23      	ldr	r2, [pc, #140]	@ (80039f8 <TIM_OC1_SetConfig+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d003      	beq.n	8003976 <TIM_OC1_SetConfig+0x6e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a22      	ldr	r2, [pc, #136]	@ (80039fc <TIM_OC1_SetConfig+0xf4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10c      	bne.n	8003990 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2208      	movs	r2, #8
 800397a:	4393      	bics	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2204      	movs	r2, #4
 800398c:	4393      	bics	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a18      	ldr	r2, [pc, #96]	@ (80039f4 <TIM_OC1_SetConfig+0xec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_OC1_SetConfig+0xa0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <TIM_OC1_SetConfig+0xf0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_OC1_SetConfig+0xa0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a16      	ldr	r2, [pc, #88]	@ (80039fc <TIM_OC1_SetConfig+0xf4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d111      	bne.n	80039cc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4a15      	ldr	r2, [pc, #84]	@ (8003a00 <TIM_OC1_SetConfig+0xf8>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4a14      	ldr	r2, [pc, #80]	@ (8003a04 <TIM_OC1_SetConfig+0xfc>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b006      	add	sp, #24
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	fffeff8f 	.word	0xfffeff8f
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40014400 	.word	0x40014400
 80039fc:	40014800 	.word	0x40014800
 8003a00:	fffffeff 	.word	0xfffffeff
 8003a04:	fffffdff 	.word	0xfffffdff

08003a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	4393      	bics	r3, r2
 8003a20:	001a      	movs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae8 <TIM_OC2_SetConfig+0xe0>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003aec <TIM_OC2_SetConfig+0xe4>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2220      	movs	r2, #32
 8003a52:	4393      	bics	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a22      	ldr	r2, [pc, #136]	@ (8003af0 <TIM_OC2_SetConfig+0xe8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10d      	bne.n	8003a86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2280      	movs	r2, #128	@ 0x80
 8003a6e:	4393      	bics	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2240      	movs	r2, #64	@ 0x40
 8003a82:	4393      	bics	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <TIM_OC2_SetConfig+0xe8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <TIM_OC2_SetConfig+0x96>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <TIM_OC2_SetConfig+0xec>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_OC2_SetConfig+0x96>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a17      	ldr	r2, [pc, #92]	@ (8003af8 <TIM_OC2_SetConfig+0xf0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d113      	bne.n	8003ac6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <TIM_OC2_SetConfig+0xf4>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	@ (8003b00 <TIM_OC2_SetConfig+0xf8>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b006      	add	sp, #24
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	feff8fff 	.word	0xfeff8fff
 8003aec:	fffffcff 	.word	0xfffffcff
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800
 8003afc:	fffffbff 	.word	0xfffffbff
 8003b00:	fffff7ff 	.word	0xfffff7ff

08003b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a31      	ldr	r2, [pc, #196]	@ (8003be0 <TIM_OC3_SetConfig+0xdc>)
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003be4 <TIM_OC3_SetConfig+0xe0>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2203      	movs	r2, #3
 8003b38:	4393      	bics	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4a27      	ldr	r2, [pc, #156]	@ (8003be8 <TIM_OC3_SetConfig+0xe4>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a23      	ldr	r2, [pc, #140]	@ (8003bec <TIM_OC3_SetConfig+0xe8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10d      	bne.n	8003b7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <TIM_OC3_SetConfig+0xec>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf4 <TIM_OC3_SetConfig+0xf0>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a1a      	ldr	r2, [pc, #104]	@ (8003bec <TIM_OC3_SetConfig+0xe8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <TIM_OC3_SetConfig+0x92>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf8 <TIM_OC3_SetConfig+0xf4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC3_SetConfig+0x92>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1a      	ldr	r2, [pc, #104]	@ (8003bfc <TIM_OC3_SetConfig+0xf8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d113      	bne.n	8003bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4a19      	ldr	r2, [pc, #100]	@ (8003c00 <TIM_OC3_SetConfig+0xfc>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4a18      	ldr	r2, [pc, #96]	@ (8003c04 <TIM_OC3_SetConfig+0x100>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	621a      	str	r2, [r3, #32]
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b006      	add	sp, #24
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	fffffeff 	.word	0xfffffeff
 8003be4:	fffeff8f 	.word	0xfffeff8f
 8003be8:	fffffdff 	.word	0xfffffdff
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	fffff7ff 	.word	0xfffff7ff
 8003bf4:	fffffbff 	.word	0xfffffbff
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800
 8003c00:	ffffefff 	.word	0xffffefff
 8003c04:	ffffdfff 	.word	0xffffdfff

08003c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4a24      	ldr	r2, [pc, #144]	@ (8003cb0 <TIM_OC4_SetConfig+0xa8>)
 8003c1e:	401a      	ands	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a20      	ldr	r2, [pc, #128]	@ (8003cb4 <TIM_OC4_SetConfig+0xac>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb8 <TIM_OC4_SetConfig+0xb0>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <TIM_OC4_SetConfig+0xb4>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a17      	ldr	r2, [pc, #92]	@ (8003cc0 <TIM_OC4_SetConfig+0xb8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_OC4_SetConfig+0x70>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <TIM_OC4_SetConfig+0xbc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_OC4_SetConfig+0x70>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <TIM_OC4_SetConfig+0xc0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d109      	bne.n	8003c8c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4a14      	ldr	r2, [pc, #80]	@ (8003ccc <TIM_OC4_SetConfig+0xc4>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	019b      	lsls	r3, r3, #6
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b006      	add	sp, #24
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	ffffefff 	.word	0xffffefff
 8003cb4:	feff8fff 	.word	0xfeff8fff
 8003cb8:	fffffcff 	.word	0xfffffcff
 8003cbc:	ffffdfff 	.word	0xffffdfff
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800
 8003ccc:	ffffbfff 	.word	0xffffbfff

08003cd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4a21      	ldr	r2, [pc, #132]	@ (8003d6c <TIM_OC5_SetConfig+0x9c>)
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003d70 <TIM_OC5_SetConfig+0xa0>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4a19      	ldr	r2, [pc, #100]	@ (8003d74 <TIM_OC5_SetConfig+0xa4>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a15      	ldr	r2, [pc, #84]	@ (8003d78 <TIM_OC5_SetConfig+0xa8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <TIM_OC5_SetConfig+0x66>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <TIM_OC5_SetConfig+0xac>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_OC5_SetConfig+0x66>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <TIM_OC5_SetConfig+0xb0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d109      	bne.n	8003d4a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4a0c      	ldr	r2, [pc, #48]	@ (8003d6c <TIM_OC5_SetConfig+0x9c>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b006      	add	sp, #24
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	fffeffff 	.word	0xfffeffff
 8003d70:	fffeff8f 	.word	0xfffeff8f
 8003d74:	fffdffff 	.word	0xfffdffff
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40014400 	.word	0x40014400
 8003d80:	40014800 	.word	0x40014800

08003d84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4a22      	ldr	r2, [pc, #136]	@ (8003e24 <TIM_OC6_SetConfig+0xa0>)
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a1e      	ldr	r2, [pc, #120]	@ (8003e28 <TIM_OC6_SetConfig+0xa4>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e2c <TIM_OC6_SetConfig+0xa8>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	051b      	lsls	r3, r3, #20
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <TIM_OC6_SetConfig+0xac>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_OC6_SetConfig+0x68>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <TIM_OC6_SetConfig+0xb0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC6_SetConfig+0x68>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a14      	ldr	r2, [pc, #80]	@ (8003e38 <TIM_OC6_SetConfig+0xb4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d109      	bne.n	8003e00 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	4a13      	ldr	r2, [pc, #76]	@ (8003e3c <TIM_OC6_SetConfig+0xb8>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b006      	add	sp, #24
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			@ (mov r8, r8)
 8003e24:	ffefffff 	.word	0xffefffff
 8003e28:	feff8fff 	.word	0xfeff8fff
 8003e2c:	ffdfffff 	.word	0xffdfffff
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800
 8003e3c:	fffbffff 	.word	0xfffbffff

08003e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4393      	bics	r3, r2
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	22f0      	movs	r2, #240	@ 0xf0
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	220a      	movs	r2, #10
 8003e7c:	4393      	bics	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	46c0      	nop			@ (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b006      	add	sp, #24
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	4393      	bics	r3, r2
 8003eb6:	001a      	movs	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8003efc <TIM_TI2_ConfigInputStage+0x60>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	031b      	lsls	r3, r3, #12
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	22a0      	movs	r2, #160	@ 0xa0
 8003ed8:	4393      	bics	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	621a      	str	r2, [r3, #32]
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b006      	add	sp, #24
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	ffff0fff 	.word	0xffff0fff

08003f00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a08      	ldr	r2, [pc, #32]	@ (8003f34 <TIM_ITRx_SetConfig+0x34>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	2207      	movs	r2, #7
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	609a      	str	r2, [r3, #8]
}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b004      	add	sp, #16
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	ffcfff8f 	.word	0xffcfff8f

08003f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4a09      	ldr	r2, [pc, #36]	@ (8003f74 <TIM_ETR_SetConfig+0x3c>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	46c0      	nop			@ (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b006      	add	sp, #24
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	ffff00ff 	.word	0xffff00ff

08003f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	221f      	movs	r2, #31
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	0013      	movs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	43d2      	mvns	r2, r2
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	211f      	movs	r1, #31
 8003fa8:	400b      	ands	r3, r1
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4099      	lsls	r1, r3
 8003fae:	000b      	movs	r3, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b006      	add	sp, #24
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	223c      	movs	r2, #60	@ 0x3c
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e04a      	b.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	223c      	movs	r2, #60	@ 0x3c
 8003fdc:	2101      	movs	r1, #1
 8003fde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	223d      	movs	r2, #61	@ 0x3d
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a1d      	ldr	r2, [pc, #116]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2270      	movs	r2, #112	@ 0x70
 8004018:	4393      	bics	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a11      	ldr	r2, [pc, #68]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a10      	ldr	r2, [pc, #64]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10c      	bne.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2280      	movs	r2, #128	@ 0x80
 8004046:	4393      	bics	r3, r2
 8004048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4313      	orrs	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	223d      	movs	r2, #61	@ 0x3d
 8004060:	2101      	movs	r1, #1
 8004062:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	223c      	movs	r2, #60	@ 0x3c
 8004068:	2100      	movs	r1, #0
 800406a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	40012c00 	.word	0x40012c00
 800407c:	ff0fffff 	.word	0xff0fffff
 8004080:	40000400 	.word	0x40000400

08004084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e046      	b.n	8004124 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2288      	movs	r2, #136	@ 0x88
 800409a:	589b      	ldr	r3, [r3, r2]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2284      	movs	r2, #132	@ 0x84
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7fc fe52 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2288      	movs	r2, #136	@ 0x88
 80040b4:	2124      	movs	r1, #36	@ 0x24
 80040b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2101      	movs	r1, #1
 80040c4:	438a      	bics	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 fdf0 	bl	8004cb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 fc6e 	bl	80049bc <UART_SetConfig>
 80040e0:	0003      	movs	r3, r0
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e01c      	b.n	8004124 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	490d      	ldr	r1, [pc, #52]	@ (800412c <HAL_UART_Init+0xa8>)
 80040f6:	400a      	ands	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	212a      	movs	r1, #42	@ 0x2a
 8004106:	438a      	bics	r2, r1
 8004108:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	430a      	orrs	r2, r1
 8004118:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0018      	movs	r0, r3
 800411e:	f000 fe7f 	bl	8004e20 <UART_CheckIdleState>
 8004122:	0003      	movs	r3, r0
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}
 800412c:	ffffb7ff 	.word	0xffffb7ff

08004130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	@ 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	1dbb      	adds	r3, r7, #6
 800413e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2288      	movs	r2, #136	@ 0x88
 8004144:	589b      	ldr	r3, [r3, r2]
 8004146:	2b20      	cmp	r3, #32
 8004148:	d000      	beq.n	800414c <HAL_UART_Transmit+0x1c>
 800414a:	e090      	b.n	800426e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_UART_Transmit+0x2a>
 8004152:	1dbb      	adds	r3, r7, #6
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e088      	b.n	8004270 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	2380      	movs	r3, #128	@ 0x80
 8004164:	015b      	lsls	r3, r3, #5
 8004166:	429a      	cmp	r2, r3
 8004168:	d109      	bne.n	800417e <HAL_UART_Transmit+0x4e>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2201      	movs	r2, #1
 8004176:	4013      	ands	r3, r2
 8004178:	d001      	beq.n	800417e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e078      	b.n	8004270 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2290      	movs	r2, #144	@ 0x90
 8004182:	2100      	movs	r1, #0
 8004184:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2288      	movs	r2, #136	@ 0x88
 800418a:	2121      	movs	r1, #33	@ 0x21
 800418c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418e:	f7fc ff1f 	bl	8000fd0 <HAL_GetTick>
 8004192:	0003      	movs	r3, r0
 8004194:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1dba      	adds	r2, r7, #6
 800419a:	2154      	movs	r1, #84	@ 0x54
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1dba      	adds	r2, r7, #6
 80041a4:	2156      	movs	r1, #86	@ 0x56
 80041a6:	8812      	ldrh	r2, [r2, #0]
 80041a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	015b      	lsls	r3, r3, #5
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d108      	bne.n	80041c8 <HAL_UART_Transmit+0x98>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	e003      	b.n	80041d0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041d0:	e030      	b.n	8004234 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	0013      	movs	r3, r2
 80041dc:	2200      	movs	r2, #0
 80041de:	2180      	movs	r1, #128	@ 0x80
 80041e0:	f000 fec8 	bl	8004f74 <UART_WaitOnFlagUntilTimeout>
 80041e4:	1e03      	subs	r3, r0, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2288      	movs	r2, #136	@ 0x88
 80041ec:	2120      	movs	r1, #32
 80041ee:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e03d      	b.n	8004270 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	001a      	movs	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	05d2      	lsls	r2, r2, #23
 8004206:	0dd2      	lsrs	r2, r2, #23
 8004208:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	3302      	adds	r3, #2
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	e007      	b.n	8004222 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	3301      	adds	r3, #1
 8004220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2256      	movs	r2, #86	@ 0x56
 8004226:	5a9b      	ldrh	r3, [r3, r2]
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b299      	uxth	r1, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2256      	movs	r2, #86	@ 0x56
 8004232:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2256      	movs	r2, #86	@ 0x56
 8004238:	5a9b      	ldrh	r3, [r3, r2]
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1c8      	bne.n	80041d2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	0013      	movs	r3, r2
 800424a:	2200      	movs	r2, #0
 800424c:	2140      	movs	r1, #64	@ 0x40
 800424e:	f000 fe91 	bl	8004f74 <UART_WaitOnFlagUntilTimeout>
 8004252:	1e03      	subs	r3, r0, #0
 8004254:	d005      	beq.n	8004262 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2288      	movs	r2, #136	@ 0x88
 800425a:	2120      	movs	r1, #32
 800425c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e006      	b.n	8004270 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2288      	movs	r2, #136	@ 0x88
 8004266:	2120      	movs	r1, #32
 8004268:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b008      	add	sp, #32
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	1dbb      	adds	r3, r7, #6
 8004284:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	228c      	movs	r2, #140	@ 0x8c
 800428a:	589b      	ldr	r3, [r3, r2]
 800428c:	2b20      	cmp	r3, #32
 800428e:	d145      	bne.n	800431c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_UART_Receive_IT+0x26>
 8004296:	1dbb      	adds	r3, r7, #6
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e03d      	b.n	800431e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	2380      	movs	r3, #128	@ 0x80
 80042a8:	015b      	lsls	r3, r3, #5
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d109      	bne.n	80042c2 <HAL_UART_Receive_IT+0x4a>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2201      	movs	r2, #1
 80042ba:	4013      	ands	r3, r2
 80042bc:	d001      	beq.n	80042c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e02d      	b.n	800431e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	2380      	movs	r3, #128	@ 0x80
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	4013      	ands	r3, r2
 80042d4:	d019      	beq.n	800430a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042d6:	f3ef 8310 	mrs	r3, PRIMASK
 80042da:	613b      	str	r3, [r7, #16]
  return(result);
 80042dc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	2301      	movs	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f383 8810 	msr	PRIMASK, r3
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2180      	movs	r1, #128	@ 0x80
 80042f8:	04c9      	lsls	r1, r1, #19
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f383 8810 	msr	PRIMASK, r3
}
 8004308:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800430a:	1dbb      	adds	r3, r7, #6
 800430c:	881a      	ldrh	r2, [r3, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fe98 	bl	8005048 <UART_Start_Receive_IT>
 8004318:	0003      	movs	r3, r0
 800431a:	e000      	b.n	800431e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b008      	add	sp, #32
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004328:	b5b0      	push	{r4, r5, r7, lr}
 800432a:	b0aa      	sub	sp, #168	@ 0xa8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	22a4      	movs	r2, #164	@ 0xa4
 8004338:	18b9      	adds	r1, r7, r2
 800433a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	20a0      	movs	r0, #160	@ 0xa0
 8004344:	1839      	adds	r1, r7, r0
 8004346:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	249c      	movs	r4, #156	@ 0x9c
 8004350:	1939      	adds	r1, r7, r4
 8004352:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004354:	0011      	movs	r1, r2
 8004356:	18bb      	adds	r3, r7, r2
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4aa2      	ldr	r2, [pc, #648]	@ (80045e4 <HAL_UART_IRQHandler+0x2bc>)
 800435c:	4013      	ands	r3, r2
 800435e:	2298      	movs	r2, #152	@ 0x98
 8004360:	18bd      	adds	r5, r7, r2
 8004362:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004364:	18bb      	adds	r3, r7, r2
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11a      	bne.n	80043a2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800436c:	187b      	adds	r3, r7, r1
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2220      	movs	r2, #32
 8004372:	4013      	ands	r3, r2
 8004374:	d015      	beq.n	80043a2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004376:	183b      	adds	r3, r7, r0
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2220      	movs	r2, #32
 800437c:	4013      	ands	r3, r2
 800437e:	d105      	bne.n	800438c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004380:	193b      	adds	r3, r7, r4
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	2380      	movs	r3, #128	@ 0x80
 8004386:	055b      	lsls	r3, r3, #21
 8004388:	4013      	ands	r3, r2
 800438a:	d00a      	beq.n	80043a2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004390:	2b00      	cmp	r3, #0
 8004392:	d100      	bne.n	8004396 <HAL_UART_IRQHandler+0x6e>
 8004394:	e2dc      	b.n	8004950 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	0010      	movs	r0, r2
 800439e:	4798      	blx	r3
      }
      return;
 80043a0:	e2d6      	b.n	8004950 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80043a2:	2398      	movs	r3, #152	@ 0x98
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d100      	bne.n	80043ae <HAL_UART_IRQHandler+0x86>
 80043ac:	e122      	b.n	80045f4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80043ae:	239c      	movs	r3, #156	@ 0x9c
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a8c      	ldr	r2, [pc, #560]	@ (80045e8 <HAL_UART_IRQHandler+0x2c0>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	d106      	bne.n	80043c8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80043ba:	23a0      	movs	r3, #160	@ 0xa0
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a8a      	ldr	r2, [pc, #552]	@ (80045ec <HAL_UART_IRQHandler+0x2c4>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	d100      	bne.n	80043c8 <HAL_UART_IRQHandler+0xa0>
 80043c6:	e115      	b.n	80045f4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043c8:	23a4      	movs	r3, #164	@ 0xa4
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2201      	movs	r2, #1
 80043d0:	4013      	ands	r3, r2
 80043d2:	d012      	beq.n	80043fa <HAL_UART_IRQHandler+0xd2>
 80043d4:	23a0      	movs	r3, #160	@ 0xa0
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	d00b      	beq.n	80043fa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2201      	movs	r2, #1
 80043e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2290      	movs	r2, #144	@ 0x90
 80043ee:	589b      	ldr	r3, [r3, r2]
 80043f0:	2201      	movs	r2, #1
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2190      	movs	r1, #144	@ 0x90
 80043f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043fa:	23a4      	movs	r3, #164	@ 0xa4
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2202      	movs	r2, #2
 8004402:	4013      	ands	r3, r2
 8004404:	d011      	beq.n	800442a <HAL_UART_IRQHandler+0x102>
 8004406:	239c      	movs	r3, #156	@ 0x9c
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2201      	movs	r2, #1
 800440e:	4013      	ands	r3, r2
 8004410:	d00b      	beq.n	800442a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2202      	movs	r2, #2
 8004418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2290      	movs	r2, #144	@ 0x90
 800441e:	589b      	ldr	r3, [r3, r2]
 8004420:	2204      	movs	r2, #4
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2190      	movs	r1, #144	@ 0x90
 8004428:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800442a:	23a4      	movs	r3, #164	@ 0xa4
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2204      	movs	r2, #4
 8004432:	4013      	ands	r3, r2
 8004434:	d011      	beq.n	800445a <HAL_UART_IRQHandler+0x132>
 8004436:	239c      	movs	r3, #156	@ 0x9c
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2201      	movs	r2, #1
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2204      	movs	r2, #4
 8004448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2290      	movs	r2, #144	@ 0x90
 800444e:	589b      	ldr	r3, [r3, r2]
 8004450:	2202      	movs	r2, #2
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2190      	movs	r1, #144	@ 0x90
 8004458:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800445a:	23a4      	movs	r3, #164	@ 0xa4
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2208      	movs	r2, #8
 8004462:	4013      	ands	r3, r2
 8004464:	d017      	beq.n	8004496 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004466:	23a0      	movs	r3, #160	@ 0xa0
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2220      	movs	r2, #32
 800446e:	4013      	ands	r3, r2
 8004470:	d105      	bne.n	800447e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004472:	239c      	movs	r3, #156	@ 0x9c
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a5b      	ldr	r2, [pc, #364]	@ (80045e8 <HAL_UART_IRQHandler+0x2c0>)
 800447a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800447c:	d00b      	beq.n	8004496 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2208      	movs	r2, #8
 8004484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2290      	movs	r2, #144	@ 0x90
 800448a:	589b      	ldr	r3, [r3, r2]
 800448c:	2208      	movs	r2, #8
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2190      	movs	r1, #144	@ 0x90
 8004494:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004496:	23a4      	movs	r3, #164	@ 0xa4
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	4013      	ands	r3, r2
 80044a2:	d013      	beq.n	80044cc <HAL_UART_IRQHandler+0x1a4>
 80044a4:	23a0      	movs	r3, #160	@ 0xa0
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	04db      	lsls	r3, r3, #19
 80044ae:	4013      	ands	r3, r2
 80044b0:	d00c      	beq.n	80044cc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2280      	movs	r2, #128	@ 0x80
 80044b8:	0112      	lsls	r2, r2, #4
 80044ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2290      	movs	r2, #144	@ 0x90
 80044c0:	589b      	ldr	r3, [r3, r2]
 80044c2:	2220      	movs	r2, #32
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2190      	movs	r1, #144	@ 0x90
 80044ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2290      	movs	r2, #144	@ 0x90
 80044d0:	589b      	ldr	r3, [r3, r2]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d100      	bne.n	80044d8 <HAL_UART_IRQHandler+0x1b0>
 80044d6:	e23d      	b.n	8004954 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044d8:	23a4      	movs	r3, #164	@ 0xa4
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2220      	movs	r2, #32
 80044e0:	4013      	ands	r3, r2
 80044e2:	d015      	beq.n	8004510 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044e4:	23a0      	movs	r3, #160	@ 0xa0
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2220      	movs	r2, #32
 80044ec:	4013      	ands	r3, r2
 80044ee:	d106      	bne.n	80044fe <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044f0:	239c      	movs	r3, #156	@ 0x9c
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	2380      	movs	r3, #128	@ 0x80
 80044f8:	055b      	lsls	r3, r3, #21
 80044fa:	4013      	ands	r3, r2
 80044fc:	d008      	beq.n	8004510 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	0010      	movs	r0, r2
 800450e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2290      	movs	r2, #144	@ 0x90
 8004514:	589b      	ldr	r3, [r3, r2]
 8004516:	2194      	movs	r1, #148	@ 0x94
 8004518:	187a      	adds	r2, r7, r1
 800451a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2240      	movs	r2, #64	@ 0x40
 8004524:	4013      	ands	r3, r2
 8004526:	2b40      	cmp	r3, #64	@ 0x40
 8004528:	d004      	beq.n	8004534 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800452a:	187b      	adds	r3, r7, r1
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2228      	movs	r2, #40	@ 0x28
 8004530:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004532:	d04c      	beq.n	80045ce <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	0018      	movs	r0, r3
 8004538:	f000 feaa 	bl	8005290 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2240      	movs	r2, #64	@ 0x40
 8004544:	4013      	ands	r3, r2
 8004546:	2b40      	cmp	r3, #64	@ 0x40
 8004548:	d13c      	bne.n	80045c4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800454a:	f3ef 8310 	mrs	r3, PRIMASK
 800454e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004550:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	2090      	movs	r0, #144	@ 0x90
 8004554:	183a      	adds	r2, r7, r0
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	2301      	movs	r3, #1
 800455a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2140      	movs	r1, #64	@ 0x40
 8004570:	438a      	bics	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	183b      	adds	r3, r7, r0
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800457c:	f383 8810 	msr	PRIMASK, r3
}
 8004580:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2280      	movs	r2, #128	@ 0x80
 8004586:	589b      	ldr	r3, [r3, r2]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d016      	beq.n	80045ba <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2280      	movs	r2, #128	@ 0x80
 8004590:	589b      	ldr	r3, [r3, r2]
 8004592:	4a17      	ldr	r2, [pc, #92]	@ (80045f0 <HAL_UART_IRQHandler+0x2c8>)
 8004594:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2280      	movs	r2, #128	@ 0x80
 800459a:	589b      	ldr	r3, [r3, r2]
 800459c:	0018      	movs	r0, r3
 800459e:	f7fd fda1 	bl	80020e4 <HAL_DMA_Abort_IT>
 80045a2:	1e03      	subs	r3, r0, #0
 80045a4:	d01c      	beq.n	80045e0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2280      	movs	r2, #128	@ 0x80
 80045aa:	589b      	ldr	r3, [r3, r2]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	2180      	movs	r1, #128	@ 0x80
 80045b2:	5852      	ldr	r2, [r2, r1]
 80045b4:	0010      	movs	r0, r2
 80045b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	e012      	b.n	80045e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 f9e9 	bl	8004994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c2:	e00d      	b.n	80045e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 f9e4 	bl	8004994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045cc:	e008      	b.n	80045e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 f9df 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2290      	movs	r2, #144	@ 0x90
 80045da:	2100      	movs	r1, #0
 80045dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80045de:	e1b9      	b.n	8004954 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	46c0      	nop			@ (mov r8, r8)
    return;
 80045e2:	e1b7      	b.n	8004954 <HAL_UART_IRQHandler+0x62c>
 80045e4:	0000080f 	.word	0x0000080f
 80045e8:	10000001 	.word	0x10000001
 80045ec:	04000120 	.word	0x04000120
 80045f0:	0800535d 	.word	0x0800535d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d000      	beq.n	80045fe <HAL_UART_IRQHandler+0x2d6>
 80045fc:	e13e      	b.n	800487c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045fe:	23a4      	movs	r3, #164	@ 0xa4
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2210      	movs	r2, #16
 8004606:	4013      	ands	r3, r2
 8004608:	d100      	bne.n	800460c <HAL_UART_IRQHandler+0x2e4>
 800460a:	e137      	b.n	800487c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800460c:	23a0      	movs	r3, #160	@ 0xa0
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2210      	movs	r2, #16
 8004614:	4013      	ands	r3, r2
 8004616:	d100      	bne.n	800461a <HAL_UART_IRQHandler+0x2f2>
 8004618:	e130      	b.n	800487c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2210      	movs	r2, #16
 8004620:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2240      	movs	r2, #64	@ 0x40
 800462a:	4013      	ands	r3, r2
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d000      	beq.n	8004632 <HAL_UART_IRQHandler+0x30a>
 8004630:	e0a4      	b.n	800477c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2280      	movs	r2, #128	@ 0x80
 8004636:	589b      	ldr	r3, [r3, r2]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	217e      	movs	r1, #126	@ 0x7e
 800463e:	187b      	adds	r3, r7, r1
 8004640:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004642:	187b      	adds	r3, r7, r1
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d100      	bne.n	800464c <HAL_UART_IRQHandler+0x324>
 800464a:	e185      	b.n	8004958 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	225c      	movs	r2, #92	@ 0x5c
 8004650:	5a9b      	ldrh	r3, [r3, r2]
 8004652:	187a      	adds	r2, r7, r1
 8004654:	8812      	ldrh	r2, [r2, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d300      	bcc.n	800465c <HAL_UART_IRQHandler+0x334>
 800465a:	e17d      	b.n	8004958 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	187a      	adds	r2, r7, r1
 8004660:	215e      	movs	r1, #94	@ 0x5e
 8004662:	8812      	ldrh	r2, [r2, #0]
 8004664:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2280      	movs	r2, #128	@ 0x80
 800466a:	589b      	ldr	r3, [r3, r2]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2220      	movs	r2, #32
 8004672:	4013      	ands	r3, r2
 8004674:	d170      	bne.n	8004758 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004676:	f3ef 8310 	mrs	r3, PRIMASK
 800467a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004680:	2301      	movs	r3, #1
 8004682:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004686:	f383 8810 	msr	PRIMASK, r3
}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	49b4      	ldr	r1, [pc, #720]	@ (8004968 <HAL_UART_IRQHandler+0x640>)
 8004698:	400a      	ands	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800469e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a2:	f383 8810 	msr	PRIMASK, r3
}
 80046a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046a8:	f3ef 8310 	mrs	r3, PRIMASK
 80046ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80046ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80046b2:	2301      	movs	r3, #1
 80046b4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b8:	f383 8810 	msr	PRIMASK, r3
}
 80046bc:	46c0      	nop			@ (mov r8, r8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	438a      	bics	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
 80046ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046d0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046da:	f3ef 8310 	mrs	r3, PRIMASK
 80046de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80046e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80046e4:	2301      	movs	r3, #1
 80046e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ea:	f383 8810 	msr	PRIMASK, r3
}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2140      	movs	r1, #64	@ 0x40
 80046fc:	438a      	bics	r2, r1
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004702:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004706:	f383 8810 	msr	PRIMASK, r3
}
 800470a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	228c      	movs	r2, #140	@ 0x8c
 8004710:	2120      	movs	r1, #32
 8004712:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800471a:	f3ef 8310 	mrs	r3, PRIMASK
 800471e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004722:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004724:	2301      	movs	r3, #1
 8004726:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800472a:	f383 8810 	msr	PRIMASK, r3
}
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2110      	movs	r1, #16
 800473c:	438a      	bics	r2, r1
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004742:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004746:	f383 8810 	msr	PRIMASK, r3
}
 800474a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2280      	movs	r2, #128	@ 0x80
 8004750:	589b      	ldr	r3, [r3, r2]
 8004752:	0018      	movs	r0, r3
 8004754:	f7fd fc64 	bl	8002020 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	225c      	movs	r2, #92	@ 0x5c
 8004762:	5a9a      	ldrh	r2, [r3, r2]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	215e      	movs	r1, #94	@ 0x5e
 8004768:	5a5b      	ldrh	r3, [r3, r1]
 800476a:	b29b      	uxth	r3, r3
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	b29a      	uxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f000 f915 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800477a:	e0ed      	b.n	8004958 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	225c      	movs	r2, #92	@ 0x5c
 8004780:	5a99      	ldrh	r1, [r3, r2]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	225e      	movs	r2, #94	@ 0x5e
 8004786:	5a9b      	ldrh	r3, [r3, r2]
 8004788:	b29a      	uxth	r2, r3
 800478a:	208e      	movs	r0, #142	@ 0x8e
 800478c:	183b      	adds	r3, r7, r0
 800478e:	1a8a      	subs	r2, r1, r2
 8004790:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	225e      	movs	r2, #94	@ 0x5e
 8004796:	5a9b      	ldrh	r3, [r3, r2]
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <HAL_UART_IRQHandler+0x478>
 800479e:	e0dd      	b.n	800495c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80047a0:	183b      	adds	r3, r7, r0
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d100      	bne.n	80047aa <HAL_UART_IRQHandler+0x482>
 80047a8:	e0d8      	b.n	800495c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047aa:	f3ef 8310 	mrs	r3, PRIMASK
 80047ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80047b0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047b2:	2488      	movs	r4, #136	@ 0x88
 80047b4:	193a      	adds	r2, r7, r4
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	2301      	movs	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4967      	ldr	r1, [pc, #412]	@ (800496c <HAL_UART_IRQHandler+0x644>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	193b      	adds	r3, r7, r4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f383 8810 	msr	PRIMASK, r3
}
 80047e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047e2:	f3ef 8310 	mrs	r3, PRIMASK
 80047e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80047e8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047ea:	2484      	movs	r4, #132	@ 0x84
 80047ec:	193a      	adds	r2, r7, r4
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	2301      	movs	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f383 8810 	msr	PRIMASK, r3
}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	495a      	ldr	r1, [pc, #360]	@ (8004970 <HAL_UART_IRQHandler+0x648>)
 8004808:	400a      	ands	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	193b      	adds	r3, r7, r4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	228c      	movs	r2, #140	@ 0x8c
 800481e:	2120      	movs	r1, #32
 8004820:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800482e:	f3ef 8310 	mrs	r3, PRIMASK
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004836:	2480      	movs	r4, #128	@ 0x80
 8004838:	193a      	adds	r2, r7, r4
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	2301      	movs	r3, #1
 800483e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2110      	movs	r1, #16
 8004854:	438a      	bics	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	193b      	adds	r3, r7, r4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004860:	f383 8810 	msr	PRIMASK, r3
}
 8004864:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800486c:	183b      	adds	r3, r7, r0
 800486e:	881a      	ldrh	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0011      	movs	r1, r2
 8004874:	0018      	movs	r0, r3
 8004876:	f000 f895 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800487a:	e06f      	b.n	800495c <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800487c:	23a4      	movs	r3, #164	@ 0xa4
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	035b      	lsls	r3, r3, #13
 8004886:	4013      	ands	r3, r2
 8004888:	d010      	beq.n	80048ac <HAL_UART_IRQHandler+0x584>
 800488a:	239c      	movs	r3, #156	@ 0x9c
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	03db      	lsls	r3, r3, #15
 8004894:	4013      	ands	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2280      	movs	r2, #128	@ 0x80
 800489e:	0352      	lsls	r2, r2, #13
 80048a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f001 fa91 	bl	8005dcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048aa:	e05a      	b.n	8004962 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80048ac:	23a4      	movs	r3, #164	@ 0xa4
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2280      	movs	r2, #128	@ 0x80
 80048b4:	4013      	ands	r3, r2
 80048b6:	d016      	beq.n	80048e6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80048b8:	23a0      	movs	r3, #160	@ 0xa0
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2280      	movs	r2, #128	@ 0x80
 80048c0:	4013      	ands	r3, r2
 80048c2:	d106      	bne.n	80048d2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80048c4:	239c      	movs	r3, #156	@ 0x9c
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	2380      	movs	r3, #128	@ 0x80
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	4013      	ands	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d042      	beq.n	8004960 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	0010      	movs	r0, r2
 80048e2:	4798      	blx	r3
    }
    return;
 80048e4:	e03c      	b.n	8004960 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048e6:	23a4      	movs	r3, #164	@ 0xa4
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2240      	movs	r2, #64	@ 0x40
 80048ee:	4013      	ands	r3, r2
 80048f0:	d00a      	beq.n	8004908 <HAL_UART_IRQHandler+0x5e0>
 80048f2:	23a0      	movs	r3, #160	@ 0xa0
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2240      	movs	r2, #64	@ 0x40
 80048fa:	4013      	ands	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	0018      	movs	r0, r3
 8004902:	f000 fd42 	bl	800538a <UART_EndTransmit_IT>
    return;
 8004906:	e02c      	b.n	8004962 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004908:	23a4      	movs	r3, #164	@ 0xa4
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	4013      	ands	r3, r2
 8004914:	d00b      	beq.n	800492e <HAL_UART_IRQHandler+0x606>
 8004916:	23a0      	movs	r3, #160	@ 0xa0
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	05db      	lsls	r3, r3, #23
 8004920:	4013      	ands	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f001 fa60 	bl	8005dec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800492c:	e019      	b.n	8004962 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800492e:	23a4      	movs	r3, #164	@ 0xa4
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	2380      	movs	r3, #128	@ 0x80
 8004936:	045b      	lsls	r3, r3, #17
 8004938:	4013      	ands	r3, r2
 800493a:	d012      	beq.n	8004962 <HAL_UART_IRQHandler+0x63a>
 800493c:	23a0      	movs	r3, #160	@ 0xa0
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	da0d      	bge.n	8004962 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0018      	movs	r0, r3
 800494a:	f001 fa47 	bl	8005ddc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800494e:	e008      	b.n	8004962 <HAL_UART_IRQHandler+0x63a>
      return;
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	e006      	b.n	8004962 <HAL_UART_IRQHandler+0x63a>
    return;
 8004954:	46c0      	nop			@ (mov r8, r8)
 8004956:	e004      	b.n	8004962 <HAL_UART_IRQHandler+0x63a>
      return;
 8004958:	46c0      	nop			@ (mov r8, r8)
 800495a:	e002      	b.n	8004962 <HAL_UART_IRQHandler+0x63a>
      return;
 800495c:	46c0      	nop			@ (mov r8, r8)
 800495e:	e000      	b.n	8004962 <HAL_UART_IRQHandler+0x63a>
    return;
 8004960:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004962:	46bd      	mov	sp, r7
 8004964:	b02a      	add	sp, #168	@ 0xa8
 8004966:	bdb0      	pop	{r4, r5, r7, pc}
 8004968:	fffffeff 	.word	0xfffffeff
 800496c:	fffffedf 	.word	0xfffffedf
 8004970:	effffffe 	.word	0xeffffffe

08004974 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800497c:	46c0      	nop			@ (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800498c:	46c0      	nop			@ (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b002      	add	sp, #8
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800499c:	46c0      	nop			@ (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	000a      	movs	r2, r1
 80049ae:	1cbb      	adds	r3, r7, #2
 80049b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b002      	add	sp, #8
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049c4:	231e      	movs	r3, #30
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	2200      	movs	r2, #0
 80049ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4aab      	ldr	r2, [pc, #684]	@ (8004c98 <UART_SetConfig+0x2dc>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4aa6      	ldr	r2, [pc, #664]	@ (8004c9c <UART_SetConfig+0x2e0>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a9d      	ldr	r2, [pc, #628]	@ (8004ca0 <UART_SetConfig+0x2e4>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	220f      	movs	r2, #15
 8004a40:	4393      	bics	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a93      	ldr	r2, [pc, #588]	@ (8004ca4 <UART_SetConfig+0x2e8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d127      	bne.n	8004aaa <UART_SetConfig+0xee>
 8004a5a:	4b93      	ldr	r3, [pc, #588]	@ (8004ca8 <UART_SetConfig+0x2ec>)
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	2203      	movs	r2, #3
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d017      	beq.n	8004a96 <UART_SetConfig+0xda>
 8004a66:	d81b      	bhi.n	8004aa0 <UART_SetConfig+0xe4>
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d00a      	beq.n	8004a82 <UART_SetConfig+0xc6>
 8004a6c:	d818      	bhi.n	8004aa0 <UART_SetConfig+0xe4>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <UART_SetConfig+0xbc>
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d00a      	beq.n	8004a8c <UART_SetConfig+0xd0>
 8004a76:	e013      	b.n	8004aa0 <UART_SetConfig+0xe4>
 8004a78:	231f      	movs	r3, #31
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e021      	b.n	8004ac6 <UART_SetConfig+0x10a>
 8004a82:	231f      	movs	r3, #31
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	2202      	movs	r2, #2
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e01c      	b.n	8004ac6 <UART_SetConfig+0x10a>
 8004a8c:	231f      	movs	r3, #31
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2204      	movs	r2, #4
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e017      	b.n	8004ac6 <UART_SetConfig+0x10a>
 8004a96:	231f      	movs	r3, #31
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e012      	b.n	8004ac6 <UART_SetConfig+0x10a>
 8004aa0:	231f      	movs	r3, #31
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	e00d      	b.n	8004ac6 <UART_SetConfig+0x10a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7f      	ldr	r2, [pc, #508]	@ (8004cac <UART_SetConfig+0x2f0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d104      	bne.n	8004abe <UART_SetConfig+0x102>
 8004ab4:	231f      	movs	r3, #31
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e003      	b.n	8004ac6 <UART_SetConfig+0x10a>
 8004abe:	231f      	movs	r3, #31
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	2380      	movs	r3, #128	@ 0x80
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d000      	beq.n	8004ad4 <UART_SetConfig+0x118>
 8004ad2:	e06f      	b.n	8004bb4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004ad4:	231f      	movs	r3, #31
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d01f      	beq.n	8004b1e <UART_SetConfig+0x162>
 8004ade:	dc22      	bgt.n	8004b26 <UART_SetConfig+0x16a>
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d017      	beq.n	8004b14 <UART_SetConfig+0x158>
 8004ae4:	dc1f      	bgt.n	8004b26 <UART_SetConfig+0x16a>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <UART_SetConfig+0x134>
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d005      	beq.n	8004afa <UART_SetConfig+0x13e>
 8004aee:	e01a      	b.n	8004b26 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fe f97a 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8004af4:	0003      	movs	r3, r0
 8004af6:	61bb      	str	r3, [r7, #24]
        break;
 8004af8:	e01c      	b.n	8004b34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004afa:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca8 <UART_SetConfig+0x2ec>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2207      	movs	r2, #7
 8004b02:	4013      	ands	r3, r2
 8004b04:	3301      	adds	r3, #1
 8004b06:	0019      	movs	r1, r3
 8004b08:	4869      	ldr	r0, [pc, #420]	@ (8004cb0 <UART_SetConfig+0x2f4>)
 8004b0a:	f7fb fafd 	bl	8000108 <__udivsi3>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	61bb      	str	r3, [r7, #24]
        break;
 8004b12:	e00f      	b.n	8004b34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b14:	f7fe f91c 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e00a      	b.n	8004b34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b1e:	2380      	movs	r3, #128	@ 0x80
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	61bb      	str	r3, [r7, #24]
        break;
 8004b24:	e006      	b.n	8004b34 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b2a:	231e      	movs	r3, #30
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
        break;
 8004b32:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d100      	bne.n	8004b3c <UART_SetConfig+0x180>
 8004b3a:	e097      	b.n	8004c6c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b40:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb4 <UART_SetConfig+0x2f8>)
 8004b42:	0052      	lsls	r2, r2, #1
 8004b44:	5ad3      	ldrh	r3, [r2, r3]
 8004b46:	0019      	movs	r1, r3
 8004b48:	69b8      	ldr	r0, [r7, #24]
 8004b4a:	f7fb fadd 	bl	8000108 <__udivsi3>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	005a      	lsls	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	18d2      	adds	r2, r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	0019      	movs	r1, r3
 8004b60:	0010      	movs	r0, r2
 8004b62:	f7fb fad1 	bl	8000108 <__udivsi3>
 8004b66:	0003      	movs	r3, r0
 8004b68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d91c      	bls.n	8004baa <UART_SetConfig+0x1ee>
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	2380      	movs	r3, #128	@ 0x80
 8004b74:	025b      	lsls	r3, r3, #9
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d217      	bcs.n	8004baa <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	200e      	movs	r0, #14
 8004b80:	183b      	adds	r3, r7, r0
 8004b82:	210f      	movs	r1, #15
 8004b84:	438a      	bics	r2, r1
 8004b86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2207      	movs	r2, #7
 8004b90:	4013      	ands	r3, r2
 8004b92:	b299      	uxth	r1, r3
 8004b94:	183b      	adds	r3, r7, r0
 8004b96:	183a      	adds	r2, r7, r0
 8004b98:	8812      	ldrh	r2, [r2, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	183a      	adds	r2, r7, r0
 8004ba4:	8812      	ldrh	r2, [r2, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	e060      	b.n	8004c6c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004baa:	231e      	movs	r3, #30
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e05b      	b.n	8004c6c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb4:	231f      	movs	r3, #31
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d01f      	beq.n	8004bfe <UART_SetConfig+0x242>
 8004bbe:	dc22      	bgt.n	8004c06 <UART_SetConfig+0x24a>
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d017      	beq.n	8004bf4 <UART_SetConfig+0x238>
 8004bc4:	dc1f      	bgt.n	8004c06 <UART_SetConfig+0x24a>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <UART_SetConfig+0x214>
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d005      	beq.n	8004bda <UART_SetConfig+0x21e>
 8004bce:	e01a      	b.n	8004c06 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd0:	f7fe f90a 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	61bb      	str	r3, [r7, #24]
        break;
 8004bd8:	e01c      	b.n	8004c14 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004bda:	4b33      	ldr	r3, [pc, #204]	@ (8004ca8 <UART_SetConfig+0x2ec>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	2207      	movs	r2, #7
 8004be2:	4013      	ands	r3, r2
 8004be4:	3301      	adds	r3, #1
 8004be6:	0019      	movs	r1, r3
 8004be8:	4831      	ldr	r0, [pc, #196]	@ (8004cb0 <UART_SetConfig+0x2f4>)
 8004bea:	f7fb fa8d 	bl	8000108 <__udivsi3>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	61bb      	str	r3, [r7, #24]
        break;
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf4:	f7fe f8ac 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e00a      	b.n	8004c14 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	61bb      	str	r3, [r7, #24]
        break;
 8004c04:	e006      	b.n	8004c14 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c0a:	231e      	movs	r3, #30
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]
        break;
 8004c12:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d028      	beq.n	8004c6c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c1e:	4b25      	ldr	r3, [pc, #148]	@ (8004cb4 <UART_SetConfig+0x2f8>)
 8004c20:	0052      	lsls	r2, r2, #1
 8004c22:	5ad3      	ldrh	r3, [r2, r3]
 8004c24:	0019      	movs	r1, r3
 8004c26:	69b8      	ldr	r0, [r7, #24]
 8004c28:	f7fb fa6e 	bl	8000108 <__udivsi3>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	001a      	movs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	18d2      	adds	r2, r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	0010      	movs	r0, r2
 8004c40:	f7fb fa62 	bl	8000108 <__udivsi3>
 8004c44:	0003      	movs	r3, r0
 8004c46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	d90a      	bls.n	8004c64 <UART_SetConfig+0x2a8>
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	025b      	lsls	r3, r3, #9
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d205      	bcs.n	8004c64 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	e003      	b.n	8004c6c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c64:	231e      	movs	r3, #30
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	226a      	movs	r2, #106	@ 0x6a
 8004c70:	2101      	movs	r1, #1
 8004c72:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2268      	movs	r2, #104	@ 0x68
 8004c78:	2101      	movs	r1, #1
 8004c7a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c88:	231e      	movs	r3, #30
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	781b      	ldrb	r3, [r3, #0]
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b008      	add	sp, #32
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			@ (mov r8, r8)
 8004c98:	cfff69f3 	.word	0xcfff69f3
 8004c9c:	ffffcfff 	.word	0xffffcfff
 8004ca0:	11fff4ff 	.word	0x11fff4ff
 8004ca4:	40013800 	.word	0x40013800
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40004400 	.word	0x40004400
 8004cb0:	02dc6c00 	.word	0x02dc6c00
 8004cb4:	08006154 	.word	0x08006154

08004cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8004dfc <UART_AdvFeatureConfig+0x144>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d00b      	beq.n	8004d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4a43      	ldr	r2, [pc, #268]	@ (8004e00 <UART_AdvFeatureConfig+0x148>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	2202      	movs	r2, #2
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4a3b      	ldr	r2, [pc, #236]	@ (8004e04 <UART_AdvFeatureConfig+0x14c>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	4a34      	ldr	r2, [pc, #208]	@ (8004e08 <UART_AdvFeatureConfig+0x150>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	0019      	movs	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a2c      	ldr	r2, [pc, #176]	@ (8004e0c <UART_AdvFeatureConfig+0x154>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	2220      	movs	r2, #32
 8004d70:	4013      	ands	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	4a25      	ldr	r2, [pc, #148]	@ (8004e10 <UART_AdvFeatureConfig+0x158>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	0019      	movs	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	2240      	movs	r2, #64	@ 0x40
 8004d92:	4013      	ands	r3, r2
 8004d94:	d01d      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e14 <UART_AdvFeatureConfig+0x15c>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004db2:	2380      	movs	r3, #128	@ 0x80
 8004db4:	035b      	lsls	r3, r3, #13
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d10b      	bne.n	8004dd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4a15      	ldr	r2, [pc, #84]	@ (8004e18 <UART_AdvFeatureConfig+0x160>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd6:	2280      	movs	r2, #128	@ 0x80
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4a0e      	ldr	r2, [pc, #56]	@ (8004e1c <UART_AdvFeatureConfig+0x164>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }
}
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	ffff7fff 	.word	0xffff7fff
 8004e00:	fffdffff 	.word	0xfffdffff
 8004e04:	fffeffff 	.word	0xfffeffff
 8004e08:	fffbffff 	.word	0xfffbffff
 8004e0c:	ffffefff 	.word	0xffffefff
 8004e10:	ffffdfff 	.word	0xffffdfff
 8004e14:	ffefffff 	.word	0xffefffff
 8004e18:	ff9fffff 	.word	0xff9fffff
 8004e1c:	fff7ffff 	.word	0xfff7ffff

08004e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b092      	sub	sp, #72	@ 0x48
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2290      	movs	r2, #144	@ 0x90
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e30:	f7fc f8ce 	bl	8000fd0 <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2208      	movs	r2, #8
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d12d      	bne.n	8004ea2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e48:	2280      	movs	r2, #128	@ 0x80
 8004e4a:	0391      	lsls	r1, r2, #14
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4a47      	ldr	r2, [pc, #284]	@ (8004f6c <UART_CheckIdleState+0x14c>)
 8004e50:	9200      	str	r2, [sp, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f000 f88e 	bl	8004f74 <UART_WaitOnFlagUntilTimeout>
 8004e58:	1e03      	subs	r3, r0, #0
 8004e5a:	d022      	beq.n	8004ea2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e66:	2301      	movs	r3, #1
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	f383 8810 	msr	PRIMASK, r3
}
 8004e70:	46c0      	nop			@ (mov r8, r8)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2180      	movs	r1, #128	@ 0x80
 8004e7e:	438a      	bics	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	f383 8810 	msr	PRIMASK, r3
}
 8004e8c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2288      	movs	r2, #136	@ 0x88
 8004e92:	2120      	movs	r1, #32
 8004e94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2284      	movs	r2, #132	@ 0x84
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e060      	b.n	8004f64 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d146      	bne.n	8004f3e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb2:	2280      	movs	r2, #128	@ 0x80
 8004eb4:	03d1      	lsls	r1, r2, #15
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8004f6c <UART_CheckIdleState+0x14c>)
 8004eba:	9200      	str	r2, [sp, #0]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f000 f859 	bl	8004f74 <UART_WaitOnFlagUntilTimeout>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d03b      	beq.n	8004f3e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eca:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f383 8810 	msr	PRIMASK, r3
}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4922      	ldr	r1, [pc, #136]	@ (8004f70 <UART_CheckIdleState+0x150>)
 8004ee8:	400a      	ands	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004efe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f02:	2301      	movs	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			@ (mov r8, r8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2101      	movs	r1, #1
 8004f1a:	438a      	bics	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	228c      	movs	r2, #140	@ 0x8c
 8004f2e:	2120      	movs	r1, #32
 8004f30:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2284      	movs	r2, #132	@ 0x84
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e012      	b.n	8004f64 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2288      	movs	r2, #136	@ 0x88
 8004f42:	2120      	movs	r1, #32
 8004f44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	228c      	movs	r2, #140	@ 0x8c
 8004f4a:	2120      	movs	r1, #32
 8004f4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2284      	movs	r2, #132	@ 0x84
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b010      	add	sp, #64	@ 0x40
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	01ffffff 	.word	0x01ffffff
 8004f70:	fffffedf 	.word	0xfffffedf

08004f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	1dfb      	adds	r3, r7, #7
 8004f82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f84:	e04b      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	d048      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8c:	f7fc f820 	bl	8000fd0 <HAL_GetTick>
 8004f90:	0002      	movs	r2, r0
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e04b      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2204      	movs	r2, #4
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d035      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d111      	bne.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f960 	bl	8005290 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2290      	movs	r2, #144	@ 0x90
 8004fd4:	2108      	movs	r1, #8
 8004fd6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2284      	movs	r2, #132	@ 0x84
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e02c      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	401a      	ands	r2, r3
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d112      	bne.n	800501e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2280      	movs	r2, #128	@ 0x80
 8004ffe:	0112      	lsls	r2, r2, #4
 8005000:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	0018      	movs	r0, r3
 8005006:	f000 f943 	bl	8005290 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2290      	movs	r2, #144	@ 0x90
 800500e:	2120      	movs	r1, #32
 8005010:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2284      	movs	r2, #132	@ 0x84
 8005016:	2100      	movs	r1, #0
 8005018:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e00f      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	425a      	negs	r2, r3
 800502e:	4153      	adcs	r3, r2
 8005030:	b2db      	uxtb	r3, r3
 8005032:	001a      	movs	r2, r3
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d0a4      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	0018      	movs	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b098      	sub	sp, #96	@ 0x60
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	1dbb      	adds	r3, r7, #6
 8005054:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1dba      	adds	r2, r7, #6
 8005060:	215c      	movs	r1, #92	@ 0x5c
 8005062:	8812      	ldrh	r2, [r2, #0]
 8005064:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1dba      	adds	r2, r7, #6
 800506a:	215e      	movs	r1, #94	@ 0x5e
 800506c:	8812      	ldrh	r2, [r2, #0]
 800506e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	2380      	movs	r3, #128	@ 0x80
 800507c:	015b      	lsls	r3, r3, #5
 800507e:	429a      	cmp	r2, r3
 8005080:	d10d      	bne.n	800509e <UART_Start_Receive_IT+0x56>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <UART_Start_Receive_IT+0x4c>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2260      	movs	r2, #96	@ 0x60
 800508e:	497b      	ldr	r1, [pc, #492]	@ (800527c <UART_Start_Receive_IT+0x234>)
 8005090:	5299      	strh	r1, [r3, r2]
 8005092:	e02e      	b.n	80050f2 <UART_Start_Receive_IT+0xaa>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2260      	movs	r2, #96	@ 0x60
 8005098:	21ff      	movs	r1, #255	@ 0xff
 800509a:	5299      	strh	r1, [r3, r2]
 800509c:	e029      	b.n	80050f2 <UART_Start_Receive_IT+0xaa>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <UART_Start_Receive_IT+0x7a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <UART_Start_Receive_IT+0x70>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2260      	movs	r2, #96	@ 0x60
 80050b2:	21ff      	movs	r1, #255	@ 0xff
 80050b4:	5299      	strh	r1, [r3, r2]
 80050b6:	e01c      	b.n	80050f2 <UART_Start_Receive_IT+0xaa>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2260      	movs	r2, #96	@ 0x60
 80050bc:	217f      	movs	r1, #127	@ 0x7f
 80050be:	5299      	strh	r1, [r3, r2]
 80050c0:	e017      	b.n	80050f2 <UART_Start_Receive_IT+0xaa>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	2380      	movs	r3, #128	@ 0x80
 80050c8:	055b      	lsls	r3, r3, #21
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d10d      	bne.n	80050ea <UART_Start_Receive_IT+0xa2>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <UART_Start_Receive_IT+0x98>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2260      	movs	r2, #96	@ 0x60
 80050da:	217f      	movs	r1, #127	@ 0x7f
 80050dc:	5299      	strh	r1, [r3, r2]
 80050de:	e008      	b.n	80050f2 <UART_Start_Receive_IT+0xaa>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2260      	movs	r2, #96	@ 0x60
 80050e4:	213f      	movs	r1, #63	@ 0x3f
 80050e6:	5299      	strh	r1, [r3, r2]
 80050e8:	e003      	b.n	80050f2 <UART_Start_Receive_IT+0xaa>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2260      	movs	r2, #96	@ 0x60
 80050ee:	2100      	movs	r1, #0
 80050f0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2290      	movs	r2, #144	@ 0x90
 80050f6:	2100      	movs	r1, #0
 80050f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	228c      	movs	r2, #140	@ 0x8c
 80050fe:	2122      	movs	r1, #34	@ 0x22
 8005100:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005102:	f3ef 8310 	mrs	r3, PRIMASK
 8005106:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800510c:	2301      	movs	r3, #1
 800510e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2101      	movs	r1, #1
 8005124:	430a      	orrs	r2, r1
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800512a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800512e:	f383 8810 	msr	PRIMASK, r3
}
 8005132:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005138:	2380      	movs	r3, #128	@ 0x80
 800513a:	059b      	lsls	r3, r3, #22
 800513c:	429a      	cmp	r2, r3
 800513e:	d150      	bne.n	80051e2 <UART_Start_Receive_IT+0x19a>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2268      	movs	r2, #104	@ 0x68
 8005144:	5a9b      	ldrh	r3, [r3, r2]
 8005146:	1dba      	adds	r2, r7, #6
 8005148:	8812      	ldrh	r2, [r2, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d349      	bcc.n	80051e2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	429a      	cmp	r2, r3
 8005158:	d107      	bne.n	800516a <UART_Start_Receive_IT+0x122>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a46      	ldr	r2, [pc, #280]	@ (8005280 <UART_Start_Receive_IT+0x238>)
 8005166:	675a      	str	r2, [r3, #116]	@ 0x74
 8005168:	e002      	b.n	8005170 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a45      	ldr	r2, [pc, #276]	@ (8005284 <UART_Start_Receive_IT+0x23c>)
 800516e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d019      	beq.n	80051ac <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005178:	f3ef 8310 	mrs	r3, PRIMASK
 800517c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800517e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005180:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005182:	2301      	movs	r3, #1
 8005184:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005188:	f383 8810 	msr	PRIMASK, r3
}
 800518c:	46c0      	nop			@ (mov r8, r8)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2180      	movs	r1, #128	@ 0x80
 800519a:	0049      	lsls	r1, r1, #1
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a6:	f383 8810 	msr	PRIMASK, r3
}
 80051aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051ac:	f3ef 8310 	mrs	r3, PRIMASK
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80051b6:	2301      	movs	r3, #1
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	f383 8810 	msr	PRIMASK, r3
}
 80051c0:	46c0      	nop			@ (mov r8, r8)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2180      	movs	r1, #128	@ 0x80
 80051ce:	0549      	lsls	r1, r1, #21
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051da:	f383 8810 	msr	PRIMASK, r3
}
 80051de:	46c0      	nop			@ (mov r8, r8)
 80051e0:	e047      	b.n	8005272 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	2380      	movs	r3, #128	@ 0x80
 80051e8:	015b      	lsls	r3, r3, #5
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d107      	bne.n	80051fe <UART_Start_Receive_IT+0x1b6>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a23      	ldr	r2, [pc, #140]	@ (8005288 <UART_Start_Receive_IT+0x240>)
 80051fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80051fc:	e002      	b.n	8005204 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a22      	ldr	r2, [pc, #136]	@ (800528c <UART_Start_Receive_IT+0x244>)
 8005202:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d019      	beq.n	8005240 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800520c:	f3ef 8310 	mrs	r3, PRIMASK
 8005210:	61fb      	str	r3, [r7, #28]
  return(result);
 8005212:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005216:	2301      	movs	r3, #1
 8005218:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f383 8810 	msr	PRIMASK, r3
}
 8005220:	46c0      	nop			@ (mov r8, r8)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2190      	movs	r1, #144	@ 0x90
 800522e:	0049      	lsls	r1, r1, #1
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	f383 8810 	msr	PRIMASK, r3
}
 800523e:	e018      	b.n	8005272 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005240:	f3ef 8310 	mrs	r3, PRIMASK
 8005244:	613b      	str	r3, [r7, #16]
  return(result);
 8005246:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005248:	653b      	str	r3, [r7, #80]	@ 0x50
 800524a:	2301      	movs	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f383 8810 	msr	PRIMASK, r3
}
 8005254:	46c0      	nop			@ (mov r8, r8)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2120      	movs	r1, #32
 8005262:	430a      	orrs	r2, r1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f383 8810 	msr	PRIMASK, r3
}
 8005270:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	0018      	movs	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	b018      	add	sp, #96	@ 0x60
 800527a:	bd80      	pop	{r7, pc}
 800527c:	000001ff 	.word	0x000001ff
 8005280:	08005a85 	.word	0x08005a85
 8005284:	08005755 	.word	0x08005755
 8005288:	0800559d 	.word	0x0800559d
 800528c:	080053e5 	.word	0x080053e5

08005290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	@ 0x38
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005298:	f3ef 8310 	mrs	r3, PRIMASK
 800529c:	617b      	str	r3, [r7, #20]
  return(result);
 800529e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a2:	2301      	movs	r3, #1
 80052a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f383 8810 	msr	PRIMASK, r3
}
 80052ac:	46c0      	nop			@ (mov r8, r8)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4926      	ldr	r1, [pc, #152]	@ (8005354 <UART_EndRxTransfer+0xc4>)
 80052ba:	400a      	ands	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f383 8810 	msr	PRIMASK, r3
}
 80052c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052ca:	f3ef 8310 	mrs	r3, PRIMASK
 80052ce:	623b      	str	r3, [r7, #32]
  return(result);
 80052d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d4:	2301      	movs	r3, #1
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	f383 8810 	msr	PRIMASK, r3
}
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	491b      	ldr	r1, [pc, #108]	@ (8005358 <UART_EndRxTransfer+0xc8>)
 80052ec:	400a      	ands	r2, r1
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	f383 8810 	msr	PRIMASK, r3
}
 80052fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d118      	bne.n	8005336 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005304:	f3ef 8310 	mrs	r3, PRIMASK
 8005308:	60bb      	str	r3, [r7, #8]
  return(result);
 800530a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800530e:	2301      	movs	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			@ (mov r8, r8)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2110      	movs	r1, #16
 8005326:	438a      	bics	r2, r1
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	228c      	movs	r2, #140	@ 0x8c
 800533a:	2120      	movs	r1, #32
 800533c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	46bd      	mov	sp, r7
 800534e:	b00e      	add	sp, #56	@ 0x38
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	fffffedf 	.word	0xfffffedf
 8005358:	effffffe 	.word	0xeffffffe

0800535c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	225e      	movs	r2, #94	@ 0x5e
 800536e:	2100      	movs	r1, #0
 8005370:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2256      	movs	r2, #86	@ 0x56
 8005376:	2100      	movs	r1, #0
 8005378:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	0018      	movs	r0, r3
 800537e:	f7ff fb09 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	46bd      	mov	sp, r7
 8005386:	b004      	add	sp, #16
 8005388:	bd80      	pop	{r7, pc}

0800538a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005392:	f3ef 8310 	mrs	r3, PRIMASK
 8005396:	60bb      	str	r3, [r7, #8]
  return(result);
 8005398:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	2301      	movs	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f383 8810 	msr	PRIMASK, r3
}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2140      	movs	r1, #64	@ 0x40
 80053b4:	438a      	bics	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f383 8810 	msr	PRIMASK, r3
}
 80053c2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2288      	movs	r2, #136	@ 0x88
 80053c8:	2120      	movs	r1, #32
 80053ca:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7ff facd 	bl	8004974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	46bd      	mov	sp, r7
 80053de:	b006      	add	sp, #24
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b094      	sub	sp, #80	@ 0x50
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053ec:	204e      	movs	r0, #78	@ 0x4e
 80053ee:	183b      	adds	r3, r7, r0
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	2160      	movs	r1, #96	@ 0x60
 80053f4:	5a52      	ldrh	r2, [r2, r1]
 80053f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	228c      	movs	r2, #140	@ 0x8c
 80053fc:	589b      	ldr	r3, [r3, r2]
 80053fe:	2b22      	cmp	r3, #34	@ 0x22
 8005400:	d000      	beq.n	8005404 <UART_RxISR_8BIT+0x20>
 8005402:	e0ba      	b.n	800557a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800540a:	214c      	movs	r1, #76	@ 0x4c
 800540c:	187b      	adds	r3, r7, r1
 800540e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005410:	187b      	adds	r3, r7, r1
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	183b      	adds	r3, r7, r0
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b2d9      	uxtb	r1, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005420:	400a      	ands	r2, r1
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	225e      	movs	r2, #94	@ 0x5e
 8005434:	5a9b      	ldrh	r3, [r3, r2]
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b299      	uxth	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	225e      	movs	r2, #94	@ 0x5e
 8005440:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	225e      	movs	r2, #94	@ 0x5e
 8005446:	5a9b      	ldrh	r3, [r3, r2]
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d000      	beq.n	8005450 <UART_RxISR_8BIT+0x6c>
 800544e:	e09c      	b.n	800558a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005450:	f3ef 8310 	mrs	r3, PRIMASK
 8005454:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800545a:	2301      	movs	r3, #1
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	f383 8810 	msr	PRIMASK, r3
}
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4948      	ldr	r1, [pc, #288]	@ (8005594 <UART_RxISR_8BIT+0x1b0>)
 8005472:	400a      	ands	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	647b      	str	r3, [r7, #68]	@ 0x44
 800548c:	2301      	movs	r3, #1
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2101      	movs	r1, #1
 80054a4:	438a      	bics	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	228c      	movs	r2, #140	@ 0x8c
 80054b8:	2120      	movs	r1, #32
 80054ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	2380      	movs	r3, #128	@ 0x80
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	4013      	ands	r3, r2
 80054d4:	d018      	beq.n	8005508 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054d6:	f3ef 8310 	mrs	r3, PRIMASK
 80054da:	61bb      	str	r3, [r7, #24]
  return(result);
 80054dc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054de:	643b      	str	r3, [r7, #64]	@ 0x40
 80054e0:	2301      	movs	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f383 8810 	msr	PRIMASK, r3
}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4928      	ldr	r1, [pc, #160]	@ (8005598 <UART_RxISR_8BIT+0x1b4>)
 80054f8:	400a      	ands	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	f383 8810 	msr	PRIMASK, r3
}
 8005506:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d12f      	bne.n	8005570 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005516:	f3ef 8310 	mrs	r3, PRIMASK
 800551a:	60fb      	str	r3, [r7, #12]
  return(result);
 800551c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005520:	2301      	movs	r3, #1
 8005522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f383 8810 	msr	PRIMASK, r3
}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2110      	movs	r1, #16
 8005538:	438a      	bics	r2, r1
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800553e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f383 8810 	msr	PRIMASK, r3
}
 8005546:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	2210      	movs	r2, #16
 8005550:	4013      	ands	r3, r2
 8005552:	2b10      	cmp	r3, #16
 8005554:	d103      	bne.n	800555e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	225c      	movs	r2, #92	@ 0x5c
 8005562:	5a9a      	ldrh	r2, [r3, r2]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	0011      	movs	r1, r2
 8005568:	0018      	movs	r0, r3
 800556a:	f7ff fa1b 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800556e:	e00c      	b.n	800558a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	0018      	movs	r0, r3
 8005574:	f7ff fa06 	bl	8004984 <HAL_UART_RxCpltCallback>
}
 8005578:	e007      	b.n	800558a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2108      	movs	r1, #8
 8005586:	430a      	orrs	r2, r1
 8005588:	619a      	str	r2, [r3, #24]
}
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	b014      	add	sp, #80	@ 0x50
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	fffffedf 	.word	0xfffffedf
 8005598:	fbffffff 	.word	0xfbffffff

0800559c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b094      	sub	sp, #80	@ 0x50
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055a4:	204e      	movs	r0, #78	@ 0x4e
 80055a6:	183b      	adds	r3, r7, r0
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	2160      	movs	r1, #96	@ 0x60
 80055ac:	5a52      	ldrh	r2, [r2, r1]
 80055ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	228c      	movs	r2, #140	@ 0x8c
 80055b4:	589b      	ldr	r3, [r3, r2]
 80055b6:	2b22      	cmp	r3, #34	@ 0x22
 80055b8:	d000      	beq.n	80055bc <UART_RxISR_16BIT+0x20>
 80055ba:	e0ba      	b.n	8005732 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055c2:	214c      	movs	r1, #76	@ 0x4c
 80055c4:	187b      	adds	r3, r7, r1
 80055c6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80055ce:	187b      	adds	r3, r7, r1
 80055d0:	183a      	adds	r2, r7, r0
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	4013      	ands	r3, r2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e2:	1c9a      	adds	r2, r3, #2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	225e      	movs	r2, #94	@ 0x5e
 80055ec:	5a9b      	ldrh	r3, [r3, r2]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b299      	uxth	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	225e      	movs	r2, #94	@ 0x5e
 80055f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	225e      	movs	r2, #94	@ 0x5e
 80055fe:	5a9b      	ldrh	r3, [r3, r2]
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d000      	beq.n	8005608 <UART_RxISR_16BIT+0x6c>
 8005606:	e09c      	b.n	8005742 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005608:	f3ef 8310 	mrs	r3, PRIMASK
 800560c:	623b      	str	r3, [r7, #32]
  return(result);
 800560e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005610:	647b      	str	r3, [r7, #68]	@ 0x44
 8005612:	2301      	movs	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	f383 8810 	msr	PRIMASK, r3
}
 800561c:	46c0      	nop			@ (mov r8, r8)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4948      	ldr	r1, [pc, #288]	@ (800574c <UART_RxISR_16BIT+0x1b0>)
 800562a:	400a      	ands	r2, r1
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	f383 8810 	msr	PRIMASK, r3
}
 8005638:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800563a:	f3ef 8310 	mrs	r3, PRIMASK
 800563e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005642:	643b      	str	r3, [r7, #64]	@ 0x40
 8005644:	2301      	movs	r3, #1
 8005646:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	f383 8810 	msr	PRIMASK, r3
}
 800564e:	46c0      	nop			@ (mov r8, r8)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2101      	movs	r1, #1
 800565c:	438a      	bics	r2, r1
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	f383 8810 	msr	PRIMASK, r3
}
 800566a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	228c      	movs	r2, #140	@ 0x8c
 8005670:	2120      	movs	r1, #32
 8005672:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	4013      	ands	r3, r2
 800568c:	d018      	beq.n	80056c0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800568e:	f3ef 8310 	mrs	r3, PRIMASK
 8005692:	617b      	str	r3, [r7, #20]
  return(result);
 8005694:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005698:	2301      	movs	r3, #1
 800569a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4928      	ldr	r1, [pc, #160]	@ (8005750 <UART_RxISR_16BIT+0x1b4>)
 80056b0:	400a      	ands	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d12f      	bne.n	8005728 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056ce:	f3ef 8310 	mrs	r3, PRIMASK
 80056d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80056d4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056d8:	2301      	movs	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f383 8810 	msr	PRIMASK, r3
}
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2110      	movs	r1, #16
 80056f0:	438a      	bics	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	2210      	movs	r2, #16
 8005708:	4013      	ands	r3, r2
 800570a:	2b10      	cmp	r3, #16
 800570c:	d103      	bne.n	8005716 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2210      	movs	r2, #16
 8005714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	225c      	movs	r2, #92	@ 0x5c
 800571a:	5a9a      	ldrh	r2, [r3, r2]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	0011      	movs	r1, r2
 8005720:	0018      	movs	r0, r3
 8005722:	f7ff f93f 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005726:	e00c      	b.n	8005742 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0018      	movs	r0, r3
 800572c:	f7ff f92a 	bl	8004984 <HAL_UART_RxCpltCallback>
}
 8005730:	e007      	b.n	8005742 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699a      	ldr	r2, [r3, #24]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2108      	movs	r1, #8
 800573e:	430a      	orrs	r2, r1
 8005740:	619a      	str	r2, [r3, #24]
}
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	46bd      	mov	sp, r7
 8005746:	b014      	add	sp, #80	@ 0x50
 8005748:	bd80      	pop	{r7, pc}
 800574a:	46c0      	nop			@ (mov r8, r8)
 800574c:	fffffedf 	.word	0xfffffedf
 8005750:	fbffffff 	.word	0xfbffffff

08005754 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b0a0      	sub	sp, #128	@ 0x80
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800575c:	237a      	movs	r3, #122	@ 0x7a
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	2160      	movs	r1, #96	@ 0x60
 8005764:	5a52      	ldrh	r2, [r2, r1]
 8005766:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	228c      	movs	r2, #140	@ 0x8c
 8005784:	589b      	ldr	r3, [r3, r2]
 8005786:	2b22      	cmp	r3, #34	@ 0x22
 8005788:	d000      	beq.n	800578c <UART_RxISR_8BIT_FIFOEN+0x38>
 800578a:	e165      	b.n	8005a58 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800578c:	236e      	movs	r3, #110	@ 0x6e
 800578e:	18fb      	adds	r3, r7, r3
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	2168      	movs	r1, #104	@ 0x68
 8005794:	5a52      	ldrh	r2, [r2, r1]
 8005796:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005798:	e10c      	b.n	80059b4 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057a0:	216c      	movs	r1, #108	@ 0x6c
 80057a2:	187b      	adds	r3, r7, r1
 80057a4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	237a      	movs	r3, #122	@ 0x7a
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b2d9      	uxtb	r1, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b8:	400a      	ands	r2, r1
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	225e      	movs	r2, #94	@ 0x5e
 80057cc:	5a9b      	ldrh	r3, [r3, r2]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b299      	uxth	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	225e      	movs	r2, #94	@ 0x5e
 80057d8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80057e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057e4:	2207      	movs	r2, #7
 80057e6:	4013      	ands	r3, r2
 80057e8:	d049      	beq.n	800587e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057ec:	2201      	movs	r2, #1
 80057ee:	4013      	ands	r3, r2
 80057f0:	d010      	beq.n	8005814 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80057f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	4013      	ands	r3, r2
 80057fa:	d00b      	beq.n	8005814 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2201      	movs	r2, #1
 8005802:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2290      	movs	r2, #144	@ 0x90
 8005808:	589b      	ldr	r3, [r3, r2]
 800580a:	2201      	movs	r2, #1
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2190      	movs	r1, #144	@ 0x90
 8005812:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005816:	2202      	movs	r2, #2
 8005818:	4013      	ands	r3, r2
 800581a:	d00f      	beq.n	800583c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800581c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800581e:	2201      	movs	r2, #1
 8005820:	4013      	ands	r3, r2
 8005822:	d00b      	beq.n	800583c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2202      	movs	r2, #2
 800582a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2290      	movs	r2, #144	@ 0x90
 8005830:	589b      	ldr	r3, [r3, r2]
 8005832:	2204      	movs	r2, #4
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2190      	movs	r1, #144	@ 0x90
 800583a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800583c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800583e:	2204      	movs	r2, #4
 8005840:	4013      	ands	r3, r2
 8005842:	d00f      	beq.n	8005864 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005846:	2201      	movs	r2, #1
 8005848:	4013      	ands	r3, r2
 800584a:	d00b      	beq.n	8005864 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2204      	movs	r2, #4
 8005852:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2290      	movs	r2, #144	@ 0x90
 8005858:	589b      	ldr	r3, [r3, r2]
 800585a:	2202      	movs	r2, #2
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2190      	movs	r1, #144	@ 0x90
 8005862:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2290      	movs	r2, #144	@ 0x90
 8005868:	589b      	ldr	r3, [r3, r2]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	0018      	movs	r0, r3
 8005872:	f7ff f88f 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2290      	movs	r2, #144	@ 0x90
 800587a:	2100      	movs	r1, #0
 800587c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	225e      	movs	r2, #94	@ 0x5e
 8005882:	5a9b      	ldrh	r3, [r3, r2]
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d000      	beq.n	800588c <UART_RxISR_8BIT_FIFOEN+0x138>
 800588a:	e093      	b.n	80059b4 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800588c:	f3ef 8310 	mrs	r3, PRIMASK
 8005890:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005894:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005896:	2301      	movs	r3, #1
 8005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589c:	f383 8810 	msr	PRIMASK, r3
}
 80058a0:	46c0      	nop			@ (mov r8, r8)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4970      	ldr	r1, [pc, #448]	@ (8005a70 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 80058ae:	400a      	ands	r2, r1
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058b4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b8:	f383 8810 	msr	PRIMASK, r3
}
 80058bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058be:	f3ef 8310 	mrs	r3, PRIMASK
 80058c2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80058c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80058c8:	2301      	movs	r3, #1
 80058ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ce:	f383 8810 	msr	PRIMASK, r3
}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4965      	ldr	r1, [pc, #404]	@ (8005a74 <UART_RxISR_8BIT_FIFOEN+0x320>)
 80058e0:	400a      	ands	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]
 80058e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ea:	f383 8810 	msr	PRIMASK, r3
}
 80058ee:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	228c      	movs	r2, #140	@ 0x8c
 80058f4:	2120      	movs	r1, #32
 80058f6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	2380      	movs	r3, #128	@ 0x80
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	4013      	ands	r3, r2
 8005910:	d018      	beq.n	8005944 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005912:	f3ef 8310 	mrs	r3, PRIMASK
 8005916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800591a:	663b      	str	r3, [r7, #96]	@ 0x60
 800591c:	2301      	movs	r3, #1
 800591e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	f383 8810 	msr	PRIMASK, r3
}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4951      	ldr	r1, [pc, #324]	@ (8005a78 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005934:	400a      	ands	r2, r1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593e:	f383 8810 	msr	PRIMASK, r3
}
 8005942:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d12f      	bne.n	80059ac <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005952:	f3ef 8310 	mrs	r3, PRIMASK
 8005956:	623b      	str	r3, [r7, #32]
  return(result);
 8005958:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800595c:	2301      	movs	r3, #1
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	f383 8810 	msr	PRIMASK, r3
}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2110      	movs	r1, #16
 8005974:	438a      	bics	r2, r1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800597a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	f383 8810 	msr	PRIMASK, r3
}
 8005982:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	2210      	movs	r2, #16
 800598c:	4013      	ands	r3, r2
 800598e:	2b10      	cmp	r3, #16
 8005990:	d103      	bne.n	800599a <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2210      	movs	r2, #16
 8005998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	225c      	movs	r2, #92	@ 0x5c
 800599e:	5a9a      	ldrh	r2, [r3, r2]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	0011      	movs	r1, r2
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7fe fffd 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
 80059aa:	e003      	b.n	80059b4 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f7fe ffe8 	bl	8004984 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059b4:	236e      	movs	r3, #110	@ 0x6e
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d004      	beq.n	80059c8 <UART_RxISR_8BIT_FIFOEN+0x274>
 80059be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059c0:	2220      	movs	r2, #32
 80059c2:	4013      	ands	r3, r2
 80059c4:	d000      	beq.n	80059c8 <UART_RxISR_8BIT_FIFOEN+0x274>
 80059c6:	e6e8      	b.n	800579a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059c8:	205a      	movs	r0, #90	@ 0x5a
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	215e      	movs	r1, #94	@ 0x5e
 80059d0:	5a52      	ldrh	r2, [r2, r1]
 80059d2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059d4:	0001      	movs	r1, r0
 80059d6:	187b      	adds	r3, r7, r1
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d044      	beq.n	8005a68 <UART_RxISR_8BIT_FIFOEN+0x314>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2268      	movs	r2, #104	@ 0x68
 80059e2:	5a9b      	ldrh	r3, [r3, r2]
 80059e4:	187a      	adds	r2, r7, r1
 80059e6:	8812      	ldrh	r2, [r2, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d23d      	bcs.n	8005a68 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059ec:	f3ef 8310 	mrs	r3, PRIMASK
 80059f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059f2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80059f6:	2301      	movs	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f383 8810 	msr	PRIMASK, r3
}
 8005a00:	46c0      	nop			@ (mov r8, r8)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	491b      	ldr	r1, [pc, #108]	@ (8005a7c <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005a0e:	400a      	ands	r2, r1
 8005a10:	609a      	str	r2, [r3, #8]
 8005a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f383 8810 	msr	PRIMASK, r3
}
 8005a1c:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a17      	ldr	r2, [pc, #92]	@ (8005a80 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005a22:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a24:	f3ef 8310 	mrs	r3, PRIMASK
 8005a28:	617b      	str	r3, [r7, #20]
  return(result);
 8005a2a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a2e:	2301      	movs	r3, #1
 8005a30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f383 8810 	msr	PRIMASK, r3
}
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2120      	movs	r1, #32
 8005a46:	430a      	orrs	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f383 8810 	msr	PRIMASK, r3
}
 8005a54:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a56:	e007      	b.n	8005a68 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2108      	movs	r1, #8
 8005a64:	430a      	orrs	r2, r1
 8005a66:	619a      	str	r2, [r3, #24]
}
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b020      	add	sp, #128	@ 0x80
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	fffffeff 	.word	0xfffffeff
 8005a74:	effffffe 	.word	0xeffffffe
 8005a78:	fbffffff 	.word	0xfbffffff
 8005a7c:	efffffff 	.word	0xefffffff
 8005a80:	080053e5 	.word	0x080053e5

08005a84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b0a2      	sub	sp, #136	@ 0x88
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005a8c:	2382      	movs	r3, #130	@ 0x82
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	2160      	movs	r1, #96	@ 0x60
 8005a94:	5a52      	ldrh	r2, [r2, r1]
 8005a96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	2284      	movs	r2, #132	@ 0x84
 8005aa0:	18ba      	adds	r2, r7, r2
 8005aa2:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	228c      	movs	r2, #140	@ 0x8c
 8005ab8:	589b      	ldr	r3, [r3, r2]
 8005aba:	2b22      	cmp	r3, #34	@ 0x22
 8005abc:	d000      	beq.n	8005ac0 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005abe:	e16f      	b.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ac0:	2376      	movs	r3, #118	@ 0x76
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	2168      	movs	r1, #104	@ 0x68
 8005ac8:	5a52      	ldrh	r2, [r2, r1]
 8005aca:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005acc:	e114      	b.n	8005cf8 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ad4:	2174      	movs	r1, #116	@ 0x74
 8005ad6:	187b      	adds	r3, r7, r1
 8005ad8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ade:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	2282      	movs	r2, #130	@ 0x82
 8005ae4:	18ba      	adds	r2, r7, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	8812      	ldrh	r2, [r2, #0]
 8005aea:	4013      	ands	r3, r2
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005af0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	225e      	movs	r2, #94	@ 0x5e
 8005b00:	5a9b      	ldrh	r3, [r3, r2]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b299      	uxth	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	225e      	movs	r2, #94	@ 0x5e
 8005b0c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	2184      	movs	r1, #132	@ 0x84
 8005b16:	187a      	adds	r2, r7, r1
 8005b18:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b1a:	187b      	adds	r3, r7, r1
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2207      	movs	r2, #7
 8005b20:	4013      	ands	r3, r2
 8005b22:	d04e      	beq.n	8005bc2 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d010      	beq.n	8005b50 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005b2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005b30:	2380      	movs	r3, #128	@ 0x80
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4013      	ands	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2290      	movs	r2, #144	@ 0x90
 8005b44:	589b      	ldr	r3, [r3, r2]
 8005b46:	2201      	movs	r2, #1
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2190      	movs	r1, #144	@ 0x90
 8005b4e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b50:	2384      	movs	r3, #132	@ 0x84
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2202      	movs	r2, #2
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d00f      	beq.n	8005b7c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4013      	ands	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2290      	movs	r2, #144	@ 0x90
 8005b70:	589b      	ldr	r3, [r3, r2]
 8005b72:	2204      	movs	r2, #4
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2190      	movs	r1, #144	@ 0x90
 8005b7a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b7c:	2384      	movs	r3, #132	@ 0x84
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2204      	movs	r2, #4
 8005b84:	4013      	ands	r3, r2
 8005b86:	d00f      	beq.n	8005ba8 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2204      	movs	r2, #4
 8005b96:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2290      	movs	r2, #144	@ 0x90
 8005b9c:	589b      	ldr	r3, [r3, r2]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2190      	movs	r1, #144	@ 0x90
 8005ba6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2290      	movs	r2, #144	@ 0x90
 8005bac:	589b      	ldr	r3, [r3, r2]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f7fe feed 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2290      	movs	r2, #144	@ 0x90
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	225e      	movs	r2, #94	@ 0x5e
 8005bc6:	5a9b      	ldrh	r3, [r3, r2]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d000      	beq.n	8005bd0 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005bce:	e093      	b.n	8005cf8 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bda:	2301      	movs	r3, #1
 8005bdc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be0:	f383 8810 	msr	PRIMASK, r3
}
 8005be4:	46c0      	nop			@ (mov r8, r8)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4971      	ldr	r1, [pc, #452]	@ (8005db8 <UART_RxISR_16BIT_FIFOEN+0x334>)
 8005bf2:	400a      	ands	r2, r1
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bfc:	f383 8810 	msr	PRIMASK, r3
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c02:	f3ef 8310 	mrs	r3, PRIMASK
 8005c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c12:	f383 8810 	msr	PRIMASK, r3
}
 8005c16:	46c0      	nop			@ (mov r8, r8)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4966      	ldr	r1, [pc, #408]	@ (8005dbc <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c2a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c2e:	f383 8810 	msr	PRIMASK, r3
}
 8005c32:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	228c      	movs	r2, #140	@ 0x8c
 8005c38:	2120      	movs	r1, #32
 8005c3a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	2380      	movs	r3, #128	@ 0x80
 8005c50:	041b      	lsls	r3, r3, #16
 8005c52:	4013      	ands	r3, r2
 8005c54:	d018      	beq.n	8005c88 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c56:	f3ef 8310 	mrs	r3, PRIMASK
 8005c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c60:	2301      	movs	r3, #1
 8005c62:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c66:	f383 8810 	msr	PRIMASK, r3
}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4952      	ldr	r1, [pc, #328]	@ (8005dc0 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005c78:	400a      	ands	r2, r1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	f383 8810 	msr	PRIMASK, r3
}
 8005c86:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d12f      	bne.n	8005cf0 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c96:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2110      	movs	r1, #16
 8005cb8:	438a      	bics	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	2210      	movs	r2, #16
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d103      	bne.n	8005cde <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2210      	movs	r2, #16
 8005cdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	225c      	movs	r2, #92	@ 0x5c
 8005ce2:	5a9a      	ldrh	r2, [r3, r2]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	0011      	movs	r1, r2
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f7fe fe5b 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
 8005cee:	e003      	b.n	8005cf8 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7fe fe46 	bl	8004984 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cf8:	2376      	movs	r3, #118	@ 0x76
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d006      	beq.n	8005d10 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8005d02:	2384      	movs	r3, #132	@ 0x84
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d000      	beq.n	8005d10 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8005d0e:	e6de      	b.n	8005ace <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d10:	205e      	movs	r0, #94	@ 0x5e
 8005d12:	183b      	adds	r3, r7, r0
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	215e      	movs	r1, #94	@ 0x5e
 8005d18:	5a52      	ldrh	r2, [r2, r1]
 8005d1a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d1c:	0001      	movs	r1, r0
 8005d1e:	187b      	adds	r3, r7, r1
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d044      	beq.n	8005db0 <UART_RxISR_16BIT_FIFOEN+0x32c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2268      	movs	r2, #104	@ 0x68
 8005d2a:	5a9b      	ldrh	r3, [r3, r2]
 8005d2c:	187a      	adds	r2, r7, r1
 8005d2e:	8812      	ldrh	r2, [r2, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d23d      	bcs.n	8005db0 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d34:	f3ef 8310 	mrs	r3, PRIMASK
 8005d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d3e:	2301      	movs	r3, #1
 8005d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f383 8810 	msr	PRIMASK, r3
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	491b      	ldr	r1, [pc, #108]	@ (8005dc4 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005d56:	400a      	ands	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]
 8005d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f383 8810 	msr	PRIMASK, r3
}
 8005d64:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a17      	ldr	r2, [pc, #92]	@ (8005dc8 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005d6a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d70:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d72:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d74:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d76:	2301      	movs	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f383 8810 	msr	PRIMASK, r3
}
 8005d80:	46c0      	nop			@ (mov r8, r8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2120      	movs	r1, #32
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d9e:	e007      	b.n	8005db0 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2108      	movs	r1, #8
 8005dac:	430a      	orrs	r2, r1
 8005dae:	619a      	str	r2, [r3, #24]
}
 8005db0:	46c0      	nop			@ (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b022      	add	sp, #136	@ 0x88
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	fffffeff 	.word	0xfffffeff
 8005dbc:	effffffe 	.word	0xeffffffe
 8005dc0:	fbffffff 	.word	0xfbffffff
 8005dc4:	efffffff 	.word	0xefffffff
 8005dc8:	0800559d 	.word	0x0800559d

08005dcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dd4:	46c0      	nop			@ (mov r8, r8)
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b002      	add	sp, #8
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005de4:	46c0      	nop			@ (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005df4:	46c0      	nop			@ (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2284      	movs	r2, #132	@ 0x84
 8005e08:	5c9b      	ldrb	r3, [r3, r2]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e027      	b.n	8005e62 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2284      	movs	r2, #132	@ 0x84
 8005e16:	2101      	movs	r1, #1
 8005e18:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2288      	movs	r2, #136	@ 0x88
 8005e1e:	2124      	movs	r1, #36	@ 0x24
 8005e20:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2101      	movs	r1, #1
 8005e36:	438a      	bics	r2, r1
 8005e38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e6c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2288      	movs	r2, #136	@ 0x88
 8005e54:	2120      	movs	r1, #32
 8005e56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2284      	movs	r2, #132	@ 0x84
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	0018      	movs	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b004      	add	sp, #16
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	dfffffff 	.word	0xdfffffff

08005e70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2284      	movs	r2, #132	@ 0x84
 8005e7e:	5c9b      	ldrb	r3, [r3, r2]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e02e      	b.n	8005ee6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2284      	movs	r2, #132	@ 0x84
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2288      	movs	r2, #136	@ 0x88
 8005e94:	2124      	movs	r1, #36	@ 0x24
 8005e96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2101      	movs	r1, #1
 8005eac:	438a      	bics	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	08d9      	lsrs	r1, r3, #3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f000 f854 	bl	8005f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2288      	movs	r2, #136	@ 0x88
 8005ed8:	2120      	movs	r1, #32
 8005eda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2284      	movs	r2, #132	@ 0x84
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b004      	add	sp, #16
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2284      	movs	r2, #132	@ 0x84
 8005efe:	5c9b      	ldrb	r3, [r3, r2]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e02f      	b.n	8005f68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2284      	movs	r2, #132	@ 0x84
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2288      	movs	r2, #136	@ 0x88
 8005f14:	2124      	movs	r1, #36	@ 0x24
 8005f16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	438a      	bics	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	4a0e      	ldr	r2, [pc, #56]	@ (8005f70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 f813 	bl	8005f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2288      	movs	r2, #136	@ 0x88
 8005f5a:	2120      	movs	r1, #32
 8005f5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2284      	movs	r2, #132	@ 0x84
 8005f62:	2100      	movs	r1, #0
 8005f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b004      	add	sp, #16
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	f1ffffff 	.word	0xf1ffffff

08005f74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d108      	bne.n	8005f96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	226a      	movs	r2, #106	@ 0x6a
 8005f88:	2101      	movs	r1, #1
 8005f8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2268      	movs	r2, #104	@ 0x68
 8005f90:	2101      	movs	r1, #1
 8005f92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f94:	e043      	b.n	800601e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f96:	260f      	movs	r6, #15
 8005f98:	19bb      	adds	r3, r7, r6
 8005f9a:	2208      	movs	r2, #8
 8005f9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f9e:	200e      	movs	r0, #14
 8005fa0:	183b      	adds	r3, r7, r0
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	0e5b      	lsrs	r3, r3, #25
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	240d      	movs	r4, #13
 8005fb2:	193b      	adds	r3, r7, r4
 8005fb4:	2107      	movs	r1, #7
 8005fb6:	400a      	ands	r2, r1
 8005fb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	0f5b      	lsrs	r3, r3, #29
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	250c      	movs	r5, #12
 8005fc6:	197b      	adds	r3, r7, r5
 8005fc8:	2107      	movs	r1, #7
 8005fca:	400a      	ands	r2, r1
 8005fcc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fce:	183b      	adds	r3, r7, r0
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	197a      	adds	r2, r7, r5
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	4914      	ldr	r1, [pc, #80]	@ (8006028 <UARTEx_SetNbDataToProcess+0xb4>)
 8005fd8:	5c8a      	ldrb	r2, [r1, r2]
 8005fda:	435a      	muls	r2, r3
 8005fdc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fde:	197b      	adds	r3, r7, r5
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	4a12      	ldr	r2, [pc, #72]	@ (800602c <UARTEx_SetNbDataToProcess+0xb8>)
 8005fe4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe6:	0019      	movs	r1, r3
 8005fe8:	f7fa f918 	bl	800021c <__divsi3>
 8005fec:	0003      	movs	r3, r0
 8005fee:	b299      	uxth	r1, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	226a      	movs	r2, #106	@ 0x6a
 8005ff4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff6:	19bb      	adds	r3, r7, r6
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	193a      	adds	r2, r7, r4
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	490a      	ldr	r1, [pc, #40]	@ (8006028 <UARTEx_SetNbDataToProcess+0xb4>)
 8006000:	5c8a      	ldrb	r2, [r1, r2]
 8006002:	435a      	muls	r2, r3
 8006004:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006006:	193b      	adds	r3, r7, r4
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4a08      	ldr	r2, [pc, #32]	@ (800602c <UARTEx_SetNbDataToProcess+0xb8>)
 800600c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800600e:	0019      	movs	r1, r3
 8006010:	f7fa f904 	bl	800021c <__divsi3>
 8006014:	0003      	movs	r3, r0
 8006016:	b299      	uxth	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2268      	movs	r2, #104	@ 0x68
 800601c:	5299      	strh	r1, [r3, r2]
}
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	46bd      	mov	sp, r7
 8006022:	b005      	add	sp, #20
 8006024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	0800616c 	.word	0x0800616c
 800602c:	08006174 	.word	0x08006174

08006030 <memset>:
 8006030:	0003      	movs	r3, r0
 8006032:	1882      	adds	r2, r0, r2
 8006034:	4293      	cmp	r3, r2
 8006036:	d100      	bne.n	800603a <memset+0xa>
 8006038:	4770      	bx	lr
 800603a:	7019      	strb	r1, [r3, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	e7f9      	b.n	8006034 <memset+0x4>

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	2600      	movs	r6, #0
 8006044:	4c0c      	ldr	r4, [pc, #48]	@ (8006078 <__libc_init_array+0x38>)
 8006046:	4d0d      	ldr	r5, [pc, #52]	@ (800607c <__libc_init_array+0x3c>)
 8006048:	1b64      	subs	r4, r4, r5
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	42a6      	cmp	r6, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	2600      	movs	r6, #0
 8006052:	f000 f819 	bl	8006088 <_init>
 8006056:	4c0a      	ldr	r4, [pc, #40]	@ (8006080 <__libc_init_array+0x40>)
 8006058:	4d0a      	ldr	r5, [pc, #40]	@ (8006084 <__libc_init_array+0x44>)
 800605a:	1b64      	subs	r4, r4, r5
 800605c:	10a4      	asrs	r4, r4, #2
 800605e:	42a6      	cmp	r6, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	00b3      	lsls	r3, r6, #2
 8006066:	58eb      	ldr	r3, [r5, r3]
 8006068:	4798      	blx	r3
 800606a:	3601      	adds	r6, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	00b3      	lsls	r3, r6, #2
 8006070:	58eb      	ldr	r3, [r5, r3]
 8006072:	4798      	blx	r3
 8006074:	3601      	adds	r6, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	0800617c 	.word	0x0800617c
 800607c:	0800617c 	.word	0x0800617c
 8006080:	08006180 	.word	0x08006180
 8006084:	0800617c 	.word	0x0800617c

08006088 <_init>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608e:	bc08      	pop	{r3}
 8006090:	469e      	mov	lr, r3
 8006092:	4770      	bx	lr

08006094 <_fini>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	46c0      	nop			@ (mov r8, r8)
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr
