
STM32Play_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a2c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005aec  08005aec  00006aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc8  08005bc8  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005bc8  08005bc8  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bc8  08005bc8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc8  08005bc8  00006bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bcc  08005bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005bd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000010  08005be0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005be0  000072c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177ca  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ca  00000000  00000000  0001e802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00021bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001071  00000000  00000000  000230b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016748  00000000  00000000  00024129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf98  00000000  00000000  0003a871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9f2  00000000  00000000  00056809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e21fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd8  00000000  00000000  000e2240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e6e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ad4 	.word	0x08005ad4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005ad4 	.word	0x08005ad4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f005 fb3a 	bl	8005a7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000408:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800040a:	4a2e      	ldr	r2, [pc, #184]	@ (80004c4 <MX_ADC1_Init+0xd0>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800040e:	4b2c      	ldr	r3, [pc, #176]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000410:	22c0      	movs	r2, #192	@ 0xc0
 8000412:	0612      	lsls	r2, r2, #24
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041c:	4b28      	ldr	r3, [pc, #160]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000422:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000428:	4b25      	ldr	r3, [pc, #148]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800042a:	2204      	movs	r2, #4
 800042c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000430:	2200      	movs	r2, #0
 8000432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000434:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000436:	2200      	movs	r2, #0
 8000438:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800043a:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800043c:	2200      	movs	r2, #0
 800043e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000442:	2201      	movs	r2, #1
 8000444:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b1e      	ldr	r3, [pc, #120]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000448:	2220      	movs	r2, #32
 800044a:	2100      	movs	r1, #0
 800044c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800045c:	222c      	movs	r2, #44	@ 0x2c
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000464:	2200      	movs	r2, #0
 8000466:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800046a:	2200      	movs	r2, #0
 800046c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000470:	2200      	movs	r2, #0
 8000472:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000476:	223c      	movs	r2, #60	@ 0x3c
 8000478:	2100      	movs	r1, #0
 800047a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800047c:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fe9f 	bl	80011c8 <HAL_ADC_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800048e:	f000 f9f9 	bl	8000884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <MX_ADC1_Init+0xd4>)
 8000496:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a4:	1d3a      	adds	r2, r7, #4
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 f832 	bl	8001514 <HAL_ADC_ConfigChannel>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004b4:	f000 f9e6 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000002c 	.word	0x2000002c
 80004c4:	40012400 	.word	0x40012400
 80004c8:	0c000008 	.word	0x0c000008

080004cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b091      	sub	sp, #68	@ 0x44
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	232c      	movs	r3, #44	@ 0x2c
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f005 facc 	bl	8005a7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	2410      	movs	r4, #16
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	231c      	movs	r3, #28
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f005 fac4 	bl	8005a7c <memset>
  if(adcHandle->Instance==ADC1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a20      	ldr	r2, [pc, #128]	@ (800057c <HAL_ADC_MspInit+0xb0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d139      	bne.n	8000572 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2280      	movs	r2, #128	@ 0x80
 8000502:	01d2      	lsls	r2, r2, #7
 8000504:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050c:	193b      	adds	r3, r7, r4
 800050e:	0018      	movs	r0, r3
 8000510:	f002 f9b0 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000518:	f000 f9b4 	bl	8000884 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800051c:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800051e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 8000522:	2180      	movs	r1, #128	@ 0x80
 8000524:	0349      	lsls	r1, r1, #13
 8000526:	430a      	orrs	r2, r1
 8000528:	641a      	str	r2, [r3, #64]	@ 0x40
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800052c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800052e:	2380      	movs	r3, #128	@ 0x80
 8000530:	035b      	lsls	r3, r3, #13
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800053a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800053c:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800053e:	2101      	movs	r1, #1
 8000540:	430a      	orrs	r2, r1
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
 8000544:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 8000546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000548:	2201      	movs	r2, #1
 800054a:	4013      	ands	r3, r2
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000550:	212c      	movs	r1, #44	@ 0x2c
 8000552:	187b      	adds	r3, r7, r1
 8000554:	227c      	movs	r2, #124	@ 0x7c
 8000556:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2203      	movs	r2, #3
 800055c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	187a      	adds	r2, r7, r1
 8000566:	23a0      	movs	r3, #160	@ 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fb61 	bl	8001c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b011      	add	sp, #68	@ 0x44
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40012400 	.word	0x40012400
 8000580:	40021000 	.word	0x40021000

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b08b      	sub	sp, #44	@ 0x2c
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	2414      	movs	r4, #20
 800058c:	193b      	adds	r3, r7, r4
 800058e:	0018      	movs	r0, r3
 8000590:	2314      	movs	r3, #20
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f005 fa71 	bl	8005a7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <MX_GPIO_Init+0xb0>)
 800059c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005a0:	2104      	movs	r1, #4
 80005a2:	430a      	orrs	r2, r1
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005aa:	2204      	movs	r2, #4
 80005ac:	4013      	ands	r3, r2
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005b8:	2120      	movs	r1, #32
 80005ba:	430a      	orrs	r2, r1
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c2:	2220      	movs	r2, #32
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005e8:	2102      	movs	r1, #2
 80005ea:	430a      	orrs	r2, r1
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f2:	2202      	movs	r2, #2
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fc89 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2208      	movs	r2, #8
 800060c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2201      	movs	r2, #1
 8000612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000620:	187b      	adds	r3, r7, r1
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <MX_GPIO_Init+0xb4>)
 8000624:	0019      	movs	r1, r3
 8000626:	0010      	movs	r0, r2
 8000628:	f001 fb04 	bl	8001c34 <HAL_GPIO_Init>

}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b00b      	add	sp, #44	@ 0x2c
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	50001400 	.word	0x50001400

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	@ (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fc6b 	bl	8001f54 <HAL_I2C_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 f8ff 	bl	8000884 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f001 fd08 	bl	80020a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 f8f6 	bl	8000884 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fd4b 	bl	8002138 <HAL_I2CEx_ConfigDigitalFilter>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f8ed 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000090 	.word	0x20000090
 80006b4:	40005400 	.word	0x40005400
 80006b8:	00303d5b 	.word	0x00303d5b

080006bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b091      	sub	sp, #68	@ 0x44
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	232c      	movs	r3, #44	@ 0x2c
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	0018      	movs	r0, r3
 80006ca:	2314      	movs	r3, #20
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f005 f9d4 	bl	8005a7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	2410      	movs	r4, #16
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	0018      	movs	r0, r3
 80006da:	231c      	movs	r3, #28
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f005 f9cc 	bl	8005a7c <memset>
  if(i2cHandle->Instance==I2C1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a23      	ldr	r2, [pc, #140]	@ (8000778 <HAL_I2C_MspInit+0xbc>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d13f      	bne.n	800076e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2240      	movs	r2, #64	@ 0x40
 80006f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 f8b9 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000706:	f000 f8bd 	bl	8000884 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070e:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000722:	212c      	movs	r1, #44	@ 0x2c
 8000724:	187b      	adds	r3, r7, r1
 8000726:	22c0      	movs	r2, #192	@ 0xc0
 8000728:	00d2      	lsls	r2, r2, #3
 800072a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2212      	movs	r2, #18
 8000730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2206      	movs	r2, #6
 8000742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	187a      	adds	r2, r7, r1
 8000746:	23a0      	movs	r3, #160	@ 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fa71 	bl	8001c34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	0389      	lsls	r1, r1, #14
 800075c:	430a      	orrs	r2, r1
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	039b      	lsls	r3, r3, #14
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b011      	add	sp, #68	@ 0x44
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	40005400 	.word	0x40005400
 800077c:	40021000 	.word	0x40021000

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int32_t Ch1_duty = 5000;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <main+0x48>)
 8000788:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fba2 	bl	8000ed2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f823 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f7ff fef7 	bl	8000584 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000796:	f7ff fe2d 	bl	80003f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800079a:	f7ff ff4f 	bl	800063c <MX_I2C1_Init>
  MX_SPI1_Init();
 800079e:	f000 f877 	bl	8000890 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007a2:	f000 fa49 	bl	8000c38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007a6:	f000 fa95 	bl	8000cd4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007aa:	f000 f967 	bl	8000a7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <main+0x4c>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fabc 	bl	8002d30 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1,rx_data,4);
 80007b8:	4905      	ldr	r1, [pc, #20]	@ (80007d0 <main+0x50>)
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <main+0x54>)
 80007bc:	2204      	movs	r2, #4
 80007be:	0018      	movs	r0, r3
 80007c0:	f003 fa88 	bl	8003cd4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	e7fd      	b.n	80007c4 <main+0x44>
 80007c8:	00001388 	.word	0x00001388
 80007cc:	20000148 	.word	0x20000148
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000194 	.word	0x20000194

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b08d      	sub	sp, #52	@ 0x34
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	2414      	movs	r4, #20
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	0018      	movs	r0, r3
 80007e4:	231c      	movs	r3, #28
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f005 f947 	bl	8005a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ee:	003b      	movs	r3, r7
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f005 f940 	bl	8005a7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	0252      	lsls	r2, r2, #9
 8000808:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	f001 fcdf 	bl	80021d0 <HAL_RCC_OscConfig>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000816:	f000 f835 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	003b      	movs	r3, r7
 800081c:	2207      	movs	r2, #7
 800081e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000820:	003b      	movs	r3, r7
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000838:	003b      	movs	r3, r7
 800083a:	2100      	movs	r1, #0
 800083c:	0018      	movs	r0, r3
 800083e:	f001 feab 	bl	8002598 <HAL_RCC_ClockConfig>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 f81d 	bl	8000884 <Error_Handler>
  }
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b00d      	add	sp, #52	@ 0x34
 8000850:	bd90      	pop	{r4, r7, pc}
	...

08000854 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, rx_data, 4, 100);
 800085c:	4907      	ldr	r1, [pc, #28]	@ (800087c <HAL_UART_RxCpltCallback+0x28>)
 800085e:	4808      	ldr	r0, [pc, #32]	@ (8000880 <HAL_UART_RxCpltCallback+0x2c>)
 8000860:	2364      	movs	r3, #100	@ 0x64
 8000862:	2204      	movs	r2, #4
 8000864:	f003 f992 	bl	8003b8c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1,rx_data,4);
 8000868:	4904      	ldr	r1, [pc, #16]	@ (800087c <HAL_UART_RxCpltCallback+0x28>)
 800086a:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_UART_RxCpltCallback+0x2c>)
 800086c:	2204      	movs	r2, #4
 800086e:	0018      	movs	r0, r3
 8000870:	f003 fa30 	bl	8003cd4 <HAL_UART_Receive_IT>


}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000194 	.word	0x20000194

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_SPI1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	@ (8000908 <MX_SPI1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <MX_SPI1_Init+0x74>)
 800089c:	2282      	movs	r2, #130	@ 0x82
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008aa:	22e0      	movs	r2, #224	@ 0xe0
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	02d2      	lsls	r2, r2, #11
 80008c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008de:	2207      	movs	r2, #7
 80008e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <MX_SPI1_Init+0x74>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 f8ad 	bl	8002a50 <HAL_SPI_Init>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f7ff ffc3 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000e4 	.word	0x200000e4
 8000908:	40013000 	.word	0x40013000

0800090c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b091      	sub	sp, #68	@ 0x44
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	232c      	movs	r3, #44	@ 0x2c
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f005 f8ac 	bl	8005a7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	2410      	movs	r4, #16
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	231c      	movs	r3, #28
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f005 f8a4 	bl	8005a7c <memset>
  if(spiHandle->Instance==SPI1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <HAL_SPI_MspInit+0xb8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d13e      	bne.n	80009bc <HAL_SPI_MspInit+0xb0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094c:	193b      	adds	r3, r7, r4
 800094e:	0018      	movs	r0, r3
 8000950:	f001 ff90 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000958:	f7ff ff94 	bl	8000884 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <HAL_SPI_MspInit+0xbc>)
 800095e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <HAL_SPI_MspInit+0xbc>)
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	0149      	lsls	r1, r1, #5
 8000966:	430a      	orrs	r2, r1
 8000968:	641a      	str	r2, [r3, #64]	@ 0x40
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <HAL_SPI_MspInit+0xbc>)
 800096c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800096e:	2380      	movs	r3, #128	@ 0x80
 8000970:	015b      	lsls	r3, r3, #5
 8000972:	4013      	ands	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_SPI_MspInit+0xbc>)
 800097a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_SPI_MspInit+0xbc>)
 800097e:	2102      	movs	r1, #2
 8000980:	430a      	orrs	r2, r1
 8000982:	635a      	str	r2, [r3, #52]	@ 0x34
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <HAL_SPI_MspInit+0xbc>)
 8000986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000988:	2202      	movs	r2, #2
 800098a:	4013      	ands	r3, r2
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000990:	212c      	movs	r1, #44	@ 0x2c
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2239      	movs	r2, #57	@ 0x39
 8000996:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2202      	movs	r2, #2
 800099c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	4a06      	ldr	r2, [pc, #24]	@ (80009cc <HAL_SPI_MspInit+0xc0>)
 80009b4:	0019      	movs	r1, r3
 80009b6:	0010      	movs	r0, r2
 80009b8:	f001 f93c 	bl	8001c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b011      	add	sp, #68	@ 0x44
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	40013000 	.word	0x40013000
 80009c8:	40021000 	.word	0x40021000
 80009cc:	50000400 	.word	0x50000400

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_MspInit+0x44>)
 80009dc:	2101      	movs	r1, #1
 80009de:	430a      	orrs	r2, r1
 80009e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	2201      	movs	r2, #1
 80009e8:	4013      	ands	r3, r2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <HAL_MspInit+0x44>)
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	0549      	lsls	r1, r1, #21
 80009f8:	430a      	orrs	r2, r1
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_MspInit+0x44>)
 80009fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	055b      	lsls	r3, r3, #21
 8000a04:	4013      	ands	r3, r2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	40021000 	.word	0x40021000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 faa8 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <USART1_IRQHandler+0x14>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f003 f996 	bl	8003d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000194 	.word	0x20000194

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <SystemInit+0x14>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	0512      	lsls	r2, r2, #20
 8000a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	@ 0x38
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	2328      	movs	r3, #40	@ 0x28
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	0018      	movs	r0, r3
 8000a88:	2310      	movs	r3, #16
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f004 fff5 	bl	8005a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	231c      	movs	r3, #28
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	0018      	movs	r0, r3
 8000a98:	230c      	movs	r3, #12
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f004 ffed 	bl	8005a7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	231c      	movs	r3, #28
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f004 ffe6 	bl	8005a7c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000ab2:	4a30      	ldr	r2, [pc, #192]	@ (8000b74 <MX_TIM3_Init+0xf8>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000ab8:	2240      	movs	r2, #64	@ 0x40
 8000aba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b78 <MX_TIM3_Init+0xfc>)
 8000ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ad4:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 f872 	bl	8002bc0 <HAL_TIM_Base_Init>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ae0:	f7ff fed0 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae4:	2128      	movs	r1, #40	@ 0x28
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2280      	movs	r2, #128	@ 0x80
 8000aea:	0152      	lsls	r2, r2, #5
 8000aec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aee:	187a      	adds	r2, r7, r1
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f002 faf3 	bl	80030e0 <HAL_TIM_ConfigClockSource>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000afe:	f7ff fec1 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b02:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f002 f8b3 	bl	8002c70 <HAL_TIM_PWM_Init>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b0e:	f7ff feb9 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	211c      	movs	r1, #28
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 ff78 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b30:	f7ff fea8 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b34:	003b      	movs	r3, r7
 8000b36:	2260      	movs	r2, #96	@ 0x60
 8000b38:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b7c <MX_TIM3_Init+0x100>)
 8000b3e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b40:	003b      	movs	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b46:	003b      	movs	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4c:	0039      	movs	r1, r7
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 f9c4 	bl	8002ee0 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b5c:	f7ff fe92 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <MX_TIM3_Init+0xf4>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f82a 	bl	8000bbc <HAL_TIM_MspPostInit>

}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b00e      	add	sp, #56	@ 0x38
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000148 	.word	0x20000148
 8000b74:	40000400 	.word	0x40000400
 8000b78:	00002710 	.word	0x00002710
 8000b7c:	00001388 	.word	0x00001388

08000b80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x34>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d10b      	bne.n	8000baa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_TIM_Base_MspInit+0x38>)
 8000b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_TIM_Base_MspInit+0x38>)
 8000b98:	2102      	movs	r1, #2
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_TIM_Base_MspInit+0x38>)
 8000ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b004      	add	sp, #16
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	40000400 	.word	0x40000400
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b089      	sub	sp, #36	@ 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	240c      	movs	r4, #12
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2314      	movs	r3, #20
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f004 ff54 	bl	8005a7c <memset>
  if(timHandle->Instance==TIM3)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <HAL_TIM_MspPostInit+0x70>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d121      	bne.n	8000c22 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <HAL_TIM_MspPostInit+0x74>)
 8000be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <HAL_TIM_MspPostInit+0x74>)
 8000be4:	2104      	movs	r1, #4
 8000be6:	430a      	orrs	r2, r1
 8000be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_TIM_MspPostInit+0x74>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bee:	2204      	movs	r2, #4
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bf6:	0021      	movs	r1, r4
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2240      	movs	r2, #64	@ 0x40
 8000bfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2202      	movs	r2, #2
 8000c02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2201      	movs	r2, #1
 8000c14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	4a06      	ldr	r2, [pc, #24]	@ (8000c34 <HAL_TIM_MspPostInit+0x78>)
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f001 f809 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b009      	add	sp, #36	@ 0x24
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	40000400 	.word	0x40000400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	50000800 	.word	0x50000800

08000c38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c3e:	4a24      	ldr	r2, [pc, #144]	@ (8000cd0 <MX_USART1_UART_Init+0x98>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c42:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c44:	2296      	movs	r2, #150	@ 0x96
 8000c46:	0192      	lsls	r2, r2, #6
 8000c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f002 ff2c 	bl	8003ae0 <HAL_UART_Init>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c8c:	f7ff fdfa 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000c92:	2100      	movs	r1, #0
 8000c94:	0018      	movs	r0, r3
 8000c96:	f004 fe11 	bl	80058bc <HAL_UARTEx_SetTxFifoThreshold>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c9e:	f7ff fdf1 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f004 fe48 	bl	800593c <HAL_UARTEx_SetRxFifoThreshold>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb0:	f7ff fde8 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <MX_USART1_UART_Init+0x94>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f004 fdc6 	bl	8005848 <HAL_UARTEx_DisableFifoMode>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc0:	f7ff fde0 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	20000194 	.word	0x20000194
 8000cd0:	40013800 	.word	0x40013800

08000cd4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000cda:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <MX_USART2_UART_Init+0x64>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000ce0:	22e1      	movs	r2, #225	@ 0xe1
 8000ce2:	0252      	lsls	r2, r2, #9
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <MX_USART2_UART_Init+0x60>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 fede 	bl	8003ae0 <HAL_UART_Init>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d28:	f7ff fdac 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	20000228 	.word	0x20000228
 8000d38:	40004400 	.word	0x40004400

08000d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b093      	sub	sp, #76	@ 0x4c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2334      	movs	r3, #52	@ 0x34
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f004 fe94 	bl	8005a7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	2418      	movs	r4, #24
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	231c      	movs	r3, #28
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f004 fe8c 	bl	8005a7c <memset>
  if(uartHandle->Instance==USART1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a42      	ldr	r2, [pc, #264]	@ (8000e74 <HAL_UART_MspInit+0x138>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d147      	bne.n	8000dfe <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fd79 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff fd7d 	bl	8000884 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	01c9      	lsls	r1, r1, #7
 8000d94:	430a      	orrs	r2, r1
 8000d96:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d98:	4b37      	ldr	r3, [pc, #220]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	01db      	lsls	r3, r3, #7
 8000da0:	4013      	ands	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b34      	ldr	r3, [pc, #208]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000daa:	4b33      	ldr	r3, [pc, #204]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	430a      	orrs	r2, r1
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db2:	4b31      	ldr	r3, [pc, #196]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db6:	2201      	movs	r2, #1
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dbe:	2134      	movs	r1, #52	@ 0x34
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2204      	movs	r2, #4
 8000ddc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	187a      	adds	r2, r7, r1
 8000de0:	23a0      	movs	r3, #160	@ 0xa0
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 ff24 	bl	8001c34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	201b      	movs	r0, #27
 8000df2:	f000 fe11 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df6:	201b      	movs	r0, #27
 8000df8:	f000 fe23 	bl	8001a42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dfc:	e036      	b.n	8000e6c <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1e      	ldr	r2, [pc, #120]	@ (8000e7c <HAL_UART_MspInit+0x140>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d131      	bne.n	8000e6c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000e0e:	2180      	movs	r1, #128	@ 0x80
 8000e10:	0289      	lsls	r1, r1, #10
 8000e12:	430a      	orrs	r2, r1
 8000e14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e1a:	2380      	movs	r3, #128	@ 0x80
 8000e1c:	029b      	lsls	r3, r3, #10
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <HAL_UART_MspInit+0x13c>)
 8000e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e34:	2201      	movs	r2, #1
 8000e36:	4013      	ands	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000e3c:	2134      	movs	r1, #52	@ 0x34
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2281      	movs	r2, #129	@ 0x81
 8000e42:	0212      	lsls	r2, r2, #8
 8000e44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2202      	movs	r2, #2
 8000e4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	187a      	adds	r2, r7, r1
 8000e60:	23a0      	movs	r3, #160	@ 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 fee4 	bl	8001c34 <HAL_GPIO_Init>
}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b013      	add	sp, #76	@ 0x4c
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	40013800 	.word	0x40013800
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40004400 	.word	0x40004400

08000e80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e84:	f7ff fdee 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e8a:	e003      	b.n	8000e94 <LoopCopyDataInit>

08000e8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000e8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e92:	3104      	adds	r1, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e94:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000e98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e9c:	d3f6      	bcc.n	8000e8c <CopyDataInit>
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ea0:	e002      	b.n	8000ea8 <LoopFillZerobss>

08000ea2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ea4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea6:	3204      	adds	r2, #4

08000ea8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <LoopForever+0x16>)
  cmp r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000eac:	d3f9      	bcc.n	8000ea2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000eae:	f004 fded 	bl	8005a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb2:	f7ff fc65 	bl	8000780 <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   r0, =_estack
 8000eb8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000ebc:	08005bd0 	.word	0x08005bd0
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ec4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000ec8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000ecc:	200002c0 	.word	0x200002c0

08000ed0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_IRQHandler>

08000ed2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f000 f80e 	bl	8000f00 <HAL_InitTick>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e001      	b.n	8000ef4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef0:	f7ff fd6e 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	230f      	movs	r3, #15
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f10:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <HAL_InitTick+0x88>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d02b      	beq.n	8000f70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f18:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <HAL_InitTick+0x8c>)
 8000f1a:	681c      	ldr	r4, [r3, #0]
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <HAL_InitTick+0x88>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	0019      	movs	r1, r3
 8000f22:	23fa      	movs	r3, #250	@ 0xfa
 8000f24:	0098      	lsls	r0, r3, #2
 8000f26:	f7ff f8ef 	bl	8000108 <__udivsi3>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	0020      	movs	r0, r4
 8000f30:	f7ff f8ea 	bl	8000108 <__udivsi3>
 8000f34:	0003      	movs	r3, r0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 fd93 	bl	8001a62 <HAL_SYSTICK_Config>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d112      	bne.n	8000f66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d80a      	bhi.n	8000f5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 fd62 	bl	8001a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HAL_InitTick+0x90>)
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	e00d      	b.n	8000f78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e008      	b.n	8000f78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f66:	230f      	movs	r3, #15
 8000f68:	18fb      	adds	r3, r7, r3
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e003      	b.n	8000f78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f78:	230f      	movs	r3, #15
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b005      	add	sp, #20
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	20000008 	.word	0x20000008

08000f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_IncTick+0x1c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	18d2      	adds	r2, r2, r3
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	2000000c 	.word	0x2000000c
 8000fb4:	200002bc 	.word	0x200002bc

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b02      	ldr	r3, [pc, #8]	@ (8000fc8 <HAL_GetTick+0x10>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	200002bc 	.word	0x200002bc

08000fcc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000fdc:	401a      	ands	r2, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]
}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	ff3fffff 	.word	0xff3fffff

08000ff4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	23c0      	movs	r3, #192	@ 0xc0
 8001002:	041b      	lsls	r3, r3, #16
 8001004:	4013      	ands	r3, r2
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	2104      	movs	r1, #4
 8001022:	400a      	ands	r2, r1
 8001024:	2107      	movs	r1, #7
 8001026:	4091      	lsls	r1, r2
 8001028:	000a      	movs	r2, r1
 800102a:	43d2      	mvns	r2, r2
 800102c:	401a      	ands	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2104      	movs	r1, #4
 8001032:	400b      	ands	r3, r1
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4099      	lsls	r1, r3
 8001038:	000b      	movs	r3, r1
 800103a:	431a      	orrs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bd80      	pop	{r7, pc}

08001048 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	2104      	movs	r1, #4
 800105a:	400a      	ands	r2, r1
 800105c:	2107      	movs	r1, #7
 800105e:	4091      	lsls	r1, r2
 8001060:	000a      	movs	r2, r1
 8001062:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2104      	movs	r1, #4
 8001068:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800106a:	40da      	lsrs	r2, r3
 800106c:	0013      	movs	r3, r2
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}

08001076 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	211f      	movs	r1, #31
 800108a:	400a      	ands	r2, r1
 800108c:	210f      	movs	r1, #15
 800108e:	4091      	lsls	r1, r2
 8001090:	000a      	movs	r2, r1
 8001092:	43d2      	mvns	r2, r2
 8001094:	401a      	ands	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0e9b      	lsrs	r3, r3, #26
 800109a:	210f      	movs	r1, #15
 800109c:	4019      	ands	r1, r3
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	201f      	movs	r0, #31
 80010a2:	4003      	ands	r3, r0
 80010a4:	4099      	lsls	r1, r3
 80010a6:	000b      	movs	r3, r1
 80010a8:	431a      	orrs	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b004      	add	sp, #16
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	025b      	lsls	r3, r3, #9
 80010c8:	0a5b      	lsrs	r3, r3, #9
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	0252      	lsls	r2, r2, #9
 80010ea:	0a52      	lsrs	r2, r2, #9
 80010ec:	43d2      	mvns	r2, r2
 80010ee:	401a      	ands	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	0212      	lsls	r2, r2, #8
 8001110:	43d2      	mvns	r2, r2
 8001112:	401a      	ands	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	400b      	ands	r3, r1
 800111c:	4904      	ldr	r1, [pc, #16]	@ (8001130 <LL_ADC_SetChannelSamplingTime+0x34>)
 800111e:	400b      	ands	r3, r1
 8001120:	431a      	orrs	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	7fffff00 	.word	0x7fffff00

08001134 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <LL_ADC_EnableInternalRegulator+0x24>)
 8001142:	4013      	ands	r3, r2
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	0552      	lsls	r2, r2, #21
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	6fffffe8 	.word	0x6fffffe8

0800115c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	055b      	lsls	r3, r3, #21
 800116c:	401a      	ands	r2, r3
 800116e:	2380      	movs	r3, #128	@ 0x80
 8001170:	055b      	lsls	r3, r3, #21
 8001172:	429a      	cmp	r2, r3
 8001174:	d101      	bne.n	800117a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800117a:	2300      	movs	r3, #0
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}

08001184 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2201      	movs	r2, #1
 8001192:	4013      	ands	r3, r2
 8001194:	2b01      	cmp	r3, #1
 8001196:	d101      	bne.n	800119c <LL_ADC_IsEnabled+0x18>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <LL_ADC_IsEnabled+0x1a>
 800119c:	2300      	movs	r3, #0
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2204      	movs	r2, #4
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d101      	bne.n	80011be <LL_ADC_REG_IsConversionOngoing+0x18>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011be:	2300      	movs	r3, #0
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d0:	231f      	movs	r3, #31
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e17e      	b.n	80014ec <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10a      	bne.n	800120c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff f967 	bl	80004cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2254      	movs	r2, #84	@ 0x54
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff ffa3 	bl	800115c <LL_ADC_IsInternalRegulatorEnabled>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d114      	bne.n	8001244 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff ff88 	bl	8001134 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001224:	4bb3      	ldr	r3, [pc, #716]	@ (80014f4 <HAL_ADC_Init+0x32c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	49b3      	ldr	r1, [pc, #716]	@ (80014f8 <HAL_ADC_Init+0x330>)
 800122a:	0018      	movs	r0, r3
 800122c:	f7fe ff6c 	bl	8000108 <__udivsi3>
 8001230:	0003      	movs	r3, r0
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001236:	e002      	b.n	800123e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3b01      	subs	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f9      	bne.n	8001238 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff ff87 	bl	800115c <LL_ADC_IsInternalRegulatorEnabled>
 800124e:	1e03      	subs	r3, r0, #0
 8001250:	d10f      	bne.n	8001272 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	2210      	movs	r2, #16
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001262:	2201      	movs	r2, #1
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800126a:	231f      	movs	r3, #31
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff ff95 	bl	80011a6 <LL_ADC_REG_IsConversionOngoing>
 800127c:	0003      	movs	r3, r0
 800127e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001284:	2210      	movs	r2, #16
 8001286:	4013      	ands	r3, r2
 8001288:	d000      	beq.n	800128c <HAL_ADC_Init+0xc4>
 800128a:	e122      	b.n	80014d2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d000      	beq.n	8001294 <HAL_ADC_Init+0xcc>
 8001292:	e11e      	b.n	80014d2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001298:	4a98      	ldr	r2, [pc, #608]	@ (80014fc <HAL_ADC_Init+0x334>)
 800129a:	4013      	ands	r3, r2
 800129c:	2202      	movs	r2, #2
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff ff6b 	bl	8001184 <LL_ADC_IsEnabled>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d000      	beq.n	80012b4 <HAL_ADC_Init+0xec>
 80012b2:	e0ad      	b.n	8001410 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7e1b      	ldrb	r3, [r3, #24]
 80012bc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012be:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7e5b      	ldrb	r3, [r3, #25]
 80012c4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012c6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7e9b      	ldrb	r3, [r3, #26]
 80012cc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012ce:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <HAL_ADC_Init+0x116>
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	015b      	lsls	r3, r3, #5
 80012dc:	e000      	b.n	80012e0 <HAL_ADC_Init+0x118>
 80012de:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012e0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012e6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da04      	bge.n	80012fa <HAL_ADC_Init+0x132>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	e001      	b.n	80012fe <HAL_ADC_Init+0x136>
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80012fe:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	212c      	movs	r1, #44	@ 0x2c
 8001304:	5c5b      	ldrb	r3, [r3, r1]
 8001306:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001308:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2220      	movs	r2, #32
 8001314:	5c9b      	ldrb	r3, [r3, r2]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d115      	bne.n	8001346 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7e9b      	ldrb	r3, [r3, #26]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	0252      	lsls	r2, r2, #9
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	e00b      	b.n	8001346 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	2220      	movs	r2, #32
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133e:	2201      	movs	r2, #1
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00a      	beq.n	8001364 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001352:	23e0      	movs	r3, #224	@ 0xe0
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800135c:	4313      	orrs	r3, r2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4a65      	ldr	r2, [pc, #404]	@ (8001500 <HAL_ADC_Init+0x338>)
 800136c:	4013      	ands	r3, r2
 800136e:	0019      	movs	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	430a      	orrs	r2, r1
 8001378:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	0f9b      	lsrs	r3, r3, #30
 8001380:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001386:	4313      	orrs	r3, r2
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4313      	orrs	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	223c      	movs	r2, #60	@ 0x3c
 8001392:	5c9b      	ldrb	r3, [r3, r2]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d111      	bne.n	80013bc <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	0f9b      	lsrs	r3, r3, #30
 800139e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80013a4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80013aa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80013b0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	4313      	orrs	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4a50      	ldr	r2, [pc, #320]	@ (8001504 <HAL_ADC_Init+0x33c>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	23c0      	movs	r3, #192	@ 0xc0
 80013d8:	061b      	lsls	r3, r3, #24
 80013da:	429a      	cmp	r2, r3
 80013dc:	d018      	beq.n	8001410 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013e2:	2380      	movs	r3, #128	@ 0x80
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d012      	beq.n	8001410 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d00c      	beq.n	8001410 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013f6:	4b44      	ldr	r3, [pc, #272]	@ (8001508 <HAL_ADC_Init+0x340>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a44      	ldr	r2, [pc, #272]	@ (800150c <HAL_ADC_Init+0x344>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	23f0      	movs	r3, #240	@ 0xf0
 8001406:	039b      	lsls	r3, r3, #14
 8001408:	401a      	ands	r2, r3
 800140a:	4b3f      	ldr	r3, [pc, #252]	@ (8001508 <HAL_ADC_Init+0x340>)
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001418:	001a      	movs	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	f7ff fdf7 	bl	800100e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001428:	4939      	ldr	r1, [pc, #228]	@ (8001510 <HAL_ADC_Init+0x348>)
 800142a:	001a      	movs	r2, r3
 800142c:	f7ff fdef 	bl	800100e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2110      	movs	r1, #16
 8001444:	4249      	negs	r1, r1
 8001446:	430a      	orrs	r2, r1
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28
 800144a:	e018      	b.n	800147e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	039b      	lsls	r3, r3, #14
 8001454:	429a      	cmp	r2, r3
 8001456:	d112      	bne.n	800147e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	3b01      	subs	r3, #1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	221c      	movs	r2, #28
 8001468:	4013      	ands	r3, r2
 800146a:	2210      	movs	r2, #16
 800146c:	4252      	negs	r2, r2
 800146e:	409a      	lsls	r2, r3
 8001470:	0011      	movs	r1, r2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2100      	movs	r1, #0
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff fddf 	bl	8001048 <LL_ADC_GetSamplingTimeCommonChannels>
 800148a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001490:	429a      	cmp	r2, r3
 8001492:	d10b      	bne.n	80014ac <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149e:	2203      	movs	r2, #3
 80014a0:	4393      	bics	r3, r2
 80014a2:	2201      	movs	r2, #1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014aa:	e01c      	b.n	80014e6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b0:	2212      	movs	r2, #18
 80014b2:	4393      	bics	r3, r2
 80014b4:	2210      	movs	r2, #16
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c0:	2201      	movs	r2, #1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80014c8:	231f      	movs	r3, #31
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014d0:	e009      	b.n	80014e6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	2210      	movs	r2, #16
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80014de:	231f      	movs	r3, #31
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80014e6:	231f      	movs	r3, #31
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	781b      	ldrb	r3, [r3, #0]
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b008      	add	sp, #32
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000004 	.word	0x20000004
 80014f8:	00030d40 	.word	0x00030d40
 80014fc:	fffffefd 	.word	0xfffffefd
 8001500:	ffde0201 	.word	0xffde0201
 8001504:	1ffffc02 	.word	0x1ffffc02
 8001508:	40012708 	.word	0x40012708
 800150c:	ffc3ffff 	.word	0xffc3ffff
 8001510:	7fffff04 	.word	0x7fffff04

08001514 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151e:	2317      	movs	r3, #23
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2254      	movs	r2, #84	@ 0x54
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x24>
 8001534:	2302      	movs	r3, #2
 8001536:	e1be      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x3a2>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2254      	movs	r2, #84	@ 0x54
 800153c:	2101      	movs	r1, #1
 800153e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff fe2e 	bl	80011a6 <LL_ADC_REG_IsConversionOngoing>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d000      	beq.n	8001550 <HAL_ADC_ConfigChannel+0x3c>
 800154e:	e1a1      	b.n	8001894 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d100      	bne.n	800155a <HAL_ADC_ConfigChannel+0x46>
 8001558:	e152      	b.n	8001800 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	061b      	lsls	r3, r3, #24
 8001562:	429a      	cmp	r2, r3
 8001564:	d004      	beq.n	8001570 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800156a:	4ac2      	ldr	r2, [pc, #776]	@ (8001874 <HAL_ADC_ConfigChannel+0x360>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d108      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0019      	movs	r1, r3
 800157a:	0010      	movs	r0, r2
 800157c:	f7ff fd9b 	bl	80010b6 <LL_ADC_REG_SetSequencerChAdd>
 8001580:	e0ed      	b.n	800175e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	211f      	movs	r1, #31
 800158c:	400b      	ands	r3, r1
 800158e:	210f      	movs	r1, #15
 8001590:	4099      	lsls	r1, r3
 8001592:	000b      	movs	r3, r1
 8001594:	43db      	mvns	r3, r3
 8001596:	4013      	ands	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	0a5b      	lsrs	r3, r3, #9
 80015a2:	d105      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x9c>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0e9b      	lsrs	r3, r3, #26
 80015aa:	221f      	movs	r2, #31
 80015ac:	4013      	ands	r3, r2
 80015ae:	e0bc      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2201      	movs	r2, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	d000      	beq.n	80015bc <HAL_ADC_ConfigChannel+0xa8>
 80015ba:	e0b5      	b.n	8001728 <HAL_ADC_ConfigChannel+0x214>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2202      	movs	r2, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d000      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0xb4>
 80015c6:	e0ad      	b.n	8001724 <HAL_ADC_ConfigChannel+0x210>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2204      	movs	r2, #4
 80015ce:	4013      	ands	r3, r2
 80015d0:	d000      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0xc0>
 80015d2:	e0a5      	b.n	8001720 <HAL_ADC_ConfigChannel+0x20c>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2208      	movs	r2, #8
 80015da:	4013      	ands	r3, r2
 80015dc:	d000      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0xcc>
 80015de:	e09d      	b.n	800171c <HAL_ADC_ConfigChannel+0x208>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2210      	movs	r2, #16
 80015e6:	4013      	ands	r3, r2
 80015e8:	d000      	beq.n	80015ec <HAL_ADC_ConfigChannel+0xd8>
 80015ea:	e095      	b.n	8001718 <HAL_ADC_ConfigChannel+0x204>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2220      	movs	r2, #32
 80015f2:	4013      	ands	r3, r2
 80015f4:	d000      	beq.n	80015f8 <HAL_ADC_ConfigChannel+0xe4>
 80015f6:	e08d      	b.n	8001714 <HAL_ADC_ConfigChannel+0x200>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2240      	movs	r2, #64	@ 0x40
 80015fe:	4013      	ands	r3, r2
 8001600:	d000      	beq.n	8001604 <HAL_ADC_ConfigChannel+0xf0>
 8001602:	e085      	b.n	8001710 <HAL_ADC_ConfigChannel+0x1fc>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	4013      	ands	r3, r2
 800160c:	d000      	beq.n	8001610 <HAL_ADC_ConfigChannel+0xfc>
 800160e:	e07d      	b.n	800170c <HAL_ADC_ConfigChannel+0x1f8>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d000      	beq.n	800161e <HAL_ADC_ConfigChannel+0x10a>
 800161c:	e074      	b.n	8001708 <HAL_ADC_ConfigChannel+0x1f4>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d000      	beq.n	800162c <HAL_ADC_ConfigChannel+0x118>
 800162a:	e06b      	b.n	8001704 <HAL_ADC_ConfigChannel+0x1f0>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4013      	ands	r3, r2
 8001636:	d000      	beq.n	800163a <HAL_ADC_ConfigChannel+0x126>
 8001638:	e062      	b.n	8001700 <HAL_ADC_ConfigChannel+0x1ec>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4013      	ands	r3, r2
 8001644:	d000      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x134>
 8001646:	e059      	b.n	80016fc <HAL_ADC_ConfigChannel+0x1e8>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	4013      	ands	r3, r2
 8001652:	d151      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1e4>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	019b      	lsls	r3, r3, #6
 800165c:	4013      	ands	r3, r2
 800165e:	d149      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1e0>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	01db      	lsls	r3, r3, #7
 8001668:	4013      	ands	r3, r2
 800166a:	d141      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1dc>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4013      	ands	r3, r2
 8001676:	d139      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x1d8>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	4013      	ands	r3, r2
 8001682:	d131      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1d4>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	d129      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1d0>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	02db      	lsls	r3, r3, #11
 8001698:	4013      	ands	r3, r2
 800169a:	d121      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1cc>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	031b      	lsls	r3, r3, #12
 80016a4:	4013      	ands	r3, r2
 80016a6:	d119      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1c8>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	035b      	lsls	r3, r3, #13
 80016b0:	4013      	ands	r3, r2
 80016b2:	d111      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1c4>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	039b      	lsls	r3, r3, #14
 80016bc:	4013      	ands	r3, r2
 80016be:	d109      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1c0>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	4013      	ands	r3, r2
 80016ca:	d001      	beq.n	80016d0 <HAL_ADC_ConfigChannel+0x1bc>
 80016cc:	2316      	movs	r3, #22
 80016ce:	e02c      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016d0:	2300      	movs	r3, #0
 80016d2:	e02a      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016d4:	2315      	movs	r3, #21
 80016d6:	e028      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016d8:	2314      	movs	r3, #20
 80016da:	e026      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016dc:	2313      	movs	r3, #19
 80016de:	e024      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016e0:	2312      	movs	r3, #18
 80016e2:	e022      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016e4:	2311      	movs	r3, #17
 80016e6:	e020      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016e8:	2310      	movs	r3, #16
 80016ea:	e01e      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016ec:	230f      	movs	r3, #15
 80016ee:	e01c      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016f0:	230e      	movs	r3, #14
 80016f2:	e01a      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016f4:	230d      	movs	r3, #13
 80016f6:	e018      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016f8:	230c      	movs	r3, #12
 80016fa:	e016      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 80016fc:	230b      	movs	r3, #11
 80016fe:	e014      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001700:	230a      	movs	r3, #10
 8001702:	e012      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001704:	2309      	movs	r3, #9
 8001706:	e010      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001708:	2308      	movs	r3, #8
 800170a:	e00e      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 800170c:	2307      	movs	r3, #7
 800170e:	e00c      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001710:	2306      	movs	r3, #6
 8001712:	e00a      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001714:	2305      	movs	r3, #5
 8001716:	e008      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001718:	2304      	movs	r3, #4
 800171a:	e006      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 800171c:	2303      	movs	r3, #3
 800171e:	e004      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001720:	2302      	movs	r3, #2
 8001722:	e002      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_ADC_ConfigChannel+0x216>
 8001728:	2300      	movs	r3, #0
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	6852      	ldr	r2, [r2, #4]
 800172e:	201f      	movs	r0, #31
 8001730:	4002      	ands	r2, r0
 8001732:	4093      	lsls	r3, r2
 8001734:	000a      	movs	r2, r1
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	429a      	cmp	r2, r3
 800174a:	d808      	bhi.n	800175e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	001a      	movs	r2, r3
 800175a:	f7ff fc8c 	bl	8001076 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	001a      	movs	r2, r3
 800176c:	f7ff fcc6 	bl	80010fc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db00      	blt.n	800177a <HAL_ADC_ConfigChannel+0x266>
 8001778:	e096      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800177a:	4b3f      	ldr	r3, [pc, #252]	@ (8001878 <HAL_ADC_ConfigChannel+0x364>)
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fc39 	bl	8000ff4 <LL_ADC_GetCommonPathInternalCh>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a3c      	ldr	r2, [pc, #240]	@ (800187c <HAL_ADC_ConfigChannel+0x368>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d123      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	2380      	movs	r3, #128	@ 0x80
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001798:	d11e      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2280      	movs	r2, #128	@ 0x80
 800179e:	0412      	lsls	r2, r2, #16
 80017a0:	4313      	orrs	r3, r2
 80017a2:	4a35      	ldr	r2, [pc, #212]	@ (8001878 <HAL_ADC_ConfigChannel+0x364>)
 80017a4:	0019      	movs	r1, r3
 80017a6:	0010      	movs	r0, r2
 80017a8:	f7ff fc10 	bl	8000fcc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80017ac:	4b34      	ldr	r3, [pc, #208]	@ (8001880 <HAL_ADC_ConfigChannel+0x36c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4934      	ldr	r1, [pc, #208]	@ (8001884 <HAL_ADC_ConfigChannel+0x370>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7fe fca8 	bl	8000108 <__udivsi3>
 80017b8:	0003      	movs	r3, r0
 80017ba:	001a      	movs	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	189b      	adds	r3, r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017c8:	e002      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f9      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017d6:	e067      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001888 <HAL_ADC_ConfigChannel+0x374>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d162      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	03db      	lsls	r3, r3, #15
 80017e8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017ea:	d15d      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2280      	movs	r2, #128	@ 0x80
 80017f0:	03d2      	lsls	r2, r2, #15
 80017f2:	4313      	orrs	r3, r2
 80017f4:	4a20      	ldr	r2, [pc, #128]	@ (8001878 <HAL_ADC_ConfigChannel+0x364>)
 80017f6:	0019      	movs	r1, r3
 80017f8:	0010      	movs	r0, r2
 80017fa:	f7ff fbe7 	bl	8000fcc <LL_ADC_SetCommonPathInternalCh>
 80017fe:	e053      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	061b      	lsls	r3, r3, #24
 8001808:	429a      	cmp	r2, r3
 800180a:	d004      	beq.n	8001816 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001810:	4a18      	ldr	r2, [pc, #96]	@ (8001874 <HAL_ADC_ConfigChannel+0x360>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d107      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0019      	movs	r1, r3
 8001820:	0010      	movs	r0, r2
 8001822:	f7ff fc59 	bl	80010d8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	da3c      	bge.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_ADC_ConfigChannel+0x364>)
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff fbdf 	bl	8000ff4 <LL_ADC_GetCommonPathInternalCh>
 8001836:	0003      	movs	r3, r0
 8001838:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a0f      	ldr	r2, [pc, #60]	@ (800187c <HAL_ADC_ConfigChannel+0x368>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d108      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4a11      	ldr	r2, [pc, #68]	@ (800188c <HAL_ADC_ConfigChannel+0x378>)
 8001848:	4013      	ands	r3, r2
 800184a:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_ADC_ConfigChannel+0x364>)
 800184c:	0019      	movs	r1, r3
 800184e:	0010      	movs	r0, r2
 8001850:	f7ff fbbc 	bl	8000fcc <LL_ADC_SetCommonPathInternalCh>
 8001854:	e028      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_ADC_ConfigChannel+0x374>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d123      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_ADC_ConfigChannel+0x37c>)
 8001864:	4013      	ands	r3, r2
 8001866:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <HAL_ADC_ConfigChannel+0x364>)
 8001868:	0019      	movs	r1, r3
 800186a:	0010      	movs	r0, r2
 800186c:	f7ff fbae 	bl	8000fcc <LL_ADC_SetCommonPathInternalCh>
 8001870:	e01a      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x394>
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	80000004 	.word	0x80000004
 8001878:	40012708 	.word	0x40012708
 800187c:	a4000200 	.word	0xa4000200
 8001880:	20000004 	.word	0x20000004
 8001884:	00030d40 	.word	0x00030d40
 8001888:	a8000400 	.word	0xa8000400
 800188c:	ff7fffff 	.word	0xff7fffff
 8001890:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001898:	2220      	movs	r2, #32
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018a0:	2317      	movs	r3, #23
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2254      	movs	r2, #84	@ 0x54
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80018b0:	2317      	movs	r3, #23
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	781b      	ldrb	r3, [r3, #0]
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b006      	add	sp, #24
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	0002      	movs	r2, r0
 80018c8:	1dfb      	adds	r3, r7, #7
 80018ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	1dfb      	adds	r3, r7, #7
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018d2:	d809      	bhi.n	80018e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	001a      	movs	r2, r3
 80018da:	231f      	movs	r3, #31
 80018dc:	401a      	ands	r2, r3
 80018de:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <__NVIC_EnableIRQ+0x30>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	4091      	lsls	r1, r2
 80018e4:	000a      	movs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	0002      	movs	r2, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b7f      	cmp	r3, #127	@ 0x7f
 8001908:	d828      	bhi.n	800195c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800190a:	4a2f      	ldr	r2, [pc, #188]	@ (80019c8 <__NVIC_SetPriority+0xd4>)
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	33c0      	adds	r3, #192	@ 0xc0
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	589b      	ldr	r3, [r3, r2]
 800191a:	1dfa      	adds	r2, r7, #7
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	0011      	movs	r1, r2
 8001920:	2203      	movs	r2, #3
 8001922:	400a      	ands	r2, r1
 8001924:	00d2      	lsls	r2, r2, #3
 8001926:	21ff      	movs	r1, #255	@ 0xff
 8001928:	4091      	lsls	r1, r2
 800192a:	000a      	movs	r2, r1
 800192c:	43d2      	mvns	r2, r2
 800192e:	401a      	ands	r2, r3
 8001930:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	019b      	lsls	r3, r3, #6
 8001936:	22ff      	movs	r2, #255	@ 0xff
 8001938:	401a      	ands	r2, r3
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	0018      	movs	r0, r3
 8001940:	2303      	movs	r3, #3
 8001942:	4003      	ands	r3, r0
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001948:	481f      	ldr	r0, [pc, #124]	@ (80019c8 <__NVIC_SetPriority+0xd4>)
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b25b      	sxtb	r3, r3
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	430a      	orrs	r2, r1
 8001954:	33c0      	adds	r3, #192	@ 0xc0
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800195a:	e031      	b.n	80019c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <__NVIC_SetPriority+0xd8>)
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	0019      	movs	r1, r3
 8001964:	230f      	movs	r3, #15
 8001966:	400b      	ands	r3, r1
 8001968:	3b08      	subs	r3, #8
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3306      	adds	r3, #6
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	18d3      	adds	r3, r2, r3
 8001972:	3304      	adds	r3, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1dfa      	adds	r2, r7, #7
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	0011      	movs	r1, r2
 800197c:	2203      	movs	r2, #3
 800197e:	400a      	ands	r2, r1
 8001980:	00d2      	lsls	r2, r2, #3
 8001982:	21ff      	movs	r1, #255	@ 0xff
 8001984:	4091      	lsls	r1, r2
 8001986:	000a      	movs	r2, r1
 8001988:	43d2      	mvns	r2, r2
 800198a:	401a      	ands	r2, r3
 800198c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	019b      	lsls	r3, r3, #6
 8001992:	22ff      	movs	r2, #255	@ 0xff
 8001994:	401a      	ands	r2, r3
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	0018      	movs	r0, r3
 800199c:	2303      	movs	r3, #3
 800199e:	4003      	ands	r3, r0
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a4:	4809      	ldr	r0, [pc, #36]	@ (80019cc <__NVIC_SetPriority+0xd8>)
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	001c      	movs	r4, r3
 80019ac:	230f      	movs	r3, #15
 80019ae:	4023      	ands	r3, r4
 80019b0:	3b08      	subs	r3, #8
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	430a      	orrs	r2, r1
 80019b6:	3306      	adds	r3, #6
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	18c3      	adds	r3, r0, r3
 80019bc:	3304      	adds	r3, #4
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	46c0      	nop			@ (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b003      	add	sp, #12
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	1e5a      	subs	r2, r3, #1
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	045b      	lsls	r3, r3, #17
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d301      	bcc.n	80019e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e4:	2301      	movs	r3, #1
 80019e6:	e010      	b.n	8001a0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <SysTick_Config+0x44>)
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	3a01      	subs	r2, #1
 80019ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f0:	2301      	movs	r3, #1
 80019f2:	425b      	negs	r3, r3
 80019f4:	2103      	movs	r1, #3
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff ff7c 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <SysTick_Config+0x44>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <SysTick_Config+0x44>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	210f      	movs	r1, #15
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	1c02      	adds	r2, r0, #0
 8001a28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	0011      	movs	r1, r2
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b004      	add	sp, #16
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	0002      	movs	r2, r0
 8001a4a:	1dfb      	adds	r3, r7, #7
 8001a4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff ff33 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff ffaf 	bl	80019d0 <SysTick_Config>
 8001a72:	0003      	movs	r3, r0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e050      	b.n	8001b30 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2225      	movs	r2, #37	@ 0x25
 8001a92:	5c9b      	ldrb	r3, [r3, r2]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d008      	beq.n	8001aac <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	@ 0x24
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e041      	b.n	8001b30 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	210e      	movs	r1, #14
 8001ab8:	438a      	bics	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	491c      	ldr	r1, [pc, #112]	@ (8001b38 <HAL_DMA_Abort+0xbc>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	438a      	bics	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001adc:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <HAL_DMA_Abort+0xc0>)
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	221c      	movs	r2, #28
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2201      	movs	r2, #1
 8001aea:	409a      	lsls	r2, r3
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <HAL_DMA_Abort+0xc0>)
 8001aee:	430a      	orrs	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001afa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00c      	beq.n	8001b1e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b0e:	490a      	ldr	r1, [pc, #40]	@ (8001b38 <HAL_DMA_Abort+0xbc>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2225      	movs	r2, #37	@ 0x25
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2224      	movs	r2, #36	@ 0x24
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	fffffeff 	.word	0xfffffeff
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2224      	movs	r2, #36	@ 0x24
 8001b54:	2100      	movs	r1, #0
 8001b56:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2224      	movs	r2, #36	@ 0x24
 8001b5c:	5c9b      	ldrb	r3, [r3, r2]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_DMA_Abort_IT+0x26>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e05e      	b.n	8001c24 <HAL_DMA_Abort_IT+0xe4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2224      	movs	r2, #36	@ 0x24
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2225      	movs	r2, #37	@ 0x25
 8001b72:	5c9b      	ldrb	r3, [r3, r2]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d007      	beq.n	8001b8a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b80:	230f      	movs	r3, #15
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e049      	b.n	8001c1e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	210e      	movs	r1, #14
 8001b96:	438a      	bics	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	438a      	bics	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb4:	491d      	ldr	r1, [pc, #116]	@ (8001c2c <HAL_DMA_Abort_IT+0xec>)
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <HAL_DMA_Abort_IT+0xf0>)
 8001bbc:	6859      	ldr	r1, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	221c      	movs	r2, #28
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <HAL_DMA_Abort_IT+0xf0>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bec:	490f      	ldr	r1, [pc, #60]	@ (8001c2c <HAL_DMA_Abort_IT+0xec>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001bfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2225      	movs	r2, #37	@ 0x25
 8001c00:	2101      	movs	r1, #1
 8001c02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2224      	movs	r2, #36	@ 0x24
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d004      	beq.n	8001c1e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	4798      	blx	r3
    }
  }
  return status;
 8001c1e:	230f      	movs	r3, #15
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	781b      	ldrb	r3, [r3, #0]
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	fffffeff 	.word	0xfffffeff
 8001c30:	40020000 	.word	0x40020000

08001c34 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c42:	e153      	b.n	8001eec <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4091      	lsls	r1, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d100      	bne.n	8001c5c <HAL_GPIO_Init+0x28>
 8001c5a:	e144      	b.n	8001ee6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x38>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b12      	cmp	r3, #18
 8001c6a:	d125      	bne.n	8001cb8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	58d3      	ldr	r3, [r2, r3]
 8001c78:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	4013      	ands	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	409a      	lsls	r2, r3
 8001c86:	0013      	movs	r3, r2
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	220f      	movs	r2, #15
 8001c96:	401a      	ands	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	0013      	movs	r3, r2
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	6979      	ldr	r1, [r7, #20]
 8001cb6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d00b      	beq.n	8001d0c <HAL_GPIO_Init+0xd8>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d007      	beq.n	8001d0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d00:	2b11      	cmp	r3, #17
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	d130      	bne.n	8001d6e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4013      	ands	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	0013      	movs	r3, r2
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d42:	2201      	movs	r2, #1
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	409a      	lsls	r2, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	2201      	movs	r2, #1
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d017      	beq.n	8001da6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	43da      	mvns	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	409a      	lsls	r2, r3
 8001d98:	0013      	movs	r3, r2
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	055b      	lsls	r3, r3, #21
 8001dae:	4013      	ands	r3, r2
 8001db0:	d100      	bne.n	8001db4 <HAL_GPIO_Init+0x180>
 8001db2:	e098      	b.n	8001ee6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001db4:	4a53      	ldr	r2, [pc, #332]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3318      	adds	r3, #24
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	589b      	ldr	r3, [r3, r2]
 8001dc0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	220f      	movs	r2, #15
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	23a0      	movs	r3, #160	@ 0xa0
 8001ddc:	05db      	lsls	r3, r3, #23
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x1e2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a48      	ldr	r2, [pc, #288]	@ (8001f08 <HAL_GPIO_Init+0x2d4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x1de>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a47      	ldr	r2, [pc, #284]	@ (8001f0c <HAL_GPIO_Init+0x2d8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x1da>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a46      	ldr	r2, [pc, #280]	@ (8001f10 <HAL_GPIO_Init+0x2dc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x1d6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a45      	ldr	r2, [pc, #276]	@ (8001f14 <HAL_GPIO_Init+0x2e0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x1d2>
 8001e02:	2305      	movs	r3, #5
 8001e04:	e008      	b.n	8001e18 <HAL_GPIO_Init+0x1e4>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x1e4>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e004      	b.n	8001e18 <HAL_GPIO_Init+0x1e4>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_Init+0x1e4>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x1e4>
 8001e16:	2300      	movs	r3, #0
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	00d2      	lsls	r2, r2, #3
 8001e20:	4093      	lsls	r3, r2
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e28:	4936      	ldr	r1, [pc, #216]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3318      	adds	r3, #24
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001e36:	4a33      	ldr	r2, [pc, #204]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	58d3      	ldr	r3, [r2, r3]
 8001e3c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43da      	mvns	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	4013      	ands	r3, r2
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001e5c:	4929      	ldr	r1, [pc, #164]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001e64:	4a27      	ldr	r2, [pc, #156]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e66:	2384      	movs	r3, #132	@ 0x84
 8001e68:	58d3      	ldr	r3, [r2, r3]
 8001e6a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	029b      	lsls	r3, r3, #10
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e8a:	491e      	ldr	r1, [pc, #120]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e8c:	2284      	movs	r2, #132	@ 0x84
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	035b      	lsls	r3, r3, #13
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	039b      	lsls	r3, r3, #14
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	40da      	lsrs	r2, r3
 8001ef4:	1e13      	subs	r3, r2, #0
 8001ef6:	d000      	beq.n	8001efa <HAL_GPIO_Init+0x2c6>
 8001ef8:	e6a4      	b.n	8001c44 <HAL_GPIO_Init+0x10>
  }
}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	46c0      	nop			@ (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b006      	add	sp, #24
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021800 	.word	0x40021800
 8001f08:	50000400 	.word	0x50000400
 8001f0c:	50000800 	.word	0x50000800
 8001f10:	50000c00 	.word	0x50000c00
 8001f14:	50001400 	.word	0x50001400

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	0008      	movs	r0, r1
 8001f22:	0011      	movs	r1, r2
 8001f24:	1cbb      	adds	r3, r7, #2
 8001f26:	1c02      	adds	r2, r0, #0
 8001f28:	801a      	strh	r2, [r3, #0]
 8001f2a:	1c7b      	adds	r3, r7, #1
 8001f2c:	1c0a      	adds	r2, r1, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f30:	1c7b      	adds	r3, r7, #1
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f38:	1cbb      	adds	r3, r7, #2
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f40:	e003      	b.n	8001f4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f42:	1cbb      	adds	r3, r7, #2
 8001f44:	881a      	ldrh	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e08f      	b.n	8002086 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2241      	movs	r2, #65	@ 0x41
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2240      	movs	r2, #64	@ 0x40
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7fe fb9d 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2241      	movs	r2, #65	@ 0x41
 8001f86:	2124      	movs	r1, #36	@ 0x24
 8001f88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	438a      	bics	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	493b      	ldr	r1, [pc, #236]	@ (8002090 <HAL_I2C_Init+0x13c>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4938      	ldr	r1, [pc, #224]	@ (8002094 <HAL_I2C_Init+0x140>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2180      	movs	r1, #128	@ 0x80
 8001fca:	0209      	lsls	r1, r1, #8
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	e007      	b.n	8001fe2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2184      	movs	r1, #132	@ 0x84
 8001fdc:	0209      	lsls	r1, r1, #8
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d109      	bne.n	8001ffe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2180      	movs	r1, #128	@ 0x80
 8001ff6:	0109      	lsls	r1, r1, #4
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	e007      	b.n	800200e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4923      	ldr	r1, [pc, #140]	@ (8002098 <HAL_I2C_Init+0x144>)
 800200a:	400a      	ands	r2, r1
 800200c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4920      	ldr	r1, [pc, #128]	@ (800209c <HAL_I2C_Init+0x148>)
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	491a      	ldr	r1, [pc, #104]	@ (8002094 <HAL_I2C_Init+0x140>)
 800202a:	400a      	ands	r2, r1
 800202c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	431a      	orrs	r2, r3
 8002038:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69d9      	ldr	r1, [r3, #28]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2101      	movs	r1, #1
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2241      	movs	r2, #65	@ 0x41
 8002072:	2120      	movs	r1, #32
 8002074:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2242      	movs	r2, #66	@ 0x42
 8002080:	2100      	movs	r1, #0
 8002082:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	f0ffffff 	.word	0xf0ffffff
 8002094:	ffff7fff 	.word	0xffff7fff
 8002098:	fffff7ff 	.word	0xfffff7ff
 800209c:	02008000 	.word	0x02008000

080020a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2241      	movs	r2, #65	@ 0x41
 80020ae:	5c9b      	ldrb	r3, [r3, r2]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d138      	bne.n	8002128 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2240      	movs	r2, #64	@ 0x40
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e032      	b.n	800212a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2240      	movs	r2, #64	@ 0x40
 80020c8:	2101      	movs	r1, #1
 80020ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2241      	movs	r2, #65	@ 0x41
 80020d0:	2124      	movs	r1, #36	@ 0x24
 80020d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	438a      	bics	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4911      	ldr	r1, [pc, #68]	@ (8002134 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2101      	movs	r1, #1
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2241      	movs	r2, #65	@ 0x41
 8002118:	2120      	movs	r1, #32
 800211a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2240      	movs	r2, #64	@ 0x40
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b002      	add	sp, #8
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	ffffefff 	.word	0xffffefff

08002138 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2241      	movs	r2, #65	@ 0x41
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	d139      	bne.n	80021c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2240      	movs	r2, #64	@ 0x40
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002158:	2302      	movs	r3, #2
 800215a:	e033      	b.n	80021c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2240      	movs	r2, #64	@ 0x40
 8002160:	2101      	movs	r1, #1
 8002162:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2241      	movs	r2, #65	@ 0x41
 8002168:	2124      	movs	r1, #36	@ 0x24
 800216a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	438a      	bics	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a11      	ldr	r2, [pc, #68]	@ (80021cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2241      	movs	r2, #65	@ 0x41
 80021b2:	2120      	movs	r1, #32
 80021b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2240      	movs	r2, #64	@ 0x40
 80021ba:	2100      	movs	r1, #0
 80021bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
  }
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b004      	add	sp, #16
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	fffff0ff 	.word	0xfffff0ff

080021d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1d0      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d100      	bne.n	80021ee <HAL_RCC_OscConfig+0x1e>
 80021ec:	e069      	b.n	80022c2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ee:	4bc8      	ldr	r3, [pc, #800]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2238      	movs	r2, #56	@ 0x38
 80021f4:	4013      	ands	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d15d      	bne.n	80022c2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1bc      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	025b      	lsls	r3, r3, #9
 8002212:	429a      	cmp	r2, r3
 8002214:	d107      	bne.n	8002226 <HAL_RCC_OscConfig+0x56>
 8002216:	4bbe      	ldr	r3, [pc, #760]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4bbd      	ldr	r3, [pc, #756]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	0249      	lsls	r1, r1, #9
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e020      	b.n	8002268 <HAL_RCC_OscConfig+0x98>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	23a0      	movs	r3, #160	@ 0xa0
 800222c:	02db      	lsls	r3, r3, #11
 800222e:	429a      	cmp	r2, r3
 8002230:	d10e      	bne.n	8002250 <HAL_RCC_OscConfig+0x80>
 8002232:	4bb7      	ldr	r3, [pc, #732]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4bb6      	ldr	r3, [pc, #728]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	02c9      	lsls	r1, r1, #11
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	4bb3      	ldr	r3, [pc, #716]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4bb2      	ldr	r3, [pc, #712]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002246:	2180      	movs	r1, #128	@ 0x80
 8002248:	0249      	lsls	r1, r1, #9
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0x98>
 8002250:	4baf      	ldr	r3, [pc, #700]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4bae      	ldr	r3, [pc, #696]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002256:	49af      	ldr	r1, [pc, #700]	@ (8002514 <HAL_RCC_OscConfig+0x344>)
 8002258:	400a      	ands	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	4bac      	ldr	r3, [pc, #688]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4bab      	ldr	r3, [pc, #684]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002262:	49ad      	ldr	r1, [pc, #692]	@ (8002518 <HAL_RCC_OscConfig+0x348>)
 8002264:	400a      	ands	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d014      	beq.n	800229a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fea2 	bl	8000fb8 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800227a:	f7fe fe9d 	bl	8000fb8 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	@ 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e17b      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228c:	4ba0      	ldr	r3, [pc, #640]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	4013      	ands	r3, r2
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0xaa>
 8002298:	e013      	b.n	80022c2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe fe8d 	bl	8000fb8 <HAL_GetTick>
 800229e:	0003      	movs	r3, r0
 80022a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80022a4:	f7fe fe88 	bl	8000fb8 <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e166      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b6:	4b96      	ldr	r3, [pc, #600]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	029b      	lsls	r3, r3, #10
 80022be:	4013      	ands	r3, r2
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2202      	movs	r2, #2
 80022c8:	4013      	ands	r3, r2
 80022ca:	d100      	bne.n	80022ce <HAL_RCC_OscConfig+0xfe>
 80022cc:	e086      	b.n	80023dc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ce:	4b90      	ldr	r3, [pc, #576]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2238      	movs	r2, #56	@ 0x38
 80022d4:	4013      	ands	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12f      	bne.n	800233e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e14c      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b89      	ldr	r3, [pc, #548]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a8b      	ldr	r2, [pc, #556]	@ (800251c <HAL_RCC_OscConfig+0x34c>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	4b85      	ldr	r3, [pc, #532]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d112      	bne.n	800232c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002306:	4b82      	ldr	r3, [pc, #520]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a85      	ldr	r2, [pc, #532]	@ (8002520 <HAL_RCC_OscConfig+0x350>)
 800230c:	4013      	ands	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	4b7e      	ldr	r3, [pc, #504]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800231a:	4b7d      	ldr	r3, [pc, #500]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0adb      	lsrs	r3, r3, #11
 8002320:	2207      	movs	r2, #7
 8002322:	4013      	ands	r3, r2
 8002324:	4a7f      	ldr	r2, [pc, #508]	@ (8002524 <HAL_RCC_OscConfig+0x354>)
 8002326:	40da      	lsrs	r2, r3
 8002328:	4b7f      	ldr	r3, [pc, #508]	@ (8002528 <HAL_RCC_OscConfig+0x358>)
 800232a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800232c:	4b7f      	ldr	r3, [pc, #508]	@ (800252c <HAL_RCC_OscConfig+0x35c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0018      	movs	r0, r3
 8002332:	f7fe fde5 	bl	8000f00 <HAL_InitTick>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d050      	beq.n	80023dc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e122      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d030      	beq.n	80023a8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002346:	4b72      	ldr	r3, [pc, #456]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a75      	ldr	r2, [pc, #468]	@ (8002520 <HAL_RCC_OscConfig+0x350>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	4b6e      	ldr	r3, [pc, #440]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800235a:	4b6d      	ldr	r3, [pc, #436]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b6c      	ldr	r3, [pc, #432]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002360:	2180      	movs	r1, #128	@ 0x80
 8002362:	0049      	lsls	r1, r1, #1
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fe26 	bl	8000fb8 <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002372:	f7fe fe21 	bl	8000fb8 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0ff      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	4b62      	ldr	r3, [pc, #392]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4013      	ands	r3, r2
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b5f      	ldr	r3, [pc, #380]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a61      	ldr	r2, [pc, #388]	@ (800251c <HAL_RCC_OscConfig+0x34c>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	021a      	lsls	r2, r3, #8
 80023a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	e019      	b.n	80023dc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80023a8:	4b59      	ldr	r3, [pc, #356]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b58      	ldr	r3, [pc, #352]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80023ae:	4960      	ldr	r1, [pc, #384]	@ (8002530 <HAL_RCC_OscConfig+0x360>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe00 	bl	8000fb8 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023be:	f7fe fdfb 	bl	8000fb8 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0d9      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4013      	ands	r3, r2
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	4013      	ands	r3, r2
 80023e4:	d042      	beq.n	800246c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80023e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2238      	movs	r2, #56	@ 0x38
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b18      	cmp	r3, #24
 80023f0:	d105      	bne.n	80023fe <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d138      	bne.n	800246c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0c2      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d019      	beq.n	800243a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002406:	4b42      	ldr	r3, [pc, #264]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002408:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800240a:	4b41      	ldr	r3, [pc, #260]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 800240c:	2101      	movs	r1, #1
 800240e:	430a      	orrs	r2, r1
 8002410:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fdd1 	bl	8000fb8 <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800241c:	f7fe fdcc 	bl	8000fb8 <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0aa      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800242e:	4b38      	ldr	r3, [pc, #224]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d0f1      	beq.n	800241c <HAL_RCC_OscConfig+0x24c>
 8002438:	e018      	b.n	800246c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800243a:	4b35      	ldr	r3, [pc, #212]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 800243c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800243e:	4b34      	ldr	r3, [pc, #208]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002440:	2101      	movs	r1, #1
 8002442:	438a      	bics	r2, r1
 8002444:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7fe fdb7 	bl	8000fb8 <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002450:	f7fe fdb2 	bl	8000fb8 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e090      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002462:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d1f1      	bne.n	8002450 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2204      	movs	r2, #4
 8002472:	4013      	ands	r3, r2
 8002474:	d100      	bne.n	8002478 <HAL_RCC_OscConfig+0x2a8>
 8002476:	e084      	b.n	8002582 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002478:	230f      	movs	r3, #15
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002480:	4b23      	ldr	r3, [pc, #140]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2238      	movs	r2, #56	@ 0x38
 8002486:	4013      	ands	r3, r2
 8002488:	2b20      	cmp	r3, #32
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d000      	beq.n	8002496 <HAL_RCC_OscConfig+0x2c6>
 8002494:	e075      	b.n	8002582 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e074      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x2e0>
 80024a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024a8:	2101      	movs	r1, #1
 80024aa:	430a      	orrs	r2, r1
 80024ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x31a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x302>
 80024b8:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024bc:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024be:	2104      	movs	r1, #4
 80024c0:	430a      	orrs	r2, r1
 80024c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024c8:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	430a      	orrs	r2, r1
 80024ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x31a>
 80024d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024d8:	2101      	movs	r1, #1
 80024da:	438a      	bics	r2, r1
 80024dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024de:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_RCC_OscConfig+0x340>)
 80024e4:	2104      	movs	r1, #4
 80024e6:	438a      	bics	r2, r1
 80024e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d028      	beq.n	8002544 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fd61 	bl	8000fb8 <HAL_GetTick>
 80024f6:	0003      	movs	r3, r0
 80024f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80024fa:	e01d      	b.n	8002538 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe fd5c 	bl	8000fb8 <HAL_GetTick>
 8002500:	0002      	movs	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <HAL_RCC_OscConfig+0x364>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d915      	bls.n	8002538 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e039      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
 8002510:	40021000 	.word	0x40021000
 8002514:	fffeffff 	.word	0xfffeffff
 8002518:	fffbffff 	.word	0xfffbffff
 800251c:	ffff80ff 	.word	0xffff80ff
 8002520:	ffffc7ff 	.word	0xffffc7ff
 8002524:	02dc6c00 	.word	0x02dc6c00
 8002528:	20000004 	.word	0x20000004
 800252c:	20000008 	.word	0x20000008
 8002530:	fffffeff 	.word	0xfffffeff
 8002534:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_RCC_OscConfig+0x3bc>)
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d0dc      	beq.n	80024fc <HAL_RCC_OscConfig+0x32c>
 8002542:	e013      	b.n	800256c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fd38 	bl	8000fb8 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800254c:	e009      	b.n	8002562 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fd33 	bl	8000fb8 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <HAL_RCC_OscConfig+0x3c0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e010      	b.n	8002584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_RCC_OscConfig+0x3bc>)
 8002564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002566:	2202      	movs	r2, #2
 8002568:	4013      	ands	r3, r2
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800256c:	230f      	movs	r3, #15
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b05      	ldr	r3, [pc, #20]	@ (800258c <HAL_RCC_OscConfig+0x3bc>)
 8002578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800257a:	4b04      	ldr	r3, [pc, #16]	@ (800258c <HAL_RCC_OscConfig+0x3bc>)
 800257c:	4905      	ldr	r1, [pc, #20]	@ (8002594 <HAL_RCC_OscConfig+0x3c4>)
 800257e:	400a      	ands	r2, r1
 8002580:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b006      	add	sp, #24
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	00001388 	.word	0x00001388
 8002594:	efffffff 	.word	0xefffffff

08002598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0e9      	b.n	8002780 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b76      	ldr	r3, [pc, #472]	@ (8002788 <HAL_RCC_ClockConfig+0x1f0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2207      	movs	r2, #7
 80025b2:	4013      	ands	r3, r2
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d91e      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b73      	ldr	r3, [pc, #460]	@ (8002788 <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2207      	movs	r2, #7
 80025c0:	4393      	bics	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	4b70      	ldr	r3, [pc, #448]	@ (8002788 <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fcf4 	bl	8000fb8 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025d4:	e009      	b.n	80025ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025d6:	f7fe fcef 	bl	8000fb8 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	4a6a      	ldr	r2, [pc, #424]	@ (800278c <HAL_RCC_ClockConfig+0x1f4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0ca      	b.n	8002780 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ea:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <HAL_RCC_ClockConfig+0x1f0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2207      	movs	r2, #7
 80025f0:	4013      	ands	r3, r2
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2202      	movs	r2, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	d017      	beq.n	8002632 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2204      	movs	r2, #4
 8002608:	4013      	ands	r3, r2
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800260c:	4b60      	ldr	r3, [pc, #384]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a60      	ldr	r2, [pc, #384]	@ (8002794 <HAL_RCC_ClockConfig+0x1fc>)
 8002612:	401a      	ands	r2, r3
 8002614:	4b5e      	ldr	r3, [pc, #376]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	21b0      	movs	r1, #176	@ 0xb0
 8002618:	0109      	lsls	r1, r1, #4
 800261a:	430a      	orrs	r2, r1
 800261c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261e:	4b5c      	ldr	r3, [pc, #368]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4a5d      	ldr	r2, [pc, #372]	@ (8002798 <HAL_RCC_ClockConfig+0x200>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	4b58      	ldr	r3, [pc, #352]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	d055      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800263c:	4b54      	ldr	r3, [pc, #336]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	221c      	movs	r2, #28
 8002642:	4393      	bics	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	4b51      	ldr	r3, [pc, #324]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002658:	4b4d      	ldr	r3, [pc, #308]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	4013      	ands	r3, r2
 8002662:	d11f      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e08b      	b.n	8002780 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002670:	4b47      	ldr	r3, [pc, #284]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4013      	ands	r3, r2
 800267a:	d113      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e07f      	b.n	8002780 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d106      	bne.n	8002696 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002688:	4b41      	ldr	r3, [pc, #260]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 800268a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268c:	2202      	movs	r2, #2
 800268e:	4013      	ands	r3, r2
 8002690:	d108      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e074      	b.n	8002780 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002696:	4b3e      	ldr	r3, [pc, #248]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e06d      	b.n	8002780 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2207      	movs	r2, #7
 80026aa:	4393      	bics	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b8:	f7fe fc7e 	bl	8000fb8 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c0:	e009      	b.n	80026d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80026c2:	f7fe fc79 	bl	8000fb8 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	4a2f      	ldr	r2, [pc, #188]	@ (800278c <HAL_RCC_ClockConfig+0x1f4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e054      	b.n	8002780 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2238      	movs	r2, #56	@ 0x38
 80026dc:	401a      	ands	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1ec      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e8:	4b27      	ldr	r3, [pc, #156]	@ (8002788 <HAL_RCC_ClockConfig+0x1f0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2207      	movs	r2, #7
 80026ee:	4013      	ands	r3, r2
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d21e      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b24      	ldr	r3, [pc, #144]	@ (8002788 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2207      	movs	r2, #7
 80026fc:	4393      	bics	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002708:	f7fe fc56 	bl	8000fb8 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002710:	e009      	b.n	8002726 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002712:	f7fe fc51 	bl	8000fb8 <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	4a1b      	ldr	r2, [pc, #108]	@ (800278c <HAL_RCC_ClockConfig+0x1f4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e02c      	b.n	8002780 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002726:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2207      	movs	r2, #7
 800272c:	4013      	ands	r3, r2
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d1ee      	bne.n	8002712 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2204      	movs	r2, #4
 800273a:	4013      	ands	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4a16      	ldr	r2, [pc, #88]	@ (800279c <HAL_RCC_ClockConfig+0x204>)
 8002744:	4013      	ands	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 800274e:	430a      	orrs	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002752:	f000 f82b 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8002756:	0001      	movs	r1, r0
 8002758:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_RCC_ClockConfig+0x1f8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	220f      	movs	r2, #15
 8002760:	401a      	ands	r2, r3
 8002762:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <HAL_RCC_ClockConfig+0x208>)
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	58d3      	ldr	r3, [r2, r3]
 8002768:	221f      	movs	r2, #31
 800276a:	4013      	ands	r3, r2
 800276c:	000a      	movs	r2, r1
 800276e:	40da      	lsrs	r2, r3
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <HAL_RCC_ClockConfig+0x20c>)
 8002772:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <HAL_RCC_ClockConfig+0x210>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0018      	movs	r0, r3
 800277a:	f7fe fbc1 	bl	8000f00 <HAL_InitTick>
 800277e:	0003      	movs	r3, r0
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b004      	add	sp, #16
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40022000 	.word	0x40022000
 800278c:	00001388 	.word	0x00001388
 8002790:	40021000 	.word	0x40021000
 8002794:	ffff84ff 	.word	0xffff84ff
 8002798:	fffff0ff 	.word	0xfffff0ff
 800279c:	ffff8fff 	.word	0xffff8fff
 80027a0:	08005aec 	.word	0x08005aec
 80027a4:	20000004 	.word	0x20000004
 80027a8:	20000008 	.word	0x20000008

080027ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x78>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2238      	movs	r2, #56	@ 0x38
 80027b8:	4013      	ands	r3, r2
 80027ba:	d10f      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x78>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0adb      	lsrs	r3, r3, #11
 80027c2:	2207      	movs	r2, #7
 80027c4:	4013      	ands	r3, r2
 80027c6:	2201      	movs	r2, #1
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	4815      	ldr	r0, [pc, #84]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x7c>)
 80027d2:	f7fd fc99 	bl	8000108 <__udivsi3>
 80027d6:	0003      	movs	r3, r0
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	e01e      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x78>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2238      	movs	r2, #56	@ 0x38
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d102      	bne.n	80027ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027e8:	4b10      	ldr	r3, [pc, #64]	@ (800282c <HAL_RCC_GetSysClockFreq+0x80>)
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	e015      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80027ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x78>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2238      	movs	r2, #56	@ 0x38
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d103      	bne.n	8002802 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	e00b      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x78>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2238      	movs	r2, #56	@ 0x38
 8002808:	4013      	ands	r3, r2
 800280a:	2b18      	cmp	r3, #24
 800280c:	d103      	bne.n	8002816 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800280e:	23fa      	movs	r3, #250	@ 0xfa
 8002810:	01db      	lsls	r3, r3, #7
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	e001      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800281a:	687b      	ldr	r3, [r7, #4]
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	02dc6c00 	.word	0x02dc6c00
 800282c:	00f42400 	.word	0x00f42400

08002830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b02      	ldr	r3, [pc, #8]	@ (8002840 <HAL_RCC_GetHCLKFreq+0x10>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002848:	f7ff fff2 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 800284c:	0001      	movs	r1, r0
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b1b      	lsrs	r3, r3, #12
 8002854:	2207      	movs	r2, #7
 8002856:	401a      	ands	r2, r3
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	58d3      	ldr	r3, [r2, r3]
 800285e:	221f      	movs	r2, #31
 8002860:	4013      	ands	r3, r2
 8002862:	40d9      	lsrs	r1, r3
 8002864:	000b      	movs	r3, r1
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08005b2c 	.word	0x08005b2c

08002874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800287c:	2313      	movs	r3, #19
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002884:	2312      	movs	r3, #18
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4013      	ands	r3, r2
 8002896:	d100      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002898:	e079      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289a:	2011      	movs	r0, #17
 800289c:	183b      	adds	r3, r7, r0
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a2:	4b64      	ldr	r3, [pc, #400]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	055b      	lsls	r3, r3, #21
 80028aa:	4013      	ands	r3, r2
 80028ac:	d110      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b61      	ldr	r3, [pc, #388]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028b2:	4b60      	ldr	r3, [pc, #384]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028b4:	2180      	movs	r1, #128	@ 0x80
 80028b6:	0549      	lsls	r1, r1, #21
 80028b8:	430a      	orrs	r2, r1
 80028ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	055b      	lsls	r3, r3, #21
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ca:	183b      	adds	r3, r7, r0
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80028d0:	4b58      	ldr	r3, [pc, #352]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028d4:	23c0      	movs	r3, #192	@ 0xc0
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d019      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d014      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80028ec:	4b51      	ldr	r3, [pc, #324]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	4a51      	ldr	r2, [pc, #324]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0249      	lsls	r1, r1, #9
 8002900:	430a      	orrs	r2, r1
 8002902:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002904:	4b4b      	ldr	r3, [pc, #300]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002906:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002908:	4b4a      	ldr	r3, [pc, #296]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800290a:	494c      	ldr	r1, [pc, #304]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800290c:	400a      	ands	r2, r1
 800290e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002910:	4b48      	ldr	r3, [pc, #288]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	d016      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fb4b 	bl	8000fb8 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002926:	e00c      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe fb46 	bl	8000fb8 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	4a43      	ldr	r2, [pc, #268]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d904      	bls.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002938:	2313      	movs	r3, #19
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	2203      	movs	r2, #3
 800293e:	701a      	strb	r2, [r3, #0]
          break;
 8002940:	e004      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002942:	4b3c      	ldr	r3, [pc, #240]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002946:	2202      	movs	r2, #2
 8002948:	4013      	ands	r3, r2
 800294a:	d0ed      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800294c:	2313      	movs	r3, #19
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002956:	4b37      	ldr	r3, [pc, #220]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	4a37      	ldr	r2, [pc, #220]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800295c:	4013      	ands	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	4b33      	ldr	r3, [pc, #204]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002966:	430a      	orrs	r2, r1
 8002968:	65da      	str	r2, [r3, #92]	@ 0x5c
 800296a:	e005      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	2312      	movs	r3, #18
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2213      	movs	r2, #19
 8002972:	18ba      	adds	r2, r7, r2
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002978:	2311      	movs	r3, #17
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002986:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002988:	492e      	ldr	r1, [pc, #184]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298a:	400a      	ands	r2, r1
 800298c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	4013      	ands	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002998:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	2203      	movs	r2, #3
 800299e:	4393      	bics	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2240      	movs	r2, #64	@ 0x40
 80029b2:	4013      	ands	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029bc:	4013      	ands	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	2380      	movs	r3, #128	@ 0x80
 80029d0:	01db      	lsls	r3, r3, #7
 80029d2:	4013      	ands	r3, r2
 80029d4:	d008      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d6:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	0899      	lsrs	r1, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	d009      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	4a14      	ldr	r2, [pc, #80]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da09      	bge.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002a10:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	22e0      	movs	r2, #224	@ 0xe0
 8002a16:	4393      	bics	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002a24:	2312      	movs	r3, #18
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b006      	add	sp, #24
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000
 8002a38:	fffffcff 	.word	0xfffffcff
 8002a3c:	fffeffff 	.word	0xfffeffff
 8002a40:	00001388 	.word	0x00001388
 8002a44:	efffffff 	.word	0xefffffff
 8002a48:	ffffcfff 	.word	0xffffcfff
 8002a4c:	ffff3fff 	.word	0xffff3fff

08002a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0a8      	b.n	8002bb4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	2382      	movs	r3, #130	@ 0x82
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d009      	beq.n	8002a8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	61da      	str	r2, [r3, #28]
 8002a7c:	e005      	b.n	8002a8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	225d      	movs	r2, #93	@ 0x5d
 8002a94:	5c9b      	ldrb	r3, [r3, r2]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	225c      	movs	r2, #92	@ 0x5c
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7fd ff30 	bl	800090c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	225d      	movs	r2, #93	@ 0x5d
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2140      	movs	r1, #64	@ 0x40
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	23e0      	movs	r3, #224	@ 0xe0
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d902      	bls.n	8002ad6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e002      	b.n	8002adc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	015b      	lsls	r3, r3, #5
 8002ada:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	23f0      	movs	r3, #240	@ 0xf0
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d008      	beq.n	8002afa <HAL_SPI_Init+0xaa>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	23e0      	movs	r3, #224	@ 0xe0
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d002      	beq.n	8002afa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	2382      	movs	r3, #130	@ 0x82
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	401a      	ands	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	2384      	movs	r3, #132	@ 0x84
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2102      	movs	r1, #2
 8002b16:	400b      	ands	r3, r1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	400b      	ands	r3, r1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6999      	ldr	r1, [r3, #24]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2138      	movs	r1, #56	@ 0x38
 8002b36:	400b      	ands	r3, r1
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	2180      	movs	r1, #128	@ 0x80
 8002b40:	400b      	ands	r3, r1
 8002b42:	431a      	orrs	r2, r3
 8002b44:	0011      	movs	r1, r2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	401a      	ands	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	2204      	movs	r2, #4
 8002b60:	401a      	ands	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	2110      	movs	r1, #16
 8002b68:	400b      	ands	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b70:	2108      	movs	r1, #8
 8002b72:	400b      	ands	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	23f0      	movs	r3, #240	@ 0xf0
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	400b      	ands	r3, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	0011      	movs	r1, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	015b      	lsls	r3, r3, #5
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4907      	ldr	r1, [pc, #28]	@ (8002bbc <HAL_SPI_Init+0x16c>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	225d      	movs	r2, #93	@ 0x5d
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b004      	add	sp, #16
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	fffff7ff 	.word	0xfffff7ff

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e04a      	b.n	8002c68 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223d      	movs	r2, #61	@ 0x3d
 8002bd6:	5c9b      	ldrb	r3, [r3, r2]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d107      	bne.n	8002bee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	223c      	movs	r2, #60	@ 0x3c
 8002be2:	2100      	movs	r1, #0
 8002be4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7fd ffc9 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	223d      	movs	r2, #61	@ 0x3d
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	0019      	movs	r1, r3
 8002c00:	0010      	movs	r0, r2
 8002c02:	f000 fb43 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2248      	movs	r2, #72	@ 0x48
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	223e      	movs	r2, #62	@ 0x3e
 8002c12:	2101      	movs	r1, #1
 8002c14:	5499      	strb	r1, [r3, r2]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223f      	movs	r2, #63	@ 0x3f
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	5499      	strb	r1, [r3, r2]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2240      	movs	r2, #64	@ 0x40
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2241      	movs	r2, #65	@ 0x41
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2242      	movs	r2, #66	@ 0x42
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2243      	movs	r2, #67	@ 0x43
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2244      	movs	r2, #68	@ 0x44
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2245      	movs	r2, #69	@ 0x45
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2246      	movs	r2, #70	@ 0x46
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2247      	movs	r2, #71	@ 0x47
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	223d      	movs	r2, #61	@ 0x3d
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e04a      	b.n	8002d18 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	223d      	movs	r2, #61	@ 0x3d
 8002c86:	5c9b      	ldrb	r3, [r3, r2]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	223c      	movs	r2, #60	@ 0x3c
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f841 	bl	8002d20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	223d      	movs	r2, #61	@ 0x3d
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	0019      	movs	r1, r3
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	f000 faeb 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2248      	movs	r2, #72	@ 0x48
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	223e      	movs	r2, #62	@ 0x3e
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	223f      	movs	r2, #63	@ 0x3f
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2240      	movs	r2, #64	@ 0x40
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2241      	movs	r2, #65	@ 0x41
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2242      	movs	r2, #66	@ 0x42
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2243      	movs	r2, #67	@ 0x43
 8002cea:	2101      	movs	r1, #1
 8002cec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2244      	movs	r2, #68	@ 0x44
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2245      	movs	r2, #69	@ 0x45
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2246      	movs	r2, #70	@ 0x46
 8002d02:	2101      	movs	r1, #1
 8002d04:	5499      	strb	r1, [r3, r2]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2247      	movs	r2, #71	@ 0x47
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	223d      	movs	r2, #61	@ 0x3d
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d28:	46c0      	nop			@ (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d108      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x22>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	223e      	movs	r2, #62	@ 0x3e
 8002d44:	5c9b      	ldrb	r3, [r3, r2]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	1e5a      	subs	r2, r3, #1
 8002d4c:	4193      	sbcs	r3, r2
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e037      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x92>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d108      	bne.n	8002d6a <HAL_TIM_PWM_Start+0x3a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	223f      	movs	r2, #63	@ 0x3f
 8002d5c:	5c9b      	ldrb	r3, [r3, r2]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	4193      	sbcs	r3, r2
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e02b      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x92>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d108      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x52>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2240      	movs	r2, #64	@ 0x40
 8002d74:	5c9b      	ldrb	r3, [r3, r2]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	4193      	sbcs	r3, r2
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e01f      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x92>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b0c      	cmp	r3, #12
 8002d86:	d108      	bne.n	8002d9a <HAL_TIM_PWM_Start+0x6a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2241      	movs	r2, #65	@ 0x41
 8002d8c:	5c9b      	ldrb	r3, [r3, r2]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	1e5a      	subs	r2, r3, #1
 8002d94:	4193      	sbcs	r3, r2
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	e013      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x92>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d108      	bne.n	8002db2 <HAL_TIM_PWM_Start+0x82>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2242      	movs	r2, #66	@ 0x42
 8002da4:	5c9b      	ldrb	r3, [r3, r2]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	1e5a      	subs	r2, r3, #1
 8002dac:	4193      	sbcs	r3, r2
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e007      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x92>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2243      	movs	r2, #67	@ 0x43
 8002db6:	5c9b      	ldrb	r3, [r3, r2]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	4193      	sbcs	r3, r2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07b      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0xaa>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	223e      	movs	r2, #62	@ 0x3e
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	5499      	strb	r1, [r3, r2]
 8002dd8:	e023      	b.n	8002e22 <HAL_TIM_PWM_Start+0xf2>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0xba>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223f      	movs	r2, #63	@ 0x3f
 8002de4:	2102      	movs	r1, #2
 8002de6:	5499      	strb	r1, [r3, r2]
 8002de8:	e01b      	b.n	8002e22 <HAL_TIM_PWM_Start+0xf2>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start+0xca>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2240      	movs	r2, #64	@ 0x40
 8002df4:	2102      	movs	r1, #2
 8002df6:	5499      	strb	r1, [r3, r2]
 8002df8:	e013      	b.n	8002e22 <HAL_TIM_PWM_Start+0xf2>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_PWM_Start+0xda>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2241      	movs	r2, #65	@ 0x41
 8002e04:	2102      	movs	r1, #2
 8002e06:	5499      	strb	r1, [r3, r2]
 8002e08:	e00b      	b.n	8002e22 <HAL_TIM_PWM_Start+0xf2>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Start+0xea>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2242      	movs	r2, #66	@ 0x42
 8002e14:	2102      	movs	r1, #2
 8002e16:	5499      	strb	r1, [r3, r2]
 8002e18:	e003      	b.n	8002e22 <HAL_TIM_PWM_Start+0xf2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2243      	movs	r2, #67	@ 0x43
 8002e1e:	2102      	movs	r1, #2
 8002e20:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fdd2 	bl	80039d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a25      	ldr	r2, [pc, #148]	@ (8002ecc <HAL_TIM_PWM_Start+0x19c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x11e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a24      	ldr	r2, [pc, #144]	@ (8002ed0 <HAL_TIM_PWM_Start+0x1a0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x11e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a22      	ldr	r2, [pc, #136]	@ (8002ed4 <HAL_TIM_PWM_Start+0x1a4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x122>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_TIM_PWM_Start+0x124>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	0209      	lsls	r1, r1, #8
 8002e66:	430a      	orrs	r2, r1
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ecc <HAL_TIM_PWM_Start+0x19c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x14e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a17      	ldr	r2, [pc, #92]	@ (8002ed8 <HAL_TIM_PWM_Start+0x1a8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d116      	bne.n	8002eac <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a15      	ldr	r2, [pc, #84]	@ (8002edc <HAL_TIM_PWM_Start+0x1ac>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b06      	cmp	r3, #6
 8002e8e:	d016      	beq.n	8002ebe <HAL_TIM_PWM_Start+0x18e>
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	025b      	lsls	r3, r3, #9
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d011      	beq.n	8002ebe <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	e008      	b.n	8002ebe <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800
 8002ed8:	40000400 	.word	0x40000400
 8002edc:	00010007 	.word	0x00010007

08002ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2317      	movs	r3, #23
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	223c      	movs	r2, #60	@ 0x3c
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0e5      	b.n	80030ce <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	223c      	movs	r2, #60	@ 0x3c
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b14      	cmp	r3, #20
 8002f0e:	d900      	bls.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002f10:	e0d1      	b.n	80030b6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	009a      	lsls	r2, r3, #2
 8002f16:	4b70      	ldr	r3, [pc, #448]	@ (80030d8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002f18:	18d3      	adds	r3, r2, r3
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	0011      	movs	r1, r2
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fa1c 	bl	8003364 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2108      	movs	r1, #8
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2104      	movs	r1, #4
 8002f48:	438a      	bics	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	619a      	str	r2, [r3, #24]
      break;
 8002f5e:	e0af      	b.n	80030c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	0011      	movs	r1, r2
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f000 fa7b 	bl	8003464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2180      	movs	r1, #128	@ 0x80
 8002f7a:	0109      	lsls	r1, r1, #4
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4954      	ldr	r1, [pc, #336]	@ (80030dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6999      	ldr	r1, [r3, #24]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	021a      	lsls	r2, r3, #8
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	619a      	str	r2, [r3, #24]
      break;
 8002fa4:	e08c      	b.n	80030c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	0011      	movs	r1, r2
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fad6 	bl	8003560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2108      	movs	r1, #8
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2104      	movs	r1, #4
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69d9      	ldr	r1, [r3, #28]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	61da      	str	r2, [r3, #28]
      break;
 8002fe6:	e06b      	b.n	80030c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 fb37 	bl	8003664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2180      	movs	r1, #128	@ 0x80
 8003002:	0109      	lsls	r1, r1, #4
 8003004:	430a      	orrs	r2, r1
 8003006:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4932      	ldr	r1, [pc, #200]	@ (80030dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003014:	400a      	ands	r2, r1
 8003016:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69d9      	ldr	r1, [r3, #28]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	021a      	lsls	r2, r3, #8
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	61da      	str	r2, [r3, #28]
      break;
 800302c:	e048      	b.n	80030c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	0011      	movs	r1, r2
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fb78 	bl	800372c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2108      	movs	r1, #8
 8003048:	430a      	orrs	r2, r1
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2104      	movs	r1, #4
 8003058:	438a      	bics	r2, r1
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800306e:	e027      	b.n	80030c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	0011      	movs	r1, r2
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fbb1 	bl	80037e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2180      	movs	r1, #128	@ 0x80
 800308a:	0109      	lsls	r1, r1, #4
 800308c:	430a      	orrs	r2, r1
 800308e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4910      	ldr	r1, [pc, #64]	@ (80030dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800309c:	400a      	ands	r2, r1
 800309e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80030b4:	e004      	b.n	80030c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80030b6:	2317      	movs	r3, #23
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
      break;
 80030be:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	223c      	movs	r2, #60	@ 0x3c
 80030c4:	2100      	movs	r1, #0
 80030c6:	5499      	strb	r1, [r3, r2]

  return status;
 80030c8:	2317      	movs	r3, #23
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781b      	ldrb	r3, [r3, #0]
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b006      	add	sp, #24
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	08005b4c 	.word	0x08005b4c
 80030dc:	fffffbff 	.word	0xfffffbff

080030e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	230f      	movs	r3, #15
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	223c      	movs	r2, #60	@ 0x3c
 80030f6:	5c9b      	ldrb	r3, [r3, r2]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_TIM_ConfigClockSource+0x20>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e0bc      	b.n	800327a <HAL_TIM_ConfigClockSource+0x19a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	223c      	movs	r2, #60	@ 0x3c
 8003104:	2101      	movs	r1, #1
 8003106:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	223d      	movs	r2, #61	@ 0x3d
 800310c:	2102      	movs	r1, #2
 800310e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4a5a      	ldr	r2, [pc, #360]	@ (8003284 <HAL_TIM_ConfigClockSource+0x1a4>)
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4a59      	ldr	r2, [pc, #356]	@ (8003288 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2280      	movs	r2, #128	@ 0x80
 8003136:	0192      	lsls	r2, r2, #6
 8003138:	4293      	cmp	r3, r2
 800313a:	d040      	beq.n	80031be <HAL_TIM_ConfigClockSource+0xde>
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	0192      	lsls	r2, r2, #6
 8003140:	4293      	cmp	r3, r2
 8003142:	d900      	bls.n	8003146 <HAL_TIM_ConfigClockSource+0x66>
 8003144:	e088      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	0152      	lsls	r2, r2, #5
 800314a:	4293      	cmp	r3, r2
 800314c:	d100      	bne.n	8003150 <HAL_TIM_ConfigClockSource+0x70>
 800314e:	e088      	b.n	8003262 <HAL_TIM_ConfigClockSource+0x182>
 8003150:	2280      	movs	r2, #128	@ 0x80
 8003152:	0152      	lsls	r2, r2, #5
 8003154:	4293      	cmp	r3, r2
 8003156:	d900      	bls.n	800315a <HAL_TIM_ConfigClockSource+0x7a>
 8003158:	e07e      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
 800315a:	2b70      	cmp	r3, #112	@ 0x70
 800315c:	d018      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0xb0>
 800315e:	d900      	bls.n	8003162 <HAL_TIM_ConfigClockSource+0x82>
 8003160:	e07a      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
 8003162:	2b60      	cmp	r3, #96	@ 0x60
 8003164:	d04f      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x126>
 8003166:	d900      	bls.n	800316a <HAL_TIM_ConfigClockSource+0x8a>
 8003168:	e076      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
 800316a:	2b50      	cmp	r3, #80	@ 0x50
 800316c:	d03b      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x106>
 800316e:	d900      	bls.n	8003172 <HAL_TIM_ConfigClockSource+0x92>
 8003170:	e072      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
 8003172:	2b40      	cmp	r3, #64	@ 0x40
 8003174:	d057      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x146>
 8003176:	d900      	bls.n	800317a <HAL_TIM_ConfigClockSource+0x9a>
 8003178:	e06e      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
 800317a:	2b30      	cmp	r3, #48	@ 0x30
 800317c:	d063      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x166>
 800317e:	d86b      	bhi.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
 8003180:	2b20      	cmp	r3, #32
 8003182:	d060      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x166>
 8003184:	d868      	bhi.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d05d      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x166>
 800318a:	2b10      	cmp	r3, #16
 800318c:	d05b      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x166>
 800318e:	e063      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031a0:	f000 fbf8 	bl	8003994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2277      	movs	r2, #119	@ 0x77
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	609a      	str	r2, [r3, #8]
      break;
 80031bc:	e052      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031ce:	f000 fbe1 	bl	8003994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2180      	movs	r1, #128	@ 0x80
 80031de:	01c9      	lsls	r1, r1, #7
 80031e0:	430a      	orrs	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]
      break;
 80031e4:	e03e      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f2:	001a      	movs	r2, r3
 80031f4:	f000 fb52 	bl	800389c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2150      	movs	r1, #80	@ 0x50
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 fbac 	bl	800395c <TIM_ITRx_SetConfig>
      break;
 8003204:	e02e      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003212:	001a      	movs	r2, r3
 8003214:	f000 fb70 	bl	80038f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2160      	movs	r1, #96	@ 0x60
 800321e:	0018      	movs	r0, r3
 8003220:	f000 fb9c 	bl	800395c <TIM_ITRx_SetConfig>
      break;
 8003224:	e01e      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003232:	001a      	movs	r2, r3
 8003234:	f000 fb32 	bl	800389c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2140      	movs	r1, #64	@ 0x40
 800323e:	0018      	movs	r0, r3
 8003240:	f000 fb8c 	bl	800395c <TIM_ITRx_SetConfig>
      break;
 8003244:	e00e      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0019      	movs	r1, r3
 8003250:	0010      	movs	r0, r2
 8003252:	f000 fb83 	bl	800395c <TIM_ITRx_SetConfig>
      break;
 8003256:	e005      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003258:	230f      	movs	r3, #15
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
      break;
 8003260:	e000      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003262:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	223d      	movs	r2, #61	@ 0x3d
 8003268:	2101      	movs	r1, #1
 800326a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	223c      	movs	r2, #60	@ 0x3c
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

  return status;
 8003274:	230f      	movs	r3, #15
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	ffceff88 	.word	0xffceff88
 8003288:	ffff00ff 	.word	0xffff00ff

0800328c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a2b      	ldr	r2, [pc, #172]	@ (800334c <TIM_Base_SetConfig+0xc0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x20>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003350 <TIM_Base_SetConfig+0xc4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2270      	movs	r2, #112	@ 0x70
 80032b0:	4393      	bics	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a22      	ldr	r2, [pc, #136]	@ (800334c <TIM_Base_SetConfig+0xc0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <TIM_Base_SetConfig+0x5a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <TIM_Base_SetConfig+0xc4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <TIM_Base_SetConfig+0x5a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a20      	ldr	r2, [pc, #128]	@ (8003354 <TIM_Base_SetConfig+0xc8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0x5a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003358 <TIM_Base_SetConfig+0xcc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0x5a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <TIM_Base_SetConfig+0xd0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003360 <TIM_Base_SetConfig+0xd4>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	4393      	bics	r3, r2
 80032fe:	001a      	movs	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a0a      	ldr	r2, [pc, #40]	@ (800334c <TIM_Base_SetConfig+0xc0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0xaa>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a0b      	ldr	r2, [pc, #44]	@ (8003358 <TIM_Base_SetConfig+0xcc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0xaa>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <TIM_Base_SetConfig+0xd0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d103      	bne.n	800333e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	615a      	str	r2, [r3, #20]
}
 8003344:	46c0      	nop			@ (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40002000 	.word	0x40002000
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800
 8003360:	fffffcff 	.word	0xfffffcff

08003364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	2201      	movs	r2, #1
 800337a:	4393      	bics	r3, r2
 800337c:	001a      	movs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a2e      	ldr	r2, [pc, #184]	@ (800344c <TIM_OC1_SetConfig+0xe8>)
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2203      	movs	r2, #3
 800339a:	4393      	bics	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2202      	movs	r2, #2
 80033ac:	4393      	bics	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a24      	ldr	r2, [pc, #144]	@ (8003450 <TIM_OC1_SetConfig+0xec>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d007      	beq.n	80033d2 <TIM_OC1_SetConfig+0x6e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a23      	ldr	r2, [pc, #140]	@ (8003454 <TIM_OC1_SetConfig+0xf0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d003      	beq.n	80033d2 <TIM_OC1_SetConfig+0x6e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a22      	ldr	r2, [pc, #136]	@ (8003458 <TIM_OC1_SetConfig+0xf4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10c      	bne.n	80033ec <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2208      	movs	r2, #8
 80033d6:	4393      	bics	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2204      	movs	r2, #4
 80033e8:	4393      	bics	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a18      	ldr	r2, [pc, #96]	@ (8003450 <TIM_OC1_SetConfig+0xec>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <TIM_OC1_SetConfig+0xa0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <TIM_OC1_SetConfig+0xf0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_OC1_SetConfig+0xa0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a16      	ldr	r2, [pc, #88]	@ (8003458 <TIM_OC1_SetConfig+0xf4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d111      	bne.n	8003428 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4a15      	ldr	r2, [pc, #84]	@ (800345c <TIM_OC1_SetConfig+0xf8>)
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4a14      	ldr	r2, [pc, #80]	@ (8003460 <TIM_OC1_SetConfig+0xfc>)
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	fffeff8f 	.word	0xfffeff8f
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40014400 	.word	0x40014400
 8003458:	40014800 	.word	0x40014800
 800345c:	fffffeff 	.word	0xfffffeff
 8003460:	fffffdff 	.word	0xfffffdff

08003464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	2210      	movs	r2, #16
 800347a:	4393      	bics	r3, r2
 800347c:	001a      	movs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a2c      	ldr	r2, [pc, #176]	@ (8003544 <TIM_OC2_SetConfig+0xe0>)
 8003492:	4013      	ands	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a2b      	ldr	r2, [pc, #172]	@ (8003548 <TIM_OC2_SetConfig+0xe4>)
 800349a:	4013      	ands	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2220      	movs	r2, #32
 80034ae:	4393      	bics	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a22      	ldr	r2, [pc, #136]	@ (800354c <TIM_OC2_SetConfig+0xe8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	4393      	bics	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2240      	movs	r2, #64	@ 0x40
 80034de:	4393      	bics	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a19      	ldr	r2, [pc, #100]	@ (800354c <TIM_OC2_SetConfig+0xe8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_OC2_SetConfig+0x96>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a18      	ldr	r2, [pc, #96]	@ (8003550 <TIM_OC2_SetConfig+0xec>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_OC2_SetConfig+0x96>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a17      	ldr	r2, [pc, #92]	@ (8003554 <TIM_OC2_SetConfig+0xf0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d113      	bne.n	8003522 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4a16      	ldr	r2, [pc, #88]	@ (8003558 <TIM_OC2_SetConfig+0xf4>)
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4a15      	ldr	r2, [pc, #84]	@ (800355c <TIM_OC2_SetConfig+0xf8>)
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	621a      	str	r2, [r3, #32]
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b006      	add	sp, #24
 8003542:	bd80      	pop	{r7, pc}
 8003544:	feff8fff 	.word	0xfeff8fff
 8003548:	fffffcff 	.word	0xfffffcff
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800
 8003558:	fffffbff 	.word	0xfffffbff
 800355c:	fffff7ff 	.word	0xfffff7ff

08003560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a31      	ldr	r2, [pc, #196]	@ (800363c <TIM_OC3_SetConfig+0xdc>)
 8003576:	401a      	ands	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a2d      	ldr	r2, [pc, #180]	@ (8003640 <TIM_OC3_SetConfig+0xe0>)
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2203      	movs	r2, #3
 8003594:	4393      	bics	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <TIM_OC3_SetConfig+0xe4>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a23      	ldr	r2, [pc, #140]	@ (8003648 <TIM_OC3_SetConfig+0xe8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10d      	bne.n	80035da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4a22      	ldr	r2, [pc, #136]	@ (800364c <TIM_OC3_SetConfig+0xec>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003650 <TIM_OC3_SetConfig+0xf0>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003648 <TIM_OC3_SetConfig+0xe8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <TIM_OC3_SetConfig+0x92>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <TIM_OC3_SetConfig+0xf4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_OC3_SetConfig+0x92>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003658 <TIM_OC3_SetConfig+0xf8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d113      	bne.n	800361a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4a19      	ldr	r2, [pc, #100]	@ (800365c <TIM_OC3_SetConfig+0xfc>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <TIM_OC3_SetConfig+0x100>)
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	46c0      	nop			@ (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b006      	add	sp, #24
 800363a:	bd80      	pop	{r7, pc}
 800363c:	fffffeff 	.word	0xfffffeff
 8003640:	fffeff8f 	.word	0xfffeff8f
 8003644:	fffffdff 	.word	0xfffffdff
 8003648:	40012c00 	.word	0x40012c00
 800364c:	fffff7ff 	.word	0xfffff7ff
 8003650:	fffffbff 	.word	0xfffffbff
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800
 800365c:	ffffefff 	.word	0xffffefff
 8003660:	ffffdfff 	.word	0xffffdfff

08003664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4a24      	ldr	r2, [pc, #144]	@ (800370c <TIM_OC4_SetConfig+0xa8>)
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a20      	ldr	r2, [pc, #128]	@ (8003710 <TIM_OC4_SetConfig+0xac>)
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a1f      	ldr	r2, [pc, #124]	@ (8003714 <TIM_OC4_SetConfig+0xb0>)
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <TIM_OC4_SetConfig+0xb4>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	031b      	lsls	r3, r3, #12
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a17      	ldr	r2, [pc, #92]	@ (800371c <TIM_OC4_SetConfig+0xb8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_OC4_SetConfig+0x70>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <TIM_OC4_SetConfig+0xbc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC4_SetConfig+0x70>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a15      	ldr	r2, [pc, #84]	@ (8003724 <TIM_OC4_SetConfig+0xc0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d109      	bne.n	80036e8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4a14      	ldr	r2, [pc, #80]	@ (8003728 <TIM_OC4_SetConfig+0xc4>)
 80036d8:	4013      	ands	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	ffffefff 	.word	0xffffefff
 8003710:	feff8fff 	.word	0xfeff8fff
 8003714:	fffffcff 	.word	0xfffffcff
 8003718:	ffffdfff 	.word	0xffffdfff
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	ffffbfff 	.word	0xffffbfff

0800372c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4a21      	ldr	r2, [pc, #132]	@ (80037c8 <TIM_OC5_SetConfig+0x9c>)
 8003742:	401a      	ands	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <TIM_OC5_SetConfig+0xa0>)
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <TIM_OC5_SetConfig+0xa4>)
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a15      	ldr	r2, [pc, #84]	@ (80037d4 <TIM_OC5_SetConfig+0xa8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_OC5_SetConfig+0x66>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a14      	ldr	r2, [pc, #80]	@ (80037d8 <TIM_OC5_SetConfig+0xac>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC5_SetConfig+0x66>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a13      	ldr	r2, [pc, #76]	@ (80037dc <TIM_OC5_SetConfig+0xb0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d109      	bne.n	80037a6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	4a0c      	ldr	r2, [pc, #48]	@ (80037c8 <TIM_OC5_SetConfig+0x9c>)
 8003796:	4013      	ands	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	46c0      	nop			@ (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b006      	add	sp, #24
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	fffeffff 	.word	0xfffeffff
 80037cc:	fffeff8f 	.word	0xfffeff8f
 80037d0:	fffdffff 	.word	0xfffdffff
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800

080037e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <TIM_OC6_SetConfig+0xa0>)
 80037f6:	401a      	ands	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <TIM_OC6_SetConfig+0xa4>)
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4a1a      	ldr	r2, [pc, #104]	@ (8003888 <TIM_OC6_SetConfig+0xa8>)
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	051b      	lsls	r3, r3, #20
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a16      	ldr	r2, [pc, #88]	@ (800388c <TIM_OC6_SetConfig+0xac>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d007      	beq.n	8003848 <TIM_OC6_SetConfig+0x68>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a15      	ldr	r2, [pc, #84]	@ (8003890 <TIM_OC6_SetConfig+0xb0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_OC6_SetConfig+0x68>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <TIM_OC6_SetConfig+0xb4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d109      	bne.n	800385c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4a13      	ldr	r2, [pc, #76]	@ (8003898 <TIM_OC6_SetConfig+0xb8>)
 800384c:	4013      	ands	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b006      	add	sp, #24
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	ffefffff 	.word	0xffefffff
 8003884:	feff8fff 	.word	0xfeff8fff
 8003888:	ffdfffff 	.word	0xffdfffff
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800
 8003898:	fffbffff 	.word	0xfffbffff

0800389c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	2201      	movs	r2, #1
 80038b4:	4393      	bics	r3, r2
 80038b6:	001a      	movs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	22f0      	movs	r2, #240	@ 0xf0
 80038c6:	4393      	bics	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	220a      	movs	r2, #10
 80038d8:	4393      	bics	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b006      	add	sp, #24
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	2210      	movs	r2, #16
 8003910:	4393      	bics	r3, r2
 8003912:	001a      	movs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <TIM_TI2_ConfigInputStage+0x60>)
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	031b      	lsls	r3, r3, #12
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	22a0      	movs	r2, #160	@ 0xa0
 8003934:	4393      	bics	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b006      	add	sp, #24
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	ffff0fff 	.word	0xffff0fff

0800395c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a08      	ldr	r2, [pc, #32]	@ (8003990 <TIM_ITRx_SetConfig+0x34>)
 8003970:	4013      	ands	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	2207      	movs	r2, #7
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	609a      	str	r2, [r3, #8]
}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b004      	add	sp, #16
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	ffcfff8f 	.word	0xffcfff8f

08003994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4a09      	ldr	r2, [pc, #36]	@ (80039d0 <TIM_ETR_SetConfig+0x3c>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	021a      	lsls	r2, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b006      	add	sp, #24
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	ffff00ff 	.word	0xffff00ff

080039d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	221f      	movs	r2, #31
 80039e4:	4013      	ands	r3, r2
 80039e6:	2201      	movs	r2, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	0013      	movs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	43d2      	mvns	r2, r2
 80039f6:	401a      	ands	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1a      	ldr	r2, [r3, #32]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	211f      	movs	r1, #31
 8003a04:	400b      	ands	r3, r1
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4099      	lsls	r1, r3
 8003a0a:	000b      	movs	r3, r1
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b006      	add	sp, #24
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	223c      	movs	r2, #60	@ 0x3c
 8003a2a:	5c9b      	ldrb	r3, [r3, r2]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e04a      	b.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	223c      	movs	r2, #60	@ 0x3c
 8003a38:	2101      	movs	r1, #1
 8003a3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	223d      	movs	r2, #61	@ 0x3d
 8003a40:	2102      	movs	r1, #2
 8003a42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d108      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2270      	movs	r2, #112	@ 0x70
 8003a74:	4393      	bics	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a11      	ldr	r2, [pc, #68]	@ (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a10      	ldr	r2, [pc, #64]	@ (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2280      	movs	r2, #128	@ 0x80
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	223d      	movs	r2, #61	@ 0x3d
 8003abc:	2101      	movs	r1, #1
 8003abe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	223c      	movs	r2, #60	@ 0x3c
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	ff0fffff 	.word	0xff0fffff
 8003adc:	40000400 	.word	0x40000400

08003ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e046      	b.n	8003b80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2288      	movs	r2, #136	@ 0x88
 8003af6:	589b      	ldr	r3, [r3, r2]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2284      	movs	r2, #132	@ 0x84
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7fd f918 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2288      	movs	r2, #136	@ 0x88
 8003b10:	2124      	movs	r1, #36	@ 0x24
 8003b12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2101      	movs	r1, #1
 8003b20:	438a      	bics	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 fde8 	bl	8004704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 fc66 	bl	8004408 <UART_SetConfig>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e01c      	b.n	8003b80 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	490d      	ldr	r1, [pc, #52]	@ (8003b88 <HAL_UART_Init+0xa8>)
 8003b52:	400a      	ands	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	212a      	movs	r1, #42	@ 0x2a
 8003b62:	438a      	bics	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2101      	movs	r1, #1
 8003b72:	430a      	orrs	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 fe77 	bl	800486c <UART_CheckIdleState>
 8003b7e:	0003      	movs	r3, r0
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	ffffb7ff 	.word	0xffffb7ff

08003b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	@ 0x28
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	1dbb      	adds	r3, r7, #6
 8003b9a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2288      	movs	r2, #136	@ 0x88
 8003ba0:	589b      	ldr	r3, [r3, r2]
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d000      	beq.n	8003ba8 <HAL_UART_Transmit+0x1c>
 8003ba6:	e090      	b.n	8003cca <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_UART_Transmit+0x2a>
 8003bae:	1dbb      	adds	r3, r7, #6
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e088      	b.n	8003ccc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	015b      	lsls	r3, r3, #5
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d109      	bne.n	8003bda <HAL_UART_Transmit+0x4e>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d001      	beq.n	8003bda <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e078      	b.n	8003ccc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2290      	movs	r2, #144	@ 0x90
 8003bde:	2100      	movs	r1, #0
 8003be0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2288      	movs	r2, #136	@ 0x88
 8003be6:	2121      	movs	r1, #33	@ 0x21
 8003be8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bea:	f7fd f9e5 	bl	8000fb8 <HAL_GetTick>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1dba      	adds	r2, r7, #6
 8003bf6:	2154      	movs	r1, #84	@ 0x54
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1dba      	adds	r2, r7, #6
 8003c00:	2156      	movs	r1, #86	@ 0x56
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	015b      	lsls	r3, r3, #5
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d108      	bne.n	8003c24 <HAL_UART_Transmit+0x98>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	e003      	b.n	8003c2c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c2c:	e030      	b.n	8003c90 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	0013      	movs	r3, r2
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2180      	movs	r1, #128	@ 0x80
 8003c3c:	f000 fec0 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 8003c40:	1e03      	subs	r3, r0, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2288      	movs	r2, #136	@ 0x88
 8003c48:	2120      	movs	r1, #32
 8003c4a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e03d      	b.n	8003ccc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	05d2      	lsls	r2, r2, #23
 8003c62:	0dd2      	lsrs	r2, r2, #23
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	3302      	adds	r3, #2
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	e007      	b.n	8003c7e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2256      	movs	r2, #86	@ 0x56
 8003c82:	5a9b      	ldrh	r3, [r3, r2]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b299      	uxth	r1, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2256      	movs	r2, #86	@ 0x56
 8003c8e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2256      	movs	r2, #86	@ 0x56
 8003c94:	5a9b      	ldrh	r3, [r3, r2]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1c8      	bne.n	8003c2e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2140      	movs	r1, #64	@ 0x40
 8003caa:	f000 fe89 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 8003cae:	1e03      	subs	r3, r0, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2288      	movs	r2, #136	@ 0x88
 8003cb6:	2120      	movs	r1, #32
 8003cb8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e006      	b.n	8003ccc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2288      	movs	r2, #136	@ 0x88
 8003cc2:	2120      	movs	r1, #32
 8003cc4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b008      	add	sp, #32
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	1dbb      	adds	r3, r7, #6
 8003ce0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	228c      	movs	r2, #140	@ 0x8c
 8003ce6:	589b      	ldr	r3, [r3, r2]
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d145      	bne.n	8003d78 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_UART_Receive_IT+0x26>
 8003cf2:	1dbb      	adds	r3, r7, #6
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e03d      	b.n	8003d7a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	2380      	movs	r3, #128	@ 0x80
 8003d04:	015b      	lsls	r3, r3, #5
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d109      	bne.n	8003d1e <HAL_UART_Receive_IT+0x4a>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2201      	movs	r2, #1
 8003d16:	4013      	ands	r3, r2
 8003d18:	d001      	beq.n	8003d1e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e02d      	b.n	8003d7a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	2380      	movs	r3, #128	@ 0x80
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d019      	beq.n	8003d66 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	613b      	str	r3, [r7, #16]
  return(result);
 8003d38:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2180      	movs	r1, #128	@ 0x80
 8003d54:	04c9      	lsls	r1, r1, #19
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d66:	1dbb      	adds	r3, r7, #6
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 fe90 	bl	8004a94 <UART_Start_Receive_IT>
 8003d74:	0003      	movs	r3, r0
 8003d76:	e000      	b.n	8003d7a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b008      	add	sp, #32
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d84:	b5b0      	push	{r4, r5, r7, lr}
 8003d86:	b0aa      	sub	sp, #168	@ 0xa8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	22a4      	movs	r2, #164	@ 0xa4
 8003d94:	18b9      	adds	r1, r7, r2
 8003d96:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	20a0      	movs	r0, #160	@ 0xa0
 8003da0:	1839      	adds	r1, r7, r0
 8003da2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	249c      	movs	r4, #156	@ 0x9c
 8003dac:	1939      	adds	r1, r7, r4
 8003dae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003db0:	0011      	movs	r1, r2
 8003db2:	18bb      	adds	r3, r7, r2
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4aa2      	ldr	r2, [pc, #648]	@ (8004040 <HAL_UART_IRQHandler+0x2bc>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	2298      	movs	r2, #152	@ 0x98
 8003dbc:	18bd      	adds	r5, r7, r2
 8003dbe:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003dc0:	18bb      	adds	r3, r7, r2
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11a      	bne.n	8003dfe <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d015      	beq.n	8003dfe <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003dd2:	183b      	adds	r3, r7, r0
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d105      	bne.n	8003de8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ddc:	193b      	adds	r3, r7, r4
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	055b      	lsls	r3, r3, #21
 8003de4:	4013      	ands	r3, r2
 8003de6:	d00a      	beq.n	8003dfe <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d100      	bne.n	8003df2 <HAL_UART_IRQHandler+0x6e>
 8003df0:	e2dc      	b.n	80043ac <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	0010      	movs	r0, r2
 8003dfa:	4798      	blx	r3
      }
      return;
 8003dfc:	e2d6      	b.n	80043ac <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003dfe:	2398      	movs	r3, #152	@ 0x98
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d100      	bne.n	8003e0a <HAL_UART_IRQHandler+0x86>
 8003e08:	e122      	b.n	8004050 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e0a:	239c      	movs	r3, #156	@ 0x9c
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a8c      	ldr	r2, [pc, #560]	@ (8004044 <HAL_UART_IRQHandler+0x2c0>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	d106      	bne.n	8003e24 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e16:	23a0      	movs	r3, #160	@ 0xa0
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a8a      	ldr	r2, [pc, #552]	@ (8004048 <HAL_UART_IRQHandler+0x2c4>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d100      	bne.n	8003e24 <HAL_UART_IRQHandler+0xa0>
 8003e22:	e115      	b.n	8004050 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e24:	23a4      	movs	r3, #164	@ 0xa4
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d012      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
 8003e30:	23a0      	movs	r3, #160	@ 0xa0
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	2380      	movs	r3, #128	@ 0x80
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d00b      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2201      	movs	r2, #1
 8003e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2290      	movs	r2, #144	@ 0x90
 8003e4a:	589b      	ldr	r3, [r3, r2]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2190      	movs	r1, #144	@ 0x90
 8003e54:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e56:	23a4      	movs	r3, #164	@ 0xa4
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d011      	beq.n	8003e86 <HAL_UART_IRQHandler+0x102>
 8003e62:	239c      	movs	r3, #156	@ 0x9c
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d00b      	beq.n	8003e86 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2202      	movs	r2, #2
 8003e74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2290      	movs	r2, #144	@ 0x90
 8003e7a:	589b      	ldr	r3, [r3, r2]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2190      	movs	r1, #144	@ 0x90
 8003e84:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e86:	23a4      	movs	r3, #164	@ 0xa4
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d011      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x132>
 8003e92:	239c      	movs	r3, #156	@ 0x9c
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2290      	movs	r2, #144	@ 0x90
 8003eaa:	589b      	ldr	r3, [r3, r2]
 8003eac:	2202      	movs	r2, #2
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2190      	movs	r1, #144	@ 0x90
 8003eb4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003eb6:	23a4      	movs	r3, #164	@ 0xa4
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d017      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ec2:	23a0      	movs	r3, #160	@ 0xa0
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d105      	bne.n	8003eda <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ece:	239c      	movs	r3, #156	@ 0x9c
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5b      	ldr	r2, [pc, #364]	@ (8004044 <HAL_UART_IRQHandler+0x2c0>)
 8003ed6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2208      	movs	r2, #8
 8003ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2290      	movs	r2, #144	@ 0x90
 8003ee6:	589b      	ldr	r3, [r3, r2]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2190      	movs	r1, #144	@ 0x90
 8003ef0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ef2:	23a4      	movs	r3, #164	@ 0xa4
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2380      	movs	r3, #128	@ 0x80
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	4013      	ands	r3, r2
 8003efe:	d013      	beq.n	8003f28 <HAL_UART_IRQHandler+0x1a4>
 8003f00:	23a0      	movs	r3, #160	@ 0xa0
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	2380      	movs	r3, #128	@ 0x80
 8003f08:	04db      	lsls	r3, r3, #19
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d00c      	beq.n	8003f28 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2280      	movs	r2, #128	@ 0x80
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2290      	movs	r2, #144	@ 0x90
 8003f1c:	589b      	ldr	r3, [r3, r2]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2190      	movs	r1, #144	@ 0x90
 8003f26:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2290      	movs	r2, #144	@ 0x90
 8003f2c:	589b      	ldr	r3, [r3, r2]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d100      	bne.n	8003f34 <HAL_UART_IRQHandler+0x1b0>
 8003f32:	e23d      	b.n	80043b0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f34:	23a4      	movs	r3, #164	@ 0xa4
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d015      	beq.n	8003f6c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f40:	23a0      	movs	r3, #160	@ 0xa0
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2220      	movs	r2, #32
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d106      	bne.n	8003f5a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f4c:	239c      	movs	r3, #156	@ 0x9c
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	055b      	lsls	r3, r3, #21
 8003f56:	4013      	ands	r3, r2
 8003f58:	d008      	beq.n	8003f6c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	0010      	movs	r0, r2
 8003f6a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2290      	movs	r2, #144	@ 0x90
 8003f70:	589b      	ldr	r3, [r3, r2]
 8003f72:	2194      	movs	r1, #148	@ 0x94
 8003f74:	187a      	adds	r2, r7, r1
 8003f76:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2240      	movs	r2, #64	@ 0x40
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d004      	beq.n	8003f90 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2228      	movs	r2, #40	@ 0x28
 8003f8c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f8e:	d04c      	beq.n	800402a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fea2 	bl	8004cdc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2240      	movs	r2, #64	@ 0x40
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d13c      	bne.n	8004020 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8003faa:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003fac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fae:	2090      	movs	r0, #144	@ 0x90
 8003fb0:	183a      	adds	r2, r7, r0
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2140      	movs	r1, #64	@ 0x40
 8003fcc:	438a      	bics	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	183b      	adds	r3, r7, r0
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2280      	movs	r2, #128	@ 0x80
 8003fe2:	589b      	ldr	r3, [r3, r2]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d016      	beq.n	8004016 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2280      	movs	r2, #128	@ 0x80
 8003fec:	589b      	ldr	r3, [r3, r2]
 8003fee:	4a17      	ldr	r2, [pc, #92]	@ (800404c <HAL_UART_IRQHandler+0x2c8>)
 8003ff0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2280      	movs	r2, #128	@ 0x80
 8003ff6:	589b      	ldr	r3, [r3, r2]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fd fda1 	bl	8001b40 <HAL_DMA_Abort_IT>
 8003ffe:	1e03      	subs	r3, r0, #0
 8004000:	d01c      	beq.n	800403c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2280      	movs	r2, #128	@ 0x80
 8004006:	589b      	ldr	r3, [r3, r2]
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	2180      	movs	r1, #128	@ 0x80
 800400e:	5852      	ldr	r2, [r2, r1]
 8004010:	0010      	movs	r0, r2
 8004012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004014:	e012      	b.n	800403c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f000 f9e1 	bl	80043e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401e:	e00d      	b.n	800403c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0018      	movs	r0, r3
 8004024:	f000 f9dc 	bl	80043e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	e008      	b.n	800403c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f000 f9d7 	bl	80043e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2290      	movs	r2, #144	@ 0x90
 8004036:	2100      	movs	r1, #0
 8004038:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800403a:	e1b9      	b.n	80043b0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	46c0      	nop			@ (mov r8, r8)
    return;
 800403e:	e1b7      	b.n	80043b0 <HAL_UART_IRQHandler+0x62c>
 8004040:	0000080f 	.word	0x0000080f
 8004044:	10000001 	.word	0x10000001
 8004048:	04000120 	.word	0x04000120
 800404c:	08004da9 	.word	0x08004da9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d000      	beq.n	800405a <HAL_UART_IRQHandler+0x2d6>
 8004058:	e13e      	b.n	80042d8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800405a:	23a4      	movs	r3, #164	@ 0xa4
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2210      	movs	r2, #16
 8004062:	4013      	ands	r3, r2
 8004064:	d100      	bne.n	8004068 <HAL_UART_IRQHandler+0x2e4>
 8004066:	e137      	b.n	80042d8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004068:	23a0      	movs	r3, #160	@ 0xa0
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2210      	movs	r2, #16
 8004070:	4013      	ands	r3, r2
 8004072:	d100      	bne.n	8004076 <HAL_UART_IRQHandler+0x2f2>
 8004074:	e130      	b.n	80042d8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2210      	movs	r2, #16
 800407c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2240      	movs	r2, #64	@ 0x40
 8004086:	4013      	ands	r3, r2
 8004088:	2b40      	cmp	r3, #64	@ 0x40
 800408a:	d000      	beq.n	800408e <HAL_UART_IRQHandler+0x30a>
 800408c:	e0a4      	b.n	80041d8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2280      	movs	r2, #128	@ 0x80
 8004092:	589b      	ldr	r3, [r3, r2]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	217e      	movs	r1, #126	@ 0x7e
 800409a:	187b      	adds	r3, r7, r1
 800409c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d100      	bne.n	80040a8 <HAL_UART_IRQHandler+0x324>
 80040a6:	e185      	b.n	80043b4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	225c      	movs	r2, #92	@ 0x5c
 80040ac:	5a9b      	ldrh	r3, [r3, r2]
 80040ae:	187a      	adds	r2, r7, r1
 80040b0:	8812      	ldrh	r2, [r2, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d300      	bcc.n	80040b8 <HAL_UART_IRQHandler+0x334>
 80040b6:	e17d      	b.n	80043b4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	187a      	adds	r2, r7, r1
 80040bc:	215e      	movs	r1, #94	@ 0x5e
 80040be:	8812      	ldrh	r2, [r2, #0]
 80040c0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2280      	movs	r2, #128	@ 0x80
 80040c6:	589b      	ldr	r3, [r3, r2]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2220      	movs	r2, #32
 80040ce:	4013      	ands	r3, r2
 80040d0:	d170      	bne.n	80041b4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040d2:	f3ef 8310 	mrs	r3, PRIMASK
 80040d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80040d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040dc:	2301      	movs	r3, #1
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	f383 8810 	msr	PRIMASK, r3
}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	49b4      	ldr	r1, [pc, #720]	@ (80043c4 <HAL_UART_IRQHandler+0x640>)
 80040f4:	400a      	ands	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	f383 8810 	msr	PRIMASK, r3
}
 8004102:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004104:	f3ef 8310 	mrs	r3, PRIMASK
 8004108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800410a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410c:	677b      	str	r3, [r7, #116]	@ 0x74
 800410e:	2301      	movs	r3, #1
 8004110:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2101      	movs	r1, #1
 8004126:	438a      	bics	r2, r1
 8004128:	609a      	str	r2, [r3, #8]
 800412a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800412c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004130:	f383 8810 	msr	PRIMASK, r3
}
 8004134:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004136:	f3ef 8310 	mrs	r3, PRIMASK
 800413a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800413c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004140:	2301      	movs	r3, #1
 8004142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004146:	f383 8810 	msr	PRIMASK, r3
}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2140      	movs	r1, #64	@ 0x40
 8004158:	438a      	bics	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800415e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004162:	f383 8810 	msr	PRIMASK, r3
}
 8004166:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	228c      	movs	r2, #140	@ 0x8c
 800416c:	2120      	movs	r1, #32
 800416e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004176:	f3ef 8310 	mrs	r3, PRIMASK
 800417a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800417c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004180:	2301      	movs	r3, #1
 8004182:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004186:	f383 8810 	msr	PRIMASK, r3
}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2110      	movs	r1, #16
 8004198:	438a      	bics	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800419e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	589b      	ldr	r3, [r3, r2]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7fd fc64 	bl	8001a7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	225c      	movs	r2, #92	@ 0x5c
 80041be:	5a9a      	ldrh	r2, [r3, r2]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	215e      	movs	r1, #94	@ 0x5e
 80041c4:	5a5b      	ldrh	r3, [r3, r1]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0011      	movs	r1, r2
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 f90d 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041d6:	e0ed      	b.n	80043b4 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	225c      	movs	r2, #92	@ 0x5c
 80041dc:	5a99      	ldrh	r1, [r3, r2]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	225e      	movs	r2, #94	@ 0x5e
 80041e2:	5a9b      	ldrh	r3, [r3, r2]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	208e      	movs	r0, #142	@ 0x8e
 80041e8:	183b      	adds	r3, r7, r0
 80041ea:	1a8a      	subs	r2, r1, r2
 80041ec:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	225e      	movs	r2, #94	@ 0x5e
 80041f2:	5a9b      	ldrh	r3, [r3, r2]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d100      	bne.n	80041fc <HAL_UART_IRQHandler+0x478>
 80041fa:	e0dd      	b.n	80043b8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80041fc:	183b      	adds	r3, r7, r0
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d100      	bne.n	8004206 <HAL_UART_IRQHandler+0x482>
 8004204:	e0d8      	b.n	80043b8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004206:	f3ef 8310 	mrs	r3, PRIMASK
 800420a:	60fb      	str	r3, [r7, #12]
  return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800420e:	2488      	movs	r4, #136	@ 0x88
 8004210:	193a      	adds	r2, r7, r4
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	2301      	movs	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f383 8810 	msr	PRIMASK, r3
}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4967      	ldr	r1, [pc, #412]	@ (80043c8 <HAL_UART_IRQHandler+0x644>)
 800422c:	400a      	ands	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	193b      	adds	r3, r7, r4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f383 8810 	msr	PRIMASK, r3
}
 800423c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800423e:	f3ef 8310 	mrs	r3, PRIMASK
 8004242:	61bb      	str	r3, [r7, #24]
  return(result);
 8004244:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004246:	2484      	movs	r4, #132	@ 0x84
 8004248:	193a      	adds	r2, r7, r4
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	2301      	movs	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	495a      	ldr	r1, [pc, #360]	@ (80043cc <HAL_UART_IRQHandler+0x648>)
 8004264:	400a      	ands	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	193b      	adds	r3, r7, r4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	228c      	movs	r2, #140	@ 0x8c
 800427a:	2120      	movs	r1, #32
 800427c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800428a:	f3ef 8310 	mrs	r3, PRIMASK
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004292:	2480      	movs	r4, #128	@ 0x80
 8004294:	193a      	adds	r2, r7, r4
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	2301      	movs	r3, #1
 800429a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	f383 8810 	msr	PRIMASK, r3
}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2110      	movs	r1, #16
 80042b0:	438a      	bics	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	193b      	adds	r3, r7, r4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042c8:	183b      	adds	r3, r7, r0
 80042ca:	881a      	ldrh	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	0011      	movs	r1, r2
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 f88d 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042d6:	e06f      	b.n	80043b8 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042d8:	23a4      	movs	r3, #164	@ 0xa4
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	035b      	lsls	r3, r3, #13
 80042e2:	4013      	ands	r3, r2
 80042e4:	d010      	beq.n	8004308 <HAL_UART_IRQHandler+0x584>
 80042e6:	239c      	movs	r3, #156	@ 0x9c
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	03db      	lsls	r3, r3, #15
 80042f0:	4013      	ands	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	0352      	lsls	r2, r2, #13
 80042fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0018      	movs	r0, r3
 8004302:	f001 fa89 	bl	8005818 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004306:	e05a      	b.n	80043be <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004308:	23a4      	movs	r3, #164	@ 0xa4
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2280      	movs	r2, #128	@ 0x80
 8004310:	4013      	ands	r3, r2
 8004312:	d016      	beq.n	8004342 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004314:	23a0      	movs	r3, #160	@ 0xa0
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2280      	movs	r2, #128	@ 0x80
 800431c:	4013      	ands	r3, r2
 800431e:	d106      	bne.n	800432e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004320:	239c      	movs	r3, #156	@ 0x9c
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	2380      	movs	r3, #128	@ 0x80
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	4013      	ands	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004332:	2b00      	cmp	r3, #0
 8004334:	d042      	beq.n	80043bc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	0010      	movs	r0, r2
 800433e:	4798      	blx	r3
    }
    return;
 8004340:	e03c      	b.n	80043bc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004342:	23a4      	movs	r3, #164	@ 0xa4
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2240      	movs	r2, #64	@ 0x40
 800434a:	4013      	ands	r3, r2
 800434c:	d00a      	beq.n	8004364 <HAL_UART_IRQHandler+0x5e0>
 800434e:	23a0      	movs	r3, #160	@ 0xa0
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2240      	movs	r2, #64	@ 0x40
 8004356:	4013      	ands	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	0018      	movs	r0, r3
 800435e:	f000 fd3a 	bl	8004dd6 <UART_EndTransmit_IT>
    return;
 8004362:	e02c      	b.n	80043be <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004364:	23a4      	movs	r3, #164	@ 0xa4
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	4013      	ands	r3, r2
 8004370:	d00b      	beq.n	800438a <HAL_UART_IRQHandler+0x606>
 8004372:	23a0      	movs	r3, #160	@ 0xa0
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	05db      	lsls	r3, r3, #23
 800437c:	4013      	ands	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0018      	movs	r0, r3
 8004384:	f001 fa58 	bl	8005838 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004388:	e019      	b.n	80043be <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800438a:	23a4      	movs	r3, #164	@ 0xa4
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	045b      	lsls	r3, r3, #17
 8004394:	4013      	ands	r3, r2
 8004396:	d012      	beq.n	80043be <HAL_UART_IRQHandler+0x63a>
 8004398:	23a0      	movs	r3, #160	@ 0xa0
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da0d      	bge.n	80043be <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f001 fa3f 	bl	8005828 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043aa:	e008      	b.n	80043be <HAL_UART_IRQHandler+0x63a>
      return;
 80043ac:	46c0      	nop			@ (mov r8, r8)
 80043ae:	e006      	b.n	80043be <HAL_UART_IRQHandler+0x63a>
    return;
 80043b0:	46c0      	nop			@ (mov r8, r8)
 80043b2:	e004      	b.n	80043be <HAL_UART_IRQHandler+0x63a>
      return;
 80043b4:	46c0      	nop			@ (mov r8, r8)
 80043b6:	e002      	b.n	80043be <HAL_UART_IRQHandler+0x63a>
      return;
 80043b8:	46c0      	nop			@ (mov r8, r8)
 80043ba:	e000      	b.n	80043be <HAL_UART_IRQHandler+0x63a>
    return;
 80043bc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80043be:	46bd      	mov	sp, r7
 80043c0:	b02a      	add	sp, #168	@ 0xa8
 80043c2:	bdb0      	pop	{r4, r5, r7, pc}
 80043c4:	fffffeff 	.word	0xfffffeff
 80043c8:	fffffedf 	.word	0xfffffedf
 80043cc:	effffffe 	.word	0xeffffffe

080043d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043d8:	46c0      	nop			@ (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b002      	add	sp, #8
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043e8:	46c0      	nop			@ (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	000a      	movs	r2, r1
 80043fa:	1cbb      	adds	r3, r7, #2
 80043fc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004410:	231e      	movs	r3, #30
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4aab      	ldr	r2, [pc, #684]	@ (80046e4 <UART_SetConfig+0x2dc>)
 8004438:	4013      	ands	r3, r2
 800443a:	0019      	movs	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4aa6      	ldr	r2, [pc, #664]	@ (80046e8 <UART_SetConfig+0x2e0>)
 800444e:	4013      	ands	r3, r2
 8004450:	0019      	movs	r1, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a9d      	ldr	r2, [pc, #628]	@ (80046ec <UART_SetConfig+0x2e4>)
 8004476:	4013      	ands	r3, r2
 8004478:	0019      	movs	r1, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	430a      	orrs	r2, r1
 8004482:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	220f      	movs	r2, #15
 800448c:	4393      	bics	r3, r2
 800448e:	0019      	movs	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a93      	ldr	r2, [pc, #588]	@ (80046f0 <UART_SetConfig+0x2e8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d127      	bne.n	80044f6 <UART_SetConfig+0xee>
 80044a6:	4b93      	ldr	r3, [pc, #588]	@ (80046f4 <UART_SetConfig+0x2ec>)
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	2203      	movs	r2, #3
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d017      	beq.n	80044e2 <UART_SetConfig+0xda>
 80044b2:	d81b      	bhi.n	80044ec <UART_SetConfig+0xe4>
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d00a      	beq.n	80044ce <UART_SetConfig+0xc6>
 80044b8:	d818      	bhi.n	80044ec <UART_SetConfig+0xe4>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <UART_SetConfig+0xbc>
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d00a      	beq.n	80044d8 <UART_SetConfig+0xd0>
 80044c2:	e013      	b.n	80044ec <UART_SetConfig+0xe4>
 80044c4:	231f      	movs	r3, #31
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e021      	b.n	8004512 <UART_SetConfig+0x10a>
 80044ce:	231f      	movs	r3, #31
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	2202      	movs	r2, #2
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e01c      	b.n	8004512 <UART_SetConfig+0x10a>
 80044d8:	231f      	movs	r3, #31
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	2204      	movs	r2, #4
 80044de:	701a      	strb	r2, [r3, #0]
 80044e0:	e017      	b.n	8004512 <UART_SetConfig+0x10a>
 80044e2:	231f      	movs	r3, #31
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	2208      	movs	r2, #8
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e012      	b.n	8004512 <UART_SetConfig+0x10a>
 80044ec:	231f      	movs	r3, #31
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	2210      	movs	r2, #16
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e00d      	b.n	8004512 <UART_SetConfig+0x10a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7f      	ldr	r2, [pc, #508]	@ (80046f8 <UART_SetConfig+0x2f0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d104      	bne.n	800450a <UART_SetConfig+0x102>
 8004500:	231f      	movs	r3, #31
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	2200      	movs	r2, #0
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e003      	b.n	8004512 <UART_SetConfig+0x10a>
 800450a:	231f      	movs	r3, #31
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	2210      	movs	r2, #16
 8004510:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	429a      	cmp	r2, r3
 800451c:	d000      	beq.n	8004520 <UART_SetConfig+0x118>
 800451e:	e06f      	b.n	8004600 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004520:	231f      	movs	r3, #31
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d01f      	beq.n	800456a <UART_SetConfig+0x162>
 800452a:	dc22      	bgt.n	8004572 <UART_SetConfig+0x16a>
 800452c:	2b04      	cmp	r3, #4
 800452e:	d017      	beq.n	8004560 <UART_SetConfig+0x158>
 8004530:	dc1f      	bgt.n	8004572 <UART_SetConfig+0x16a>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <UART_SetConfig+0x134>
 8004536:	2b02      	cmp	r3, #2
 8004538:	d005      	beq.n	8004546 <UART_SetConfig+0x13e>
 800453a:	e01a      	b.n	8004572 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7fe f982 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8004540:	0003      	movs	r3, r0
 8004542:	61bb      	str	r3, [r7, #24]
        break;
 8004544:	e01c      	b.n	8004580 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004546:	4b6b      	ldr	r3, [pc, #428]	@ (80046f4 <UART_SetConfig+0x2ec>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2207      	movs	r2, #7
 800454e:	4013      	ands	r3, r2
 8004550:	3301      	adds	r3, #1
 8004552:	0019      	movs	r1, r3
 8004554:	4869      	ldr	r0, [pc, #420]	@ (80046fc <UART_SetConfig+0x2f4>)
 8004556:	f7fb fdd7 	bl	8000108 <__udivsi3>
 800455a:	0003      	movs	r3, r0
 800455c:	61bb      	str	r3, [r7, #24]
        break;
 800455e:	e00f      	b.n	8004580 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004560:	f7fe f924 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8004564:	0003      	movs	r3, r0
 8004566:	61bb      	str	r3, [r7, #24]
        break;
 8004568:	e00a      	b.n	8004580 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456a:	2380      	movs	r3, #128	@ 0x80
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	61bb      	str	r3, [r7, #24]
        break;
 8004570:	e006      	b.n	8004580 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004576:	231e      	movs	r3, #30
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
        break;
 800457e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d100      	bne.n	8004588 <UART_SetConfig+0x180>
 8004586:	e097      	b.n	80046b8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800458c:	4b5c      	ldr	r3, [pc, #368]	@ (8004700 <UART_SetConfig+0x2f8>)
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	5ad3      	ldrh	r3, [r2, r3]
 8004592:	0019      	movs	r1, r3
 8004594:	69b8      	ldr	r0, [r7, #24]
 8004596:	f7fb fdb7 	bl	8000108 <__udivsi3>
 800459a:	0003      	movs	r3, r0
 800459c:	005a      	lsls	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	18d2      	adds	r2, r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	0019      	movs	r1, r3
 80045ac:	0010      	movs	r0, r2
 80045ae:	f7fb fdab 	bl	8000108 <__udivsi3>
 80045b2:	0003      	movs	r3, r0
 80045b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d91c      	bls.n	80045f6 <UART_SetConfig+0x1ee>
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	2380      	movs	r3, #128	@ 0x80
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d217      	bcs.n	80045f6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	200e      	movs	r0, #14
 80045cc:	183b      	adds	r3, r7, r0
 80045ce:	210f      	movs	r1, #15
 80045d0:	438a      	bics	r2, r1
 80045d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2207      	movs	r2, #7
 80045dc:	4013      	ands	r3, r2
 80045de:	b299      	uxth	r1, r3
 80045e0:	183b      	adds	r3, r7, r0
 80045e2:	183a      	adds	r2, r7, r0
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	183a      	adds	r2, r7, r0
 80045f0:	8812      	ldrh	r2, [r2, #0]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e060      	b.n	80046b8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80045f6:	231e      	movs	r3, #30
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e05b      	b.n	80046b8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004600:	231f      	movs	r3, #31
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b08      	cmp	r3, #8
 8004608:	d01f      	beq.n	800464a <UART_SetConfig+0x242>
 800460a:	dc22      	bgt.n	8004652 <UART_SetConfig+0x24a>
 800460c:	2b04      	cmp	r3, #4
 800460e:	d017      	beq.n	8004640 <UART_SetConfig+0x238>
 8004610:	dc1f      	bgt.n	8004652 <UART_SetConfig+0x24a>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <UART_SetConfig+0x214>
 8004616:	2b02      	cmp	r3, #2
 8004618:	d005      	beq.n	8004626 <UART_SetConfig+0x21e>
 800461a:	e01a      	b.n	8004652 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe f912 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8004620:	0003      	movs	r3, r0
 8004622:	61bb      	str	r3, [r7, #24]
        break;
 8004624:	e01c      	b.n	8004660 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004626:	4b33      	ldr	r3, [pc, #204]	@ (80046f4 <UART_SetConfig+0x2ec>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2207      	movs	r2, #7
 800462e:	4013      	ands	r3, r2
 8004630:	3301      	adds	r3, #1
 8004632:	0019      	movs	r1, r3
 8004634:	4831      	ldr	r0, [pc, #196]	@ (80046fc <UART_SetConfig+0x2f4>)
 8004636:	f7fb fd67 	bl	8000108 <__udivsi3>
 800463a:	0003      	movs	r3, r0
 800463c:	61bb      	str	r3, [r7, #24]
        break;
 800463e:	e00f      	b.n	8004660 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004640:	f7fe f8b4 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8004644:	0003      	movs	r3, r0
 8004646:	61bb      	str	r3, [r7, #24]
        break;
 8004648:	e00a      	b.n	8004660 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	61bb      	str	r3, [r7, #24]
        break;
 8004650:	e006      	b.n	8004660 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004656:	231e      	movs	r3, #30
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
        break;
 800465e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d028      	beq.n	80046b8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800466a:	4b25      	ldr	r3, [pc, #148]	@ (8004700 <UART_SetConfig+0x2f8>)
 800466c:	0052      	lsls	r2, r2, #1
 800466e:	5ad3      	ldrh	r3, [r2, r3]
 8004670:	0019      	movs	r1, r3
 8004672:	69b8      	ldr	r0, [r7, #24]
 8004674:	f7fb fd48 	bl	8000108 <__udivsi3>
 8004678:	0003      	movs	r3, r0
 800467a:	001a      	movs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	18d2      	adds	r2, r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	0019      	movs	r1, r3
 800468a:	0010      	movs	r0, r2
 800468c:	f7fb fd3c 	bl	8000108 <__udivsi3>
 8004690:	0003      	movs	r3, r0
 8004692:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b0f      	cmp	r3, #15
 8004698:	d90a      	bls.n	80046b0 <UART_SetConfig+0x2a8>
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	025b      	lsls	r3, r3, #9
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d205      	bcs.n	80046b0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	e003      	b.n	80046b8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80046b0:	231e      	movs	r3, #30
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	226a      	movs	r2, #106	@ 0x6a
 80046bc:	2101      	movs	r1, #1
 80046be:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2268      	movs	r2, #104	@ 0x68
 80046c4:	2101      	movs	r1, #1
 80046c6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046d4:	231e      	movs	r3, #30
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	781b      	ldrb	r3, [r3, #0]
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b008      	add	sp, #32
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	cfff69f3 	.word	0xcfff69f3
 80046e8:	ffffcfff 	.word	0xffffcfff
 80046ec:	11fff4ff 	.word	0x11fff4ff
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40004400 	.word	0x40004400
 80046fc:	02dc6c00 	.word	0x02dc6c00
 8004700:	08005ba0 	.word	0x08005ba0

08004704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	2208      	movs	r2, #8
 8004712:	4013      	ands	r3, r2
 8004714:	d00b      	beq.n	800472e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a4a      	ldr	r2, [pc, #296]	@ (8004848 <UART_AdvFeatureConfig+0x144>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	2201      	movs	r2, #1
 8004734:	4013      	ands	r3, r2
 8004736:	d00b      	beq.n	8004750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4a43      	ldr	r2, [pc, #268]	@ (800484c <UART_AdvFeatureConfig+0x148>)
 8004740:	4013      	ands	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	2202      	movs	r2, #2
 8004756:	4013      	ands	r3, r2
 8004758:	d00b      	beq.n	8004772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a3b      	ldr	r2, [pc, #236]	@ (8004850 <UART_AdvFeatureConfig+0x14c>)
 8004762:	4013      	ands	r3, r2
 8004764:	0019      	movs	r1, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	2204      	movs	r2, #4
 8004778:	4013      	ands	r3, r2
 800477a:	d00b      	beq.n	8004794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4a34      	ldr	r2, [pc, #208]	@ (8004854 <UART_AdvFeatureConfig+0x150>)
 8004784:	4013      	ands	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	2210      	movs	r2, #16
 800479a:	4013      	ands	r3, r2
 800479c:	d00b      	beq.n	80047b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004858 <UART_AdvFeatureConfig+0x154>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	0019      	movs	r1, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	2220      	movs	r2, #32
 80047bc:	4013      	ands	r3, r2
 80047be:	d00b      	beq.n	80047d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	4a25      	ldr	r2, [pc, #148]	@ (800485c <UART_AdvFeatureConfig+0x158>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	2240      	movs	r2, #64	@ 0x40
 80047de:	4013      	ands	r3, r2
 80047e0:	d01d      	beq.n	800481e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004860 <UART_AdvFeatureConfig+0x15c>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047fe:	2380      	movs	r3, #128	@ 0x80
 8004800:	035b      	lsls	r3, r3, #13
 8004802:	429a      	cmp	r2, r3
 8004804:	d10b      	bne.n	800481e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a15      	ldr	r2, [pc, #84]	@ (8004864 <UART_AdvFeatureConfig+0x160>)
 800480e:	4013      	ands	r3, r2
 8004810:	0019      	movs	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	2280      	movs	r2, #128	@ 0x80
 8004824:	4013      	ands	r3, r2
 8004826:	d00b      	beq.n	8004840 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a0e      	ldr	r2, [pc, #56]	@ (8004868 <UART_AdvFeatureConfig+0x164>)
 8004830:	4013      	ands	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }
}
 8004840:	46c0      	nop			@ (mov r8, r8)
 8004842:	46bd      	mov	sp, r7
 8004844:	b002      	add	sp, #8
 8004846:	bd80      	pop	{r7, pc}
 8004848:	ffff7fff 	.word	0xffff7fff
 800484c:	fffdffff 	.word	0xfffdffff
 8004850:	fffeffff 	.word	0xfffeffff
 8004854:	fffbffff 	.word	0xfffbffff
 8004858:	ffffefff 	.word	0xffffefff
 800485c:	ffffdfff 	.word	0xffffdfff
 8004860:	ffefffff 	.word	0xffefffff
 8004864:	ff9fffff 	.word	0xff9fffff
 8004868:	fff7ffff 	.word	0xfff7ffff

0800486c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b092      	sub	sp, #72	@ 0x48
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2290      	movs	r2, #144	@ 0x90
 8004878:	2100      	movs	r1, #0
 800487a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800487c:	f7fc fb9c 	bl	8000fb8 <HAL_GetTick>
 8004880:	0003      	movs	r3, r0
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2208      	movs	r2, #8
 800488c:	4013      	ands	r3, r2
 800488e:	2b08      	cmp	r3, #8
 8004890:	d12d      	bne.n	80048ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004894:	2280      	movs	r2, #128	@ 0x80
 8004896:	0391      	lsls	r1, r2, #14
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4a47      	ldr	r2, [pc, #284]	@ (80049b8 <UART_CheckIdleState+0x14c>)
 800489c:	9200      	str	r2, [sp, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	f000 f88e 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d022      	beq.n	80048ee <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048a8:	f3ef 8310 	mrs	r3, PRIMASK
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048b2:	2301      	movs	r3, #1
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			@ (mov r8, r8)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2180      	movs	r1, #128	@ 0x80
 80048ca:	438a      	bics	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2288      	movs	r2, #136	@ 0x88
 80048de:	2120      	movs	r1, #32
 80048e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2284      	movs	r2, #132	@ 0x84
 80048e6:	2100      	movs	r1, #0
 80048e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e060      	b.n	80049b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2204      	movs	r2, #4
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d146      	bne.n	800498a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fe:	2280      	movs	r2, #128	@ 0x80
 8004900:	03d1      	lsls	r1, r2, #15
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <UART_CheckIdleState+0x14c>)
 8004906:	9200      	str	r2, [sp, #0]
 8004908:	2200      	movs	r2, #0
 800490a:	f000 f859 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 800490e:	1e03      	subs	r3, r0, #0
 8004910:	d03b      	beq.n	800498a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004912:	f3ef 8310 	mrs	r3, PRIMASK
 8004916:	60fb      	str	r3, [r7, #12]
  return(result);
 8004918:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800491a:	637b      	str	r3, [r7, #52]	@ 0x34
 800491c:	2301      	movs	r3, #1
 800491e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f383 8810 	msr	PRIMASK, r3
}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4922      	ldr	r1, [pc, #136]	@ (80049bc <UART_CheckIdleState+0x150>)
 8004934:	400a      	ands	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f383 8810 	msr	PRIMASK, r3
}
 8004942:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004944:	f3ef 8310 	mrs	r3, PRIMASK
 8004948:	61bb      	str	r3, [r7, #24]
  return(result);
 800494a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494c:	633b      	str	r3, [r7, #48]	@ 0x30
 800494e:	2301      	movs	r3, #1
 8004950:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f383 8810 	msr	PRIMASK, r3
}
 8004958:	46c0      	nop			@ (mov r8, r8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2101      	movs	r1, #1
 8004966:	438a      	bics	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	f383 8810 	msr	PRIMASK, r3
}
 8004974:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	228c      	movs	r2, #140	@ 0x8c
 800497a:	2120      	movs	r1, #32
 800497c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2284      	movs	r2, #132	@ 0x84
 8004982:	2100      	movs	r1, #0
 8004984:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e012      	b.n	80049b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2288      	movs	r2, #136	@ 0x88
 800498e:	2120      	movs	r1, #32
 8004990:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	228c      	movs	r2, #140	@ 0x8c
 8004996:	2120      	movs	r1, #32
 8004998:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2284      	movs	r2, #132	@ 0x84
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b010      	add	sp, #64	@ 0x40
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	01ffffff 	.word	0x01ffffff
 80049bc:	fffffedf 	.word	0xfffffedf

080049c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	1dfb      	adds	r3, r7, #7
 80049ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d0:	e04b      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	3301      	adds	r3, #1
 80049d6:	d048      	beq.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d8:	f7fc faee 	bl	8000fb8 <HAL_GetTick>
 80049dc:	0002      	movs	r2, r0
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d302      	bcc.n	80049ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e04b      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2204      	movs	r2, #4
 80049fa:	4013      	ands	r3, r2
 80049fc:	d035      	beq.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	2208      	movs	r2, #8
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d111      	bne.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2208      	movs	r2, #8
 8004a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	0018      	movs	r0, r3
 8004a18:	f000 f960 	bl	8004cdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2290      	movs	r2, #144	@ 0x90
 8004a20:	2108      	movs	r1, #8
 8004a22:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2284      	movs	r2, #132	@ 0x84
 8004a28:	2100      	movs	r1, #0
 8004a2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e02c      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	2380      	movs	r3, #128	@ 0x80
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	2380      	movs	r3, #128	@ 0x80
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d112      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2280      	movs	r2, #128	@ 0x80
 8004a4a:	0112      	lsls	r2, r2, #4
 8004a4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 f943 	bl	8004cdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2290      	movs	r2, #144	@ 0x90
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2284      	movs	r2, #132	@ 0x84
 8004a62:	2100      	movs	r1, #0
 8004a64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e00f      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	4013      	ands	r3, r2
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	425a      	negs	r2, r3
 8004a7a:	4153      	adcs	r3, r2
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	001a      	movs	r2, r3
 8004a80:	1dfb      	adds	r3, r7, #7
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d0a4      	beq.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b004      	add	sp, #16
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b098      	sub	sp, #96	@ 0x60
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	1dbb      	adds	r3, r7, #6
 8004aa0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1dba      	adds	r2, r7, #6
 8004aac:	215c      	movs	r1, #92	@ 0x5c
 8004aae:	8812      	ldrh	r2, [r2, #0]
 8004ab0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1dba      	adds	r2, r7, #6
 8004ab6:	215e      	movs	r1, #94	@ 0x5e
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	2380      	movs	r3, #128	@ 0x80
 8004ac8:	015b      	lsls	r3, r3, #5
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d10d      	bne.n	8004aea <UART_Start_Receive_IT+0x56>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <UART_Start_Receive_IT+0x4c>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2260      	movs	r2, #96	@ 0x60
 8004ada:	497b      	ldr	r1, [pc, #492]	@ (8004cc8 <UART_Start_Receive_IT+0x234>)
 8004adc:	5299      	strh	r1, [r3, r2]
 8004ade:	e02e      	b.n	8004b3e <UART_Start_Receive_IT+0xaa>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2260      	movs	r2, #96	@ 0x60
 8004ae4:	21ff      	movs	r1, #255	@ 0xff
 8004ae6:	5299      	strh	r1, [r3, r2]
 8004ae8:	e029      	b.n	8004b3e <UART_Start_Receive_IT+0xaa>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10d      	bne.n	8004b0e <UART_Start_Receive_IT+0x7a>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <UART_Start_Receive_IT+0x70>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2260      	movs	r2, #96	@ 0x60
 8004afe:	21ff      	movs	r1, #255	@ 0xff
 8004b00:	5299      	strh	r1, [r3, r2]
 8004b02:	e01c      	b.n	8004b3e <UART_Start_Receive_IT+0xaa>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2260      	movs	r2, #96	@ 0x60
 8004b08:	217f      	movs	r1, #127	@ 0x7f
 8004b0a:	5299      	strh	r1, [r3, r2]
 8004b0c:	e017      	b.n	8004b3e <UART_Start_Receive_IT+0xaa>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	055b      	lsls	r3, r3, #21
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10d      	bne.n	8004b36 <UART_Start_Receive_IT+0xa2>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <UART_Start_Receive_IT+0x98>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2260      	movs	r2, #96	@ 0x60
 8004b26:	217f      	movs	r1, #127	@ 0x7f
 8004b28:	5299      	strh	r1, [r3, r2]
 8004b2a:	e008      	b.n	8004b3e <UART_Start_Receive_IT+0xaa>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2260      	movs	r2, #96	@ 0x60
 8004b30:	213f      	movs	r1, #63	@ 0x3f
 8004b32:	5299      	strh	r1, [r3, r2]
 8004b34:	e003      	b.n	8004b3e <UART_Start_Receive_IT+0xaa>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2260      	movs	r2, #96	@ 0x60
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2290      	movs	r2, #144	@ 0x90
 8004b42:	2100      	movs	r1, #0
 8004b44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	228c      	movs	r2, #140	@ 0x8c
 8004b4a:	2122      	movs	r1, #34	@ 0x22
 8004b4c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b52:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b58:	2301      	movs	r3, #1
 8004b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b5e:	f383 8810 	msr	PRIMASK, r3
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2101      	movs	r1, #1
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b7a:	f383 8810 	msr	PRIMASK, r3
}
 8004b7e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b84:	2380      	movs	r3, #128	@ 0x80
 8004b86:	059b      	lsls	r3, r3, #22
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d150      	bne.n	8004c2e <UART_Start_Receive_IT+0x19a>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2268      	movs	r2, #104	@ 0x68
 8004b90:	5a9b      	ldrh	r3, [r3, r2]
 8004b92:	1dba      	adds	r2, r7, #6
 8004b94:	8812      	ldrh	r2, [r2, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d349      	bcc.n	8004c2e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	2380      	movs	r3, #128	@ 0x80
 8004ba0:	015b      	lsls	r3, r3, #5
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d107      	bne.n	8004bb6 <UART_Start_Receive_IT+0x122>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a46      	ldr	r2, [pc, #280]	@ (8004ccc <UART_Start_Receive_IT+0x238>)
 8004bb2:	675a      	str	r2, [r3, #116]	@ 0x74
 8004bb4:	e002      	b.n	8004bbc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a45      	ldr	r2, [pc, #276]	@ (8004cd0 <UART_Start_Receive_IT+0x23c>)
 8004bba:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d019      	beq.n	8004bf8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bce:	2301      	movs	r3, #1
 8004bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			@ (mov r8, r8)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2180      	movs	r1, #128	@ 0x80
 8004be6:	0049      	lsls	r1, r1, #1
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf2:	f383 8810 	msr	PRIMASK, r3
}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c02:	2301      	movs	r3, #1
 8004c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c08:	f383 8810 	msr	PRIMASK, r3
}
 8004c0c:	46c0      	nop			@ (mov r8, r8)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2180      	movs	r1, #128	@ 0x80
 8004c1a:	0549      	lsls	r1, r1, #21
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c22:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	e047      	b.n	8004cbe <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	015b      	lsls	r3, r3, #5
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d107      	bne.n	8004c4a <UART_Start_Receive_IT+0x1b6>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a23      	ldr	r2, [pc, #140]	@ (8004cd4 <UART_Start_Receive_IT+0x240>)
 8004c46:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c48:	e002      	b.n	8004c50 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a22      	ldr	r2, [pc, #136]	@ (8004cd8 <UART_Start_Receive_IT+0x244>)
 8004c4e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d019      	beq.n	8004c8c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c58:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c5e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c62:	2301      	movs	r3, #1
 8004c64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	f383 8810 	msr	PRIMASK, r3
}
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2190      	movs	r1, #144	@ 0x90
 8004c7a:	0049      	lsls	r1, r1, #1
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	f383 8810 	msr	PRIMASK, r3
}
 8004c8a:	e018      	b.n	8004cbe <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c90:	613b      	str	r3, [r7, #16]
  return(result);
 8004c92:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c94:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c96:	2301      	movs	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			@ (mov r8, r8)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2120      	movs	r1, #32
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f383 8810 	msr	PRIMASK, r3
}
 8004cbc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b018      	add	sp, #96	@ 0x60
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	000001ff 	.word	0x000001ff
 8004ccc:	080054d1 	.word	0x080054d1
 8004cd0:	080051a1 	.word	0x080051a1
 8004cd4:	08004fe9 	.word	0x08004fe9
 8004cd8:	08004e31 	.word	0x08004e31

08004cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08e      	sub	sp, #56	@ 0x38
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce8:	617b      	str	r3, [r7, #20]
  return(result);
 8004cea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4926      	ldr	r1, [pc, #152]	@ (8004da0 <UART_EndRxTransfer+0xc4>)
 8004d06:	400a      	ands	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d16:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1a:	623b      	str	r3, [r7, #32]
  return(result);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d20:	2301      	movs	r3, #1
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	f383 8810 	msr	PRIMASK, r3
}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	491b      	ldr	r1, [pc, #108]	@ (8004da4 <UART_EndRxTransfer+0xc8>)
 8004d38:	400a      	ands	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d42:	f383 8810 	msr	PRIMASK, r3
}
 8004d46:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d118      	bne.n	8004d82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d50:	f3ef 8310 	mrs	r3, PRIMASK
 8004d54:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f383 8810 	msr	PRIMASK, r3
}
 8004d64:	46c0      	nop			@ (mov r8, r8)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2110      	movs	r1, #16
 8004d72:	438a      	bics	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f383 8810 	msr	PRIMASK, r3
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	228c      	movs	r2, #140	@ 0x8c
 8004d86:	2120      	movs	r1, #32
 8004d88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b00e      	add	sp, #56	@ 0x38
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	fffffedf 	.word	0xfffffedf
 8004da4:	effffffe 	.word	0xeffffffe

08004da8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	225e      	movs	r2, #94	@ 0x5e
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2256      	movs	r2, #86	@ 0x56
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff fb09 	bl	80043e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b086      	sub	sp, #24
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dde:	f3ef 8310 	mrs	r3, PRIMASK
 8004de2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	2301      	movs	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f383 8810 	msr	PRIMASK, r3
}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2140      	movs	r1, #64	@ 0x40
 8004e00:	438a      	bics	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2288      	movs	r2, #136	@ 0x88
 8004e14:	2120      	movs	r1, #32
 8004e16:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7ff fad5 	bl	80043d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b006      	add	sp, #24
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b094      	sub	sp, #80	@ 0x50
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e38:	204e      	movs	r0, #78	@ 0x4e
 8004e3a:	183b      	adds	r3, r7, r0
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	2160      	movs	r1, #96	@ 0x60
 8004e40:	5a52      	ldrh	r2, [r2, r1]
 8004e42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	228c      	movs	r2, #140	@ 0x8c
 8004e48:	589b      	ldr	r3, [r3, r2]
 8004e4a:	2b22      	cmp	r3, #34	@ 0x22
 8004e4c:	d000      	beq.n	8004e50 <UART_RxISR_8BIT+0x20>
 8004e4e:	e0ba      	b.n	8004fc6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e56:	214c      	movs	r1, #76	@ 0x4c
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	183b      	adds	r3, r7, r0
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b2d9      	uxtb	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	225e      	movs	r2, #94	@ 0x5e
 8004e80:	5a9b      	ldrh	r3, [r3, r2]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b299      	uxth	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	225e      	movs	r2, #94	@ 0x5e
 8004e8c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	225e      	movs	r2, #94	@ 0x5e
 8004e92:	5a9b      	ldrh	r3, [r3, r2]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d000      	beq.n	8004e9c <UART_RxISR_8BIT+0x6c>
 8004e9a:	e09c      	b.n	8004fd6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4948      	ldr	r1, [pc, #288]	@ (8004fe0 <UART_RxISR_8BIT+0x1b0>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ece:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed8:	2301      	movs	r3, #1
 8004eda:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ede:	f383 8810 	msr	PRIMASK, r3
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2101      	movs	r1, #1
 8004ef0:	438a      	bics	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	228c      	movs	r2, #140	@ 0x8c
 8004f04:	2120      	movs	r1, #32
 8004f06:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	2380      	movs	r3, #128	@ 0x80
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d018      	beq.n	8004f54 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f22:	f3ef 8310 	mrs	r3, PRIMASK
 8004f26:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f28:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f383 8810 	msr	PRIMASK, r3
}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4928      	ldr	r1, [pc, #160]	@ (8004fe4 <UART_RxISR_8BIT+0x1b4>)
 8004f44:	400a      	ands	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	f383 8810 	msr	PRIMASK, r3
}
 8004f52:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d12f      	bne.n	8004fbc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f62:	f3ef 8310 	mrs	r3, PRIMASK
 8004f66:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f68:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2110      	movs	r1, #16
 8004f84:	438a      	bics	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f383 8810 	msr	PRIMASK, r3
}
 8004f92:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d103      	bne.n	8004faa <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	225c      	movs	r2, #92	@ 0x5c
 8004fae:	5a9a      	ldrh	r2, [r3, r2]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	0011      	movs	r1, r2
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff fa1b 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fba:	e00c      	b.n	8004fd6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f7fb fc48 	bl	8000854 <HAL_UART_RxCpltCallback>
}
 8004fc4:	e007      	b.n	8004fd6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2108      	movs	r1, #8
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	619a      	str	r2, [r3, #24]
}
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b014      	add	sp, #80	@ 0x50
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	fffffedf 	.word	0xfffffedf
 8004fe4:	fbffffff 	.word	0xfbffffff

08004fe8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b094      	sub	sp, #80	@ 0x50
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ff0:	204e      	movs	r0, #78	@ 0x4e
 8004ff2:	183b      	adds	r3, r7, r0
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	2160      	movs	r1, #96	@ 0x60
 8004ff8:	5a52      	ldrh	r2, [r2, r1]
 8004ffa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	228c      	movs	r2, #140	@ 0x8c
 8005000:	589b      	ldr	r3, [r3, r2]
 8005002:	2b22      	cmp	r3, #34	@ 0x22
 8005004:	d000      	beq.n	8005008 <UART_RxISR_16BIT+0x20>
 8005006:	e0ba      	b.n	800517e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800500e:	214c      	movs	r1, #76	@ 0x4c
 8005010:	187b      	adds	r3, r7, r1
 8005012:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800501a:	187b      	adds	r3, r7, r1
 800501c:	183a      	adds	r2, r7, r0
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	8812      	ldrh	r2, [r2, #0]
 8005022:	4013      	ands	r3, r2
 8005024:	b29a      	uxth	r2, r3
 8005026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005028:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502e:	1c9a      	adds	r2, r3, #2
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	225e      	movs	r2, #94	@ 0x5e
 8005038:	5a9b      	ldrh	r3, [r3, r2]
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b299      	uxth	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	225e      	movs	r2, #94	@ 0x5e
 8005044:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	225e      	movs	r2, #94	@ 0x5e
 800504a:	5a9b      	ldrh	r3, [r3, r2]
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d000      	beq.n	8005054 <UART_RxISR_16BIT+0x6c>
 8005052:	e09c      	b.n	800518e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005054:	f3ef 8310 	mrs	r3, PRIMASK
 8005058:	623b      	str	r3, [r7, #32]
  return(result);
 800505a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800505c:	647b      	str	r3, [r7, #68]	@ 0x44
 800505e:	2301      	movs	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	f383 8810 	msr	PRIMASK, r3
}
 8005068:	46c0      	nop			@ (mov r8, r8)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4948      	ldr	r1, [pc, #288]	@ (8005198 <UART_RxISR_16BIT+0x1b0>)
 8005076:	400a      	ands	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005086:	f3ef 8310 	mrs	r3, PRIMASK
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005090:	2301      	movs	r3, #1
 8005092:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2101      	movs	r1, #1
 80050a8:	438a      	bics	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	f383 8810 	msr	PRIMASK, r3
}
 80050b6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	228c      	movs	r2, #140	@ 0x8c
 80050bc:	2120      	movs	r1, #32
 80050be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	2380      	movs	r3, #128	@ 0x80
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	4013      	ands	r3, r2
 80050d8:	d018      	beq.n	800510c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050da:	f3ef 8310 	mrs	r3, PRIMASK
 80050de:	617b      	str	r3, [r7, #20]
  return(result);
 80050e0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e4:	2301      	movs	r3, #1
 80050e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f383 8810 	msr	PRIMASK, r3
}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4928      	ldr	r1, [pc, #160]	@ (800519c <UART_RxISR_16BIT+0x1b4>)
 80050fc:	400a      	ands	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005102:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f383 8810 	msr	PRIMASK, r3
}
 800510a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d12f      	bne.n	8005174 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800511a:	f3ef 8310 	mrs	r3, PRIMASK
 800511e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005120:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005124:	2301      	movs	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f383 8810 	msr	PRIMASK, r3
}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2110      	movs	r1, #16
 800513c:	438a      	bics	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f383 8810 	msr	PRIMASK, r3
}
 800514a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	2210      	movs	r2, #16
 8005154:	4013      	ands	r3, r2
 8005156:	2b10      	cmp	r3, #16
 8005158:	d103      	bne.n	8005162 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2210      	movs	r2, #16
 8005160:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	225c      	movs	r2, #92	@ 0x5c
 8005166:	5a9a      	ldrh	r2, [r3, r2]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0011      	movs	r1, r2
 800516c:	0018      	movs	r0, r3
 800516e:	f7ff f93f 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005172:	e00c      	b.n	800518e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	0018      	movs	r0, r3
 8005178:	f7fb fb6c 	bl	8000854 <HAL_UART_RxCpltCallback>
}
 800517c:	e007      	b.n	800518e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2108      	movs	r1, #8
 800518a:	430a      	orrs	r2, r1
 800518c:	619a      	str	r2, [r3, #24]
}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b014      	add	sp, #80	@ 0x50
 8005194:	bd80      	pop	{r7, pc}
 8005196:	46c0      	nop			@ (mov r8, r8)
 8005198:	fffffedf 	.word	0xfffffedf
 800519c:	fbffffff 	.word	0xfbffffff

080051a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b0a0      	sub	sp, #128	@ 0x80
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80051a8:	237a      	movs	r3, #122	@ 0x7a
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	2160      	movs	r1, #96	@ 0x60
 80051b0:	5a52      	ldrh	r2, [r2, r1]
 80051b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	228c      	movs	r2, #140	@ 0x8c
 80051d0:	589b      	ldr	r3, [r3, r2]
 80051d2:	2b22      	cmp	r3, #34	@ 0x22
 80051d4:	d000      	beq.n	80051d8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80051d6:	e165      	b.n	80054a4 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051d8:	236e      	movs	r3, #110	@ 0x6e
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	2168      	movs	r1, #104	@ 0x68
 80051e0:	5a52      	ldrh	r2, [r2, r1]
 80051e2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051e4:	e10c      	b.n	8005400 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051ec:	216c      	movs	r1, #108	@ 0x6c
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051f2:	187b      	adds	r3, r7, r1
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	237a      	movs	r3, #122	@ 0x7a
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b2d9      	uxtb	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005204:	400a      	ands	r2, r1
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	225e      	movs	r2, #94	@ 0x5e
 8005218:	5a9b      	ldrh	r3, [r3, r2]
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b299      	uxth	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	225e      	movs	r2, #94	@ 0x5e
 8005224:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800522e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005230:	2207      	movs	r2, #7
 8005232:	4013      	ands	r3, r2
 8005234:	d049      	beq.n	80052ca <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005236:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005238:	2201      	movs	r2, #1
 800523a:	4013      	ands	r3, r2
 800523c:	d010      	beq.n	8005260 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800523e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4013      	ands	r3, r2
 8005246:	d00b      	beq.n	8005260 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2201      	movs	r2, #1
 800524e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2290      	movs	r2, #144	@ 0x90
 8005254:	589b      	ldr	r3, [r3, r2]
 8005256:	2201      	movs	r2, #1
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2190      	movs	r1, #144	@ 0x90
 800525e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005260:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005262:	2202      	movs	r2, #2
 8005264:	4013      	ands	r3, r2
 8005266:	d00f      	beq.n	8005288 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005268:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800526a:	2201      	movs	r2, #1
 800526c:	4013      	ands	r3, r2
 800526e:	d00b      	beq.n	8005288 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2202      	movs	r2, #2
 8005276:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2290      	movs	r2, #144	@ 0x90
 800527c:	589b      	ldr	r3, [r3, r2]
 800527e:	2204      	movs	r2, #4
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2190      	movs	r1, #144	@ 0x90
 8005286:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005288:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800528a:	2204      	movs	r2, #4
 800528c:	4013      	ands	r3, r2
 800528e:	d00f      	beq.n	80052b0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005290:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005292:	2201      	movs	r2, #1
 8005294:	4013      	ands	r3, r2
 8005296:	d00b      	beq.n	80052b0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2204      	movs	r2, #4
 800529e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2290      	movs	r2, #144	@ 0x90
 80052a4:	589b      	ldr	r3, [r3, r2]
 80052a6:	2202      	movs	r2, #2
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2190      	movs	r1, #144	@ 0x90
 80052ae:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2290      	movs	r2, #144	@ 0x90
 80052b4:	589b      	ldr	r3, [r3, r2]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0018      	movs	r0, r3
 80052be:	f7ff f88f 	bl	80043e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2290      	movs	r2, #144	@ 0x90
 80052c6:	2100      	movs	r1, #0
 80052c8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	225e      	movs	r2, #94	@ 0x5e
 80052ce:	5a9b      	ldrh	r3, [r3, r2]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d000      	beq.n	80052d8 <UART_RxISR_8BIT_FIFOEN+0x138>
 80052d6:	e093      	b.n	8005400 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052d8:	f3ef 8310 	mrs	r3, PRIMASK
 80052dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052e2:	2301      	movs	r3, #1
 80052e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e8:	f383 8810 	msr	PRIMASK, r3
}
 80052ec:	46c0      	nop			@ (mov r8, r8)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4970      	ldr	r1, [pc, #448]	@ (80054bc <UART_RxISR_8BIT_FIFOEN+0x31c>)
 80052fa:	400a      	ands	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005300:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005304:	f383 8810 	msr	PRIMASK, r3
}
 8005308:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800530a:	f3ef 8310 	mrs	r3, PRIMASK
 800530e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005312:	667b      	str	r3, [r7, #100]	@ 0x64
 8005314:	2301      	movs	r3, #1
 8005316:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800531a:	f383 8810 	msr	PRIMASK, r3
}
 800531e:	46c0      	nop			@ (mov r8, r8)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4965      	ldr	r1, [pc, #404]	@ (80054c0 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800532c:	400a      	ands	r2, r1
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005336:	f383 8810 	msr	PRIMASK, r3
}
 800533a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	228c      	movs	r2, #140	@ 0x8c
 8005340:	2120      	movs	r1, #32
 8005342:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	2380      	movs	r3, #128	@ 0x80
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	4013      	ands	r3, r2
 800535c:	d018      	beq.n	8005390 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800535e:	f3ef 8310 	mrs	r3, PRIMASK
 8005362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005366:	663b      	str	r3, [r7, #96]	@ 0x60
 8005368:	2301      	movs	r3, #1
 800536a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	f383 8810 	msr	PRIMASK, r3
}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4951      	ldr	r1, [pc, #324]	@ (80054c4 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005380:	400a      	ands	r2, r1
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005386:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d12f      	bne.n	80053f8 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800539e:	f3ef 8310 	mrs	r3, PRIMASK
 80053a2:	623b      	str	r3, [r7, #32]
  return(result);
 80053a4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a8:	2301      	movs	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	f383 8810 	msr	PRIMASK, r3
}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2110      	movs	r1, #16
 80053c0:	438a      	bics	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	f383 8810 	msr	PRIMASK, r3
}
 80053ce:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	2210      	movs	r2, #16
 80053d8:	4013      	ands	r3, r2
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d103      	bne.n	80053e6 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2210      	movs	r2, #16
 80053e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	225c      	movs	r2, #92	@ 0x5c
 80053ea:	5a9a      	ldrh	r2, [r3, r2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0011      	movs	r1, r2
 80053f0:	0018      	movs	r0, r3
 80053f2:	f7fe fffd 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
 80053f6:	e003      	b.n	8005400 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7fb fa2a 	bl	8000854 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005400:	236e      	movs	r3, #110	@ 0x6e
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <UART_RxISR_8BIT_FIFOEN+0x274>
 800540a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800540c:	2220      	movs	r2, #32
 800540e:	4013      	ands	r3, r2
 8005410:	d000      	beq.n	8005414 <UART_RxISR_8BIT_FIFOEN+0x274>
 8005412:	e6e8      	b.n	80051e6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005414:	205a      	movs	r0, #90	@ 0x5a
 8005416:	183b      	adds	r3, r7, r0
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	215e      	movs	r1, #94	@ 0x5e
 800541c:	5a52      	ldrh	r2, [r2, r1]
 800541e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005420:	0001      	movs	r1, r0
 8005422:	187b      	adds	r3, r7, r1
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d044      	beq.n	80054b4 <UART_RxISR_8BIT_FIFOEN+0x314>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2268      	movs	r2, #104	@ 0x68
 800542e:	5a9b      	ldrh	r3, [r3, r2]
 8005430:	187a      	adds	r2, r7, r1
 8005432:	8812      	ldrh	r2, [r2, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d23d      	bcs.n	80054b4 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005438:	f3ef 8310 	mrs	r3, PRIMASK
 800543c:	60bb      	str	r3, [r7, #8]
  return(result);
 800543e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005440:	657b      	str	r3, [r7, #84]	@ 0x54
 8005442:	2301      	movs	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	46c0      	nop			@ (mov r8, r8)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	491b      	ldr	r1, [pc, #108]	@ (80054c8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800545a:	400a      	ands	r2, r1
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f383 8810 	msr	PRIMASK, r3
}
 8005468:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a17      	ldr	r2, [pc, #92]	@ (80054cc <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800546e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005470:	f3ef 8310 	mrs	r3, PRIMASK
 8005474:	617b      	str	r3, [r7, #20]
  return(result);
 8005476:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005478:	653b      	str	r3, [r7, #80]	@ 0x50
 800547a:	2301      	movs	r3, #1
 800547c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f383 8810 	msr	PRIMASK, r3
}
 8005484:	46c0      	nop			@ (mov r8, r8)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2120      	movs	r1, #32
 8005492:	430a      	orrs	r2, r1
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f383 8810 	msr	PRIMASK, r3
}
 80054a0:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054a2:	e007      	b.n	80054b4 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2108      	movs	r1, #8
 80054b0:	430a      	orrs	r2, r1
 80054b2:	619a      	str	r2, [r3, #24]
}
 80054b4:	46c0      	nop			@ (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b020      	add	sp, #128	@ 0x80
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	fffffeff 	.word	0xfffffeff
 80054c0:	effffffe 	.word	0xeffffffe
 80054c4:	fbffffff 	.word	0xfbffffff
 80054c8:	efffffff 	.word	0xefffffff
 80054cc:	08004e31 	.word	0x08004e31

080054d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b0a2      	sub	sp, #136	@ 0x88
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80054d8:	2382      	movs	r3, #130	@ 0x82
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	2160      	movs	r1, #96	@ 0x60
 80054e0:	5a52      	ldrh	r2, [r2, r1]
 80054e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	2284      	movs	r2, #132	@ 0x84
 80054ec:	18ba      	adds	r2, r7, r2
 80054ee:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	228c      	movs	r2, #140	@ 0x8c
 8005504:	589b      	ldr	r3, [r3, r2]
 8005506:	2b22      	cmp	r3, #34	@ 0x22
 8005508:	d000      	beq.n	800550c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800550a:	e16f      	b.n	80057ec <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800550c:	2376      	movs	r3, #118	@ 0x76
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	2168      	movs	r1, #104	@ 0x68
 8005514:	5a52      	ldrh	r2, [r2, r1]
 8005516:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005518:	e114      	b.n	8005744 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005520:	2174      	movs	r1, #116	@ 0x74
 8005522:	187b      	adds	r3, r7, r1
 8005524:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800552c:	187b      	adds	r3, r7, r1
 800552e:	2282      	movs	r2, #130	@ 0x82
 8005530:	18ba      	adds	r2, r7, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	4013      	ands	r3, r2
 8005538:	b29a      	uxth	r2, r3
 800553a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800553c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	225e      	movs	r2, #94	@ 0x5e
 800554c:	5a9b      	ldrh	r3, [r3, r2]
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b299      	uxth	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	225e      	movs	r2, #94	@ 0x5e
 8005558:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	2184      	movs	r1, #132	@ 0x84
 8005562:	187a      	adds	r2, r7, r1
 8005564:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005566:	187b      	adds	r3, r7, r1
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2207      	movs	r2, #7
 800556c:	4013      	ands	r3, r2
 800556e:	d04e      	beq.n	800560e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005570:	187b      	adds	r3, r7, r1
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2201      	movs	r2, #1
 8005576:	4013      	ands	r3, r2
 8005578:	d010      	beq.n	800559c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800557a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800557c:	2380      	movs	r3, #128	@ 0x80
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4013      	ands	r3, r2
 8005582:	d00b      	beq.n	800559c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2290      	movs	r2, #144	@ 0x90
 8005590:	589b      	ldr	r3, [r3, r2]
 8005592:	2201      	movs	r2, #1
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2190      	movs	r1, #144	@ 0x90
 800559a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800559c:	2384      	movs	r3, #132	@ 0x84
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2202      	movs	r2, #2
 80055a4:	4013      	ands	r3, r2
 80055a6:	d00f      	beq.n	80055c8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80055a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055aa:	2201      	movs	r2, #1
 80055ac:	4013      	ands	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2202      	movs	r2, #2
 80055b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2290      	movs	r2, #144	@ 0x90
 80055bc:	589b      	ldr	r3, [r3, r2]
 80055be:	2204      	movs	r2, #4
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2190      	movs	r1, #144	@ 0x90
 80055c6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055c8:	2384      	movs	r3, #132	@ 0x84
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2204      	movs	r2, #4
 80055d0:	4013      	ands	r3, r2
 80055d2:	d00f      	beq.n	80055f4 <UART_RxISR_16BIT_FIFOEN+0x124>
 80055d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055d6:	2201      	movs	r2, #1
 80055d8:	4013      	ands	r3, r2
 80055da:	d00b      	beq.n	80055f4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2204      	movs	r2, #4
 80055e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2290      	movs	r2, #144	@ 0x90
 80055e8:	589b      	ldr	r3, [r3, r2]
 80055ea:	2202      	movs	r2, #2
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2190      	movs	r1, #144	@ 0x90
 80055f2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2290      	movs	r2, #144	@ 0x90
 80055f8:	589b      	ldr	r3, [r3, r2]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0018      	movs	r0, r3
 8005602:	f7fe feed 	bl	80043e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2290      	movs	r2, #144	@ 0x90
 800560a:	2100      	movs	r1, #0
 800560c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	225e      	movs	r2, #94	@ 0x5e
 8005612:	5a9b      	ldrh	r3, [r3, r2]
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d000      	beq.n	800561c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800561a:	e093      	b.n	8005744 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800561c:	f3ef 8310 	mrs	r3, PRIMASK
 8005620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005624:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005626:	2301      	movs	r3, #1
 8005628:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			@ (mov r8, r8)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4971      	ldr	r1, [pc, #452]	@ (8005804 <UART_RxISR_16BIT_FIFOEN+0x334>)
 800563e:	400a      	ands	r2, r1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005644:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005648:	f383 8810 	msr	PRIMASK, r3
}
 800564c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800564e:	f3ef 8310 	mrs	r3, PRIMASK
 8005652:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005656:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005658:	2301      	movs	r3, #1
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565e:	f383 8810 	msr	PRIMASK, r3
}
 8005662:	46c0      	nop			@ (mov r8, r8)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4966      	ldr	r1, [pc, #408]	@ (8005808 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005670:	400a      	ands	r2, r1
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005676:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800567a:	f383 8810 	msr	PRIMASK, r3
}
 800567e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	228c      	movs	r2, #140	@ 0x8c
 8005684:	2120      	movs	r1, #32
 8005686:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	2380      	movs	r3, #128	@ 0x80
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	4013      	ands	r3, r2
 80056a0:	d018      	beq.n	80056d4 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056a2:	f3ef 8310 	mrs	r3, PRIMASK
 80056a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80056ac:	2301      	movs	r3, #1
 80056ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b2:	f383 8810 	msr	PRIMASK, r3
}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4952      	ldr	r1, [pc, #328]	@ (800580c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 80056c4:	400a      	ands	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	f383 8810 	msr	PRIMASK, r3
}
 80056d2:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d12f      	bne.n	800573c <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056e2:	f3ef 8310 	mrs	r3, PRIMASK
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80056ec:	2301      	movs	r3, #1
 80056ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	f383 8810 	msr	PRIMASK, r3
}
 80056f6:	46c0      	nop			@ (mov r8, r8)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2110      	movs	r1, #16
 8005704:	438a      	bics	r2, r1
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570e:	f383 8810 	msr	PRIMASK, r3
}
 8005712:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	2210      	movs	r2, #16
 800571c:	4013      	ands	r3, r2
 800571e:	2b10      	cmp	r3, #16
 8005720:	d103      	bne.n	800572a <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2210      	movs	r2, #16
 8005728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	225c      	movs	r2, #92	@ 0x5c
 800572e:	5a9a      	ldrh	r2, [r3, r2]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	0011      	movs	r1, r2
 8005734:	0018      	movs	r0, r3
 8005736:	f7fe fe5b 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
 800573a:	e003      	b.n	8005744 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	0018      	movs	r0, r3
 8005740:	f7fb f888 	bl	8000854 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005744:	2376      	movs	r3, #118	@ 0x76
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <UART_RxISR_16BIT_FIFOEN+0x28c>
 800574e:	2384      	movs	r3, #132	@ 0x84
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2220      	movs	r2, #32
 8005756:	4013      	ands	r3, r2
 8005758:	d000      	beq.n	800575c <UART_RxISR_16BIT_FIFOEN+0x28c>
 800575a:	e6de      	b.n	800551a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800575c:	205e      	movs	r0, #94	@ 0x5e
 800575e:	183b      	adds	r3, r7, r0
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	215e      	movs	r1, #94	@ 0x5e
 8005764:	5a52      	ldrh	r2, [r2, r1]
 8005766:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005768:	0001      	movs	r1, r0
 800576a:	187b      	adds	r3, r7, r1
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d044      	beq.n	80057fc <UART_RxISR_16BIT_FIFOEN+0x32c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2268      	movs	r2, #104	@ 0x68
 8005776:	5a9b      	ldrh	r3, [r3, r2]
 8005778:	187a      	adds	r2, r7, r1
 800577a:	8812      	ldrh	r2, [r2, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d23d      	bcs.n	80057fc <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005780:	f3ef 8310 	mrs	r3, PRIMASK
 8005784:	60fb      	str	r3, [r7, #12]
  return(result);
 8005786:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005788:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578a:	2301      	movs	r3, #1
 800578c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f383 8810 	msr	PRIMASK, r3
}
 8005794:	46c0      	nop			@ (mov r8, r8)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	491b      	ldr	r1, [pc, #108]	@ (8005810 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80057a2:	400a      	ands	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f383 8810 	msr	PRIMASK, r3
}
 80057b0:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a17      	ldr	r2, [pc, #92]	@ (8005814 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80057b6:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057b8:	f3ef 8310 	mrs	r3, PRIMASK
 80057bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80057be:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80057c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057c2:	2301      	movs	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f383 8810 	msr	PRIMASK, r3
}
 80057cc:	46c0      	nop			@ (mov r8, r8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2120      	movs	r1, #32
 80057da:	430a      	orrs	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f383 8810 	msr	PRIMASK, r3
}
 80057e8:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057ea:	e007      	b.n	80057fc <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2108      	movs	r1, #8
 80057f8:	430a      	orrs	r2, r1
 80057fa:	619a      	str	r2, [r3, #24]
}
 80057fc:	46c0      	nop			@ (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b022      	add	sp, #136	@ 0x88
 8005802:	bd80      	pop	{r7, pc}
 8005804:	fffffeff 	.word	0xfffffeff
 8005808:	effffffe 	.word	0xeffffffe
 800580c:	fbffffff 	.word	0xfbffffff
 8005810:	efffffff 	.word	0xefffffff
 8005814:	08004fe9 	.word	0x08004fe9

08005818 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005820:	46c0      	nop			@ (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b002      	add	sp, #8
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005830:	46c0      	nop			@ (mov r8, r8)
 8005832:	46bd      	mov	sp, r7
 8005834:	b002      	add	sp, #8
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005840:	46c0      	nop			@ (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b002      	add	sp, #8
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2284      	movs	r2, #132	@ 0x84
 8005854:	5c9b      	ldrb	r3, [r3, r2]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_UARTEx_DisableFifoMode+0x16>
 800585a:	2302      	movs	r3, #2
 800585c:	e027      	b.n	80058ae <HAL_UARTEx_DisableFifoMode+0x66>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2284      	movs	r2, #132	@ 0x84
 8005862:	2101      	movs	r1, #1
 8005864:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2288      	movs	r2, #136	@ 0x88
 800586a:	2124      	movs	r1, #36	@ 0x24
 800586c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2101      	movs	r1, #1
 8005882:	438a      	bics	r2, r1
 8005884:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a0b      	ldr	r2, [pc, #44]	@ (80058b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800588a:	4013      	ands	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2288      	movs	r2, #136	@ 0x88
 80058a0:	2120      	movs	r1, #32
 80058a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2284      	movs	r2, #132	@ 0x84
 80058a8:	2100      	movs	r1, #0
 80058aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	0018      	movs	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b004      	add	sp, #16
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	dfffffff 	.word	0xdfffffff

080058bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2284      	movs	r2, #132	@ 0x84
 80058ca:	5c9b      	ldrb	r3, [r3, r2]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e02e      	b.n	8005932 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2284      	movs	r2, #132	@ 0x84
 80058d8:	2101      	movs	r1, #1
 80058da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2288      	movs	r2, #136	@ 0x88
 80058e0:	2124      	movs	r1, #36	@ 0x24
 80058e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2101      	movs	r1, #1
 80058f8:	438a      	bics	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	08d9      	lsrs	r1, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	0018      	movs	r0, r3
 8005914:	f000 f854 	bl	80059c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2288      	movs	r2, #136	@ 0x88
 8005924:	2120      	movs	r1, #32
 8005926:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2284      	movs	r2, #132	@ 0x84
 800592c:	2100      	movs	r1, #0
 800592e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	0018      	movs	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	b004      	add	sp, #16
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2284      	movs	r2, #132	@ 0x84
 800594a:	5c9b      	ldrb	r3, [r3, r2]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e02f      	b.n	80059b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2284      	movs	r2, #132	@ 0x84
 8005958:	2101      	movs	r1, #1
 800595a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2288      	movs	r2, #136	@ 0x88
 8005960:	2124      	movs	r1, #36	@ 0x24
 8005962:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2101      	movs	r1, #1
 8005978:	438a      	bics	r2, r1
 800597a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	4a0e      	ldr	r2, [pc, #56]	@ (80059bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005984:	4013      	ands	r3, r2
 8005986:	0019      	movs	r1, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	0018      	movs	r0, r3
 8005996:	f000 f813 	bl	80059c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2288      	movs	r2, #136	@ 0x88
 80059a6:	2120      	movs	r1, #32
 80059a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2284      	movs	r2, #132	@ 0x84
 80059ae:	2100      	movs	r1, #0
 80059b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b004      	add	sp, #16
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	f1ffffff 	.word	0xf1ffffff

080059c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d108      	bne.n	80059e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	226a      	movs	r2, #106	@ 0x6a
 80059d4:	2101      	movs	r1, #1
 80059d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2268      	movs	r2, #104	@ 0x68
 80059dc:	2101      	movs	r1, #1
 80059de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059e0:	e043      	b.n	8005a6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059e2:	260f      	movs	r6, #15
 80059e4:	19bb      	adds	r3, r7, r6
 80059e6:	2208      	movs	r2, #8
 80059e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059ea:	200e      	movs	r0, #14
 80059ec:	183b      	adds	r3, r7, r0
 80059ee:	2208      	movs	r2, #8
 80059f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	0e5b      	lsrs	r3, r3, #25
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	240d      	movs	r4, #13
 80059fe:	193b      	adds	r3, r7, r4
 8005a00:	2107      	movs	r1, #7
 8005a02:	400a      	ands	r2, r1
 8005a04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	0f5b      	lsrs	r3, r3, #29
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	250c      	movs	r5, #12
 8005a12:	197b      	adds	r3, r7, r5
 8005a14:	2107      	movs	r1, #7
 8005a16:	400a      	ands	r2, r1
 8005a18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a1a:	183b      	adds	r3, r7, r0
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	197a      	adds	r2, r7, r5
 8005a20:	7812      	ldrb	r2, [r2, #0]
 8005a22:	4914      	ldr	r1, [pc, #80]	@ (8005a74 <UARTEx_SetNbDataToProcess+0xb4>)
 8005a24:	5c8a      	ldrb	r2, [r1, r2]
 8005a26:	435a      	muls	r2, r3
 8005a28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a2a:	197b      	adds	r3, r7, r5
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	4a12      	ldr	r2, [pc, #72]	@ (8005a78 <UARTEx_SetNbDataToProcess+0xb8>)
 8005a30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a32:	0019      	movs	r1, r3
 8005a34:	f7fa fbf2 	bl	800021c <__divsi3>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	b299      	uxth	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	226a      	movs	r2, #106	@ 0x6a
 8005a40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a42:	19bb      	adds	r3, r7, r6
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	193a      	adds	r2, r7, r4
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	490a      	ldr	r1, [pc, #40]	@ (8005a74 <UARTEx_SetNbDataToProcess+0xb4>)
 8005a4c:	5c8a      	ldrb	r2, [r1, r2]
 8005a4e:	435a      	muls	r2, r3
 8005a50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a52:	193b      	adds	r3, r7, r4
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	4a08      	ldr	r2, [pc, #32]	@ (8005a78 <UARTEx_SetNbDataToProcess+0xb8>)
 8005a58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	f7fa fbde 	bl	800021c <__divsi3>
 8005a60:	0003      	movs	r3, r0
 8005a62:	b299      	uxth	r1, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2268      	movs	r2, #104	@ 0x68
 8005a68:	5299      	strh	r1, [r3, r2]
}
 8005a6a:	46c0      	nop			@ (mov r8, r8)
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b005      	add	sp, #20
 8005a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	08005bb8 	.word	0x08005bb8
 8005a78:	08005bc0 	.word	0x08005bc0

08005a7c <memset>:
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	1882      	adds	r2, r0, r2
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d100      	bne.n	8005a86 <memset+0xa>
 8005a84:	4770      	bx	lr
 8005a86:	7019      	strb	r1, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	e7f9      	b.n	8005a80 <memset+0x4>

08005a8c <__libc_init_array>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	2600      	movs	r6, #0
 8005a90:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac4 <__libc_init_array+0x38>)
 8005a92:	4d0d      	ldr	r5, [pc, #52]	@ (8005ac8 <__libc_init_array+0x3c>)
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	d109      	bne.n	8005ab0 <__libc_init_array+0x24>
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	f000 f819 	bl	8005ad4 <_init>
 8005aa2:	4c0a      	ldr	r4, [pc, #40]	@ (8005acc <__libc_init_array+0x40>)
 8005aa4:	4d0a      	ldr	r5, [pc, #40]	@ (8005ad0 <__libc_init_array+0x44>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	42a6      	cmp	r6, r4
 8005aac:	d105      	bne.n	8005aba <__libc_init_array+0x2e>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	00b3      	lsls	r3, r6, #2
 8005ab2:	58eb      	ldr	r3, [r5, r3]
 8005ab4:	4798      	blx	r3
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7ee      	b.n	8005a98 <__libc_init_array+0xc>
 8005aba:	00b3      	lsls	r3, r6, #2
 8005abc:	58eb      	ldr	r3, [r5, r3]
 8005abe:	4798      	blx	r3
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	e7f2      	b.n	8005aaa <__libc_init_array+0x1e>
 8005ac4:	08005bc8 	.word	0x08005bc8
 8005ac8:	08005bc8 	.word	0x08005bc8
 8005acc:	08005bcc 	.word	0x08005bcc
 8005ad0:	08005bc8 	.word	0x08005bc8

08005ad4 <_init>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ada:	bc08      	pop	{r3}
 8005adc:	469e      	mov	lr, r3
 8005ade:	4770      	bx	lr

08005ae0 <_fini>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	46c0      	nop			@ (mov r8, r8)
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr
