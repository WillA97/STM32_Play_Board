
STM32Play_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ec  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080043ac  080043ac  000053ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004488  08004488  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004488  08004488  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004488  08004488  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004488  08004488  00005488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800448c  0800448c  0000548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004490  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  0800449c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  0800449c  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016470  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b2  00000000  00000000  0001c4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0001f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff3  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016522  00000000  00000000  00021993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0f8  00000000  00000000  00037eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b78b  00000000  00000000  00052fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ac  00000000  00000000  000de77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e3128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004394 	.word	0x08004394

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004394 	.word	0x08004394

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f003 ff9a 	bl	800433c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000408:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800040a:	4a2e      	ldr	r2, [pc, #184]	@ (80004c4 <MX_ADC1_Init+0xd0>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800040e:	4b2c      	ldr	r3, [pc, #176]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000410:	22c0      	movs	r2, #192	@ 0xc0
 8000412:	0612      	lsls	r2, r2, #24
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041c:	4b28      	ldr	r3, [pc, #160]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000422:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000428:	4b25      	ldr	r3, [pc, #148]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800042a:	2204      	movs	r2, #4
 800042c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000430:	2200      	movs	r2, #0
 8000432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000434:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000436:	2200      	movs	r2, #0
 8000438:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800043a:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800043c:	2200      	movs	r2, #0
 800043e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000442:	2201      	movs	r2, #1
 8000444:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b1e      	ldr	r3, [pc, #120]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000448:	2220      	movs	r2, #32
 800044a:	2100      	movs	r1, #0
 800044c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800045c:	222c      	movs	r2, #44	@ 0x2c
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000464:	2200      	movs	r2, #0
 8000466:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800046a:	2200      	movs	r2, #0
 800046c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000470:	2200      	movs	r2, #0
 8000472:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000476:	223c      	movs	r2, #60	@ 0x3c
 8000478:	2100      	movs	r1, #0
 800047a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800047c:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fe9d 	bl	80011c4 <HAL_ADC_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800048e:	f000 f9e6 	bl	800085e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <MX_ADC1_Init+0xd4>)
 8000496:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a4:	1d3a      	adds	r2, r7, #4
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 f830 	bl	8001510 <HAL_ADC_ConfigChannel>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004b4:	f000 f9d3 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000028 	.word	0x20000028
 80004c4:	40012400 	.word	0x40012400
 80004c8:	0c000008 	.word	0x0c000008

080004cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b091      	sub	sp, #68	@ 0x44
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	232c      	movs	r3, #44	@ 0x2c
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f003 ff2c 	bl	800433c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	2410      	movs	r4, #16
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	231c      	movs	r3, #28
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f003 ff24 	bl	800433c <memset>
  if(adcHandle->Instance==ADC1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a20      	ldr	r2, [pc, #128]	@ (800057c <HAL_ADC_MspInit+0xb0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d139      	bne.n	8000572 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2280      	movs	r2, #128	@ 0x80
 8000502:	01d2      	lsls	r2, r2, #7
 8000504:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050c:	193b      	adds	r3, r7, r4
 800050e:	0018      	movs	r0, r3
 8000510:	f002 f8c2 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000518:	f000 f9a1 	bl	800085e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800051c:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800051e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 8000522:	2180      	movs	r1, #128	@ 0x80
 8000524:	0349      	lsls	r1, r1, #13
 8000526:	430a      	orrs	r2, r1
 8000528:	641a      	str	r2, [r3, #64]	@ 0x40
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800052c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800052e:	2380      	movs	r3, #128	@ 0x80
 8000530:	035b      	lsls	r3, r3, #13
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800053a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800053c:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 800053e:	2101      	movs	r1, #1
 8000540:	430a      	orrs	r2, r1
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
 8000544:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <HAL_ADC_MspInit+0xb4>)
 8000546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000548:	2201      	movs	r2, #1
 800054a:	4013      	ands	r3, r2
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000550:	212c      	movs	r1, #44	@ 0x2c
 8000552:	187b      	adds	r3, r7, r1
 8000554:	227c      	movs	r2, #124	@ 0x7c
 8000556:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2203      	movs	r2, #3
 800055c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	187a      	adds	r2, r7, r1
 8000566:	23a0      	movs	r3, #160	@ 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f001 fa59 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b011      	add	sp, #68	@ 0x44
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40012400 	.word	0x40012400
 8000580:	40021000 	.word	0x40021000

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b08b      	sub	sp, #44	@ 0x2c
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	2414      	movs	r4, #20
 800058c:	193b      	adds	r3, r7, r4
 800058e:	0018      	movs	r0, r3
 8000590:	2314      	movs	r3, #20
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f003 fed1 	bl	800433c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <MX_GPIO_Init+0xb0>)
 800059c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005a0:	2104      	movs	r1, #4
 80005a2:	430a      	orrs	r2, r1
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005aa:	2204      	movs	r2, #4
 80005ac:	4013      	ands	r3, r2
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005b8:	2120      	movs	r1, #32
 80005ba:	430a      	orrs	r2, r1
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c2:	2220      	movs	r2, #32
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005e8:	2102      	movs	r1, #2
 80005ea:	430a      	orrs	r2, r1
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_GPIO_Init+0xb0>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f2:	2202      	movs	r2, #2
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_GPIO_Init+0xb4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fb81 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2208      	movs	r2, #8
 800060c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2201      	movs	r2, #1
 8000612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000620:	187b      	adds	r3, r7, r1
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <MX_GPIO_Init+0xb4>)
 8000624:	0019      	movs	r1, r3
 8000626:	0010      	movs	r0, r2
 8000628:	f001 f9fc 	bl	8001a24 <HAL_GPIO_Init>

}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b00b      	add	sp, #44	@ 0x2c
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	50001400 	.word	0x50001400

0800063c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	@ (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fb7d 	bl	8001d78 <HAL_I2C_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 f8ec 	bl	800085e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2C1_Init+0x74>)
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f001 fc1a 	bl	8001ec4 <HAL_I2CEx_ConfigAnalogFilter>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 f8e3 	bl	800085e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <MX_I2C1_Init+0x74>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fc5d 	bl	8001f5c <HAL_I2CEx_ConfigDigitalFilter>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f8da 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000008c 	.word	0x2000008c
 80006b4:	40005400 	.word	0x40005400
 80006b8:	00303d5b 	.word	0x00303d5b

080006bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b091      	sub	sp, #68	@ 0x44
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	232c      	movs	r3, #44	@ 0x2c
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	0018      	movs	r0, r3
 80006ca:	2314      	movs	r3, #20
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f003 fe34 	bl	800433c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	2410      	movs	r4, #16
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	0018      	movs	r0, r3
 80006da:	231c      	movs	r3, #28
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f003 fe2c 	bl	800433c <memset>
  if(i2cHandle->Instance==I2C1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a23      	ldr	r2, [pc, #140]	@ (8000778 <HAL_I2C_MspInit+0xbc>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d13f      	bne.n	800076e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2240      	movs	r2, #64	@ 0x40
 80006f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 ffcb 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000706:	f000 f8aa 	bl	800085e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070e:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000722:	212c      	movs	r1, #44	@ 0x2c
 8000724:	187b      	adds	r3, r7, r1
 8000726:	22c0      	movs	r2, #192	@ 0xc0
 8000728:	00d2      	lsls	r2, r2, #3
 800072a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2212      	movs	r2, #18
 8000730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2206      	movs	r2, #6
 8000742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	187a      	adds	r2, r7, r1
 8000746:	23a0      	movs	r3, #160	@ 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f001 f969 	bl	8001a24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	0389      	lsls	r1, r1, #14
 800075c:	430a      	orrs	r2, r1
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_I2C_MspInit+0xc0>)
 8000762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	039b      	lsls	r3, r3, #14
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b011      	add	sp, #68	@ 0x44
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	40005400 	.word	0x40005400
 800077c:	40021000 	.word	0x40021000

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int32_t Ch1_duty = 5000;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <main+0x54>)
 8000788:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fb7c 	bl	8000e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f829 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f7ff fef7 	bl	8000584 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000796:	f7ff fe2d 	bl	80003f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800079a:	f7ff ff4f 	bl	800063c <MX_I2C1_Init>
  MX_SPI1_Init();
 800079e:	f000 f865 	bl	800086c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007a2:	f000 fa2b 	bl	8000bfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007a6:	f000 fa77 	bl	8000c98 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007aa:	f000 f949 	bl	8000a40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <main+0x58>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 f9ce 	bl	8002b54 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_3);
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <main+0x5c>)
 80007ba:	2108      	movs	r1, #8
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fac0 	bl	8001d42 <HAL_GPIO_TogglePin>
	  TIM3 ->CCR1 = Ch1_duty;
 80007c2:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <main+0x60>)
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(250);
 80007c8:	20fa      	movs	r0, #250	@ 0xfa
 80007ca:	f000 fbd9 	bl	8000f80 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_3);
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	e7f2      	b.n	80007b8 <main+0x38>
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	00001388 	.word	0x00001388
 80007d8:	20000144 	.word	0x20000144
 80007dc:	50001400 	.word	0x50001400
 80007e0:	40000400 	.word	0x40000400

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b08d      	sub	sp, #52	@ 0x34
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	2414      	movs	r4, #20
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	0018      	movs	r0, r3
 80007f0:	231c      	movs	r3, #28
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f003 fda1 	bl	800433c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fa:	003b      	movs	r3, r7
 80007fc:	0018      	movs	r0, r3
 80007fe:	2314      	movs	r3, #20
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f003 fd9a 	bl	800433c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	0252      	lsls	r2, r2, #9
 8000814:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fbeb 	bl	8001ff4 <HAL_RCC_OscConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000822:	f000 f81c 	bl	800085e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	003b      	movs	r3, r7
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800082c:	003b      	movs	r3, r7
 800082e:	2201      	movs	r2, #1
 8000830:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800083e:	003b      	movs	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	003b      	movs	r3, r7
 8000846:	2100      	movs	r1, #0
 8000848:	0018      	movs	r0, r3
 800084a:	f001 fdb7 	bl	80023bc <HAL_RCC_ClockConfig>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000852:	f000 f804 	bl	800085e <Error_Handler>
  }
}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00d      	add	sp, #52	@ 0x34
 800085c:	bd90      	pop	{r4, r7, pc}

0800085e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000862:	b672      	cpsid	i
}
 8000864:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	e7fd      	b.n	8000866 <Error_Handler+0x8>
	...

0800086c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_SPI1_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <MX_SPI1_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_SPI1_Init+0x74>)
 8000878:	2282      	movs	r2, #130	@ 0x82
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_SPI1_Init+0x74>)
 8000886:	22e0      	movs	r2, #224	@ 0xe0
 8000888:	00d2      	lsls	r2, r2, #3
 800088a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_SPI1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_SPI1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_SPI1_Init+0x74>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	02d2      	lsls	r2, r2, #11
 800089e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_SPI1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_SPI1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_SPI1_Init+0x74>)
 80008ba:	2207      	movs	r2, #7
 80008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_SPI1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_SPI1_Init+0x74>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <MX_SPI1_Init+0x74>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 ffd1 	bl	8002874 <HAL_SPI_Init>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f7ff ffc2 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000e0 	.word	0x200000e0
 80008e4:	40013000 	.word	0x40013000

080008e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b091      	sub	sp, #68	@ 0x44
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	232c      	movs	r3, #44	@ 0x2c
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	0018      	movs	r0, r3
 80008f6:	2314      	movs	r3, #20
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f003 fd1e 	bl	800433c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	2410      	movs	r4, #16
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	231c      	movs	r3, #28
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f003 fd16 	bl	800433c <memset>
  if(spiHandle->Instance==SPI1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a22      	ldr	r2, [pc, #136]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d13e      	bne.n	8000998 <HAL_SPI_MspInit+0xb0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	0112      	lsls	r2, r2, #4
 8000920:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	f001 feb4 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000934:	f7ff ff93 	bl	800085e <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <HAL_SPI_MspInit+0xbc>)
 800093a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <HAL_SPI_MspInit+0xbc>)
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	0149      	lsls	r1, r1, #5
 8000942:	430a      	orrs	r2, r1
 8000944:	641a      	str	r2, [r3, #64]	@ 0x40
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <HAL_SPI_MspInit+0xbc>)
 8000948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094a:	2380      	movs	r3, #128	@ 0x80
 800094c:	015b      	lsls	r3, r3, #5
 800094e:	4013      	ands	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <HAL_SPI_MspInit+0xbc>)
 8000956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_SPI_MspInit+0xbc>)
 800095a:	2102      	movs	r1, #2
 800095c:	430a      	orrs	r2, r1
 800095e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000960:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <HAL_SPI_MspInit+0xbc>)
 8000962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000964:	2202      	movs	r2, #2
 8000966:	4013      	ands	r3, r2
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800096c:	212c      	movs	r1, #44	@ 0x2c
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2239      	movs	r2, #57	@ 0x39
 8000972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2202      	movs	r2, #2
 8000978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	187b      	adds	r3, r7, r1
 800098e:	4a06      	ldr	r2, [pc, #24]	@ (80009a8 <HAL_SPI_MspInit+0xc0>)
 8000990:	0019      	movs	r1, r3
 8000992:	0010      	movs	r0, r2
 8000994:	f001 f846 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b011      	add	sp, #68	@ 0x44
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	40013000 	.word	0x40013000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	50000400 	.word	0x50000400

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_MspInit+0x44>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	2201      	movs	r2, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_MspInit+0x44>)
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0549      	lsls	r1, r1, #21
 80009d4:	430a      	orrs	r2, r1
 80009d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_MspInit+0x44>)
 80009da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	055b      	lsls	r3, r3, #21
 80009e0:	4013      	ands	r3, r2
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 fa94 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <SystemInit+0x14>)
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	0512      	lsls	r2, r2, #20
 8000a32:	609a      	str	r2, [r3, #8]
#endif
}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	@ 0x38
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	2328      	movs	r3, #40	@ 0x28
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	001a      	movs	r2, r3
 8000a50:	2100      	movs	r1, #0
 8000a52:	f003 fc73 	bl	800433c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	231c      	movs	r3, #28
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	001a      	movs	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	f003 fc6b 	bl	800433c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	003b      	movs	r3, r7
 8000a68:	0018      	movs	r0, r3
 8000a6a:	231c      	movs	r3, #28
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f003 fc64 	bl	800433c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000a76:	4a30      	ldr	r2, [pc, #192]	@ (8000b38 <MX_TIM3_Init+0xf8>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000a7c:	2240      	movs	r2, #64	@ 0x40
 8000a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000a86:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000a88:	4a2c      	ldr	r2, [pc, #176]	@ (8000b3c <MX_TIM3_Init+0xfc>)
 8000a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a98:	4b26      	ldr	r3, [pc, #152]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 ffa2 	bl	80029e4 <HAL_TIM_Base_Init>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000aa4:	f7ff fedb 	bl	800085e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	2128      	movs	r1, #40	@ 0x28
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2280      	movs	r2, #128	@ 0x80
 8000aae:	0152      	lsls	r2, r2, #5
 8000ab0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ab2:	187a      	adds	r2, r7, r1
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f002 fa23 	bl	8002f04 <HAL_TIM_ConfigClockSource>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000ac2:	f7ff fecc 	bl	800085e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 ffe3 	bl	8002a94 <HAL_TIM_PWM_Init>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000ad2:	f7ff fec4 	bl	800085e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	211c      	movs	r1, #28
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae4:	187a      	adds	r2, r7, r1
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fea8 	bl	8003840 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000af4:	f7ff feb3 	bl	800085e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2260      	movs	r2, #96	@ 0x60
 8000afc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 8000afe:	003b      	movs	r3, r7
 8000b00:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <MX_TIM3_Init+0x100>)
 8000b02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	0039      	movs	r1, r7
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f002 f8f4 	bl	8002d04 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b20:	f7ff fe9d 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <MX_TIM3_Init+0xf4>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 f82a 	bl	8000b80 <HAL_TIM_MspPostInit>

}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b00e      	add	sp, #56	@ 0x38
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000144 	.word	0x20000144
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	00002710 	.word	0x00002710
 8000b40:	00001388 	.word	0x00001388

08000b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a09      	ldr	r2, [pc, #36]	@ (8000b78 <HAL_TIM_Base_MspInit+0x34>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10b      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_TIM_Base_MspInit+0x38>)
 8000b58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_TIM_Base_MspInit+0x38>)
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_TIM_Base_MspInit+0x38>)
 8000b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b66:	2202      	movs	r2, #2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b004      	add	sp, #16
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	240c      	movs	r4, #12
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	2314      	movs	r3, #20
 8000b90:	001a      	movs	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	f003 fbd2 	bl	800433c <memset>
  if(timHandle->Instance==TIM3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <HAL_TIM_MspPostInit+0x70>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d121      	bne.n	8000be6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_TIM_MspPostInit+0x74>)
 8000ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <HAL_TIM_MspPostInit+0x74>)
 8000ba8:	2104      	movs	r1, #4
 8000baa:	430a      	orrs	r2, r1
 8000bac:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <HAL_TIM_MspPostInit+0x74>)
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bba:	0021      	movs	r1, r4
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2240      	movs	r2, #64	@ 0x40
 8000bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	4a06      	ldr	r2, [pc, #24]	@ (8000bf8 <HAL_TIM_MspPostInit+0x78>)
 8000bde:	0019      	movs	r1, r3
 8000be0:	0010      	movs	r0, r2
 8000be2:	f000 ff1f 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b009      	add	sp, #36	@ 0x24
 8000bec:	bd90      	pop	{r4, r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	40000400 	.word	0x40000400
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	50000800 	.word	0x50000800

08000bfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c02:	4a24      	ldr	r2, [pc, #144]	@ (8000c94 <MX_USART1_UART_Init+0x98>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c08:	22e1      	movs	r2, #225	@ 0xe1
 8000c0a:	0252      	lsls	r2, r2, #9
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 fe5c 	bl	8003904 <HAL_UART_Init>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c50:	f7ff fe05 	bl	800085e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f003 fa8f 	bl	800417c <HAL_UARTEx_SetTxFifoThreshold>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f7ff fdfc 	bl	800085e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f003 fac6 	bl	80041fc <HAL_UARTEx_SetRxFifoThreshold>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f7ff fdf3 	bl	800085e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f003 fa44 	bl	8004108 <HAL_UARTEx_DisableFifoMode>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f7ff fdeb 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000190 	.word	0x20000190
 8000c94:	40013800 	.word	0x40013800

08000c98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000c9e:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <MX_USART2_UART_Init+0x64>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000ca4:	22e1      	movs	r2, #225	@ 0xe1
 8000ca6:	0252      	lsls	r2, r2, #9
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <MX_USART2_UART_Init+0x60>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fe0e 	bl	8003904 <HAL_UART_Init>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cec:	f7ff fdb7 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000224 	.word	0x20000224
 8000cfc:	40004400 	.word	0x40004400

08000d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b093      	sub	sp, #76	@ 0x4c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	2334      	movs	r3, #52	@ 0x34
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	2314      	movs	r3, #20
 8000d10:	001a      	movs	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	f003 fb12 	bl	800433c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d18:	2418      	movs	r4, #24
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	231c      	movs	r3, #28
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f003 fb0a 	bl	800433c <memset>
  if(uartHandle->Instance==USART1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e28 <HAL_UART_MspInit+0x128>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d13f      	bne.n	8000db2 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2201      	movs	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	0018      	movs	r0, r3
 8000d42:	f001 fca9 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	1e03      	subs	r3, r0, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4a:	f7ff fd88 	bl	800085e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4e:	4b37      	ldr	r3, [pc, #220]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d52:	4b36      	ldr	r3, [pc, #216]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	01c9      	lsls	r1, r1, #7
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d5c:	4b33      	ldr	r3, [pc, #204]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d60:	2380      	movs	r3, #128	@ 0x80
 8000d62:	01db      	lsls	r3, r3, #7
 8000d64:	4013      	ands	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b30      	ldr	r3, [pc, #192]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d70:	2101      	movs	r1, #1
 8000d72:	430a      	orrs	r2, r1
 8000d74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d76:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d82:	2134      	movs	r1, #52	@ 0x34
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2203      	movs	r2, #3
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2204      	movs	r2, #4
 8000da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	187a      	adds	r2, r7, r1
 8000da4:	23a0      	movs	r3, #160	@ 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fe3a 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000db0:	e036      	b.n	8000e20 <HAL_UART_MspInit+0x120>
  else if(uartHandle->Instance==USART2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e30 <HAL_UART_MspInit+0x130>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d131      	bne.n	8000e20 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dc2:	2180      	movs	r1, #128	@ 0x80
 8000dc4:	0289      	lsls	r1, r1, #10
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dce:	2380      	movs	r3, #128	@ 0x80
 8000dd0:	029b      	lsls	r3, r3, #10
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	430a      	orrs	r2, r1
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <HAL_UART_MspInit+0x12c>)
 8000de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de8:	2201      	movs	r2, #1
 8000dea:	4013      	ands	r3, r2
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000df0:	2134      	movs	r1, #52	@ 0x34
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2281      	movs	r2, #129	@ 0x81
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2201      	movs	r2, #1
 8000e10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	187a      	adds	r2, r7, r1
 8000e14:	23a0      	movs	r3, #160	@ 0xa0
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	0011      	movs	r1, r2
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 fe02 	bl	8001a24 <HAL_GPIO_Init>
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b013      	add	sp, #76	@ 0x4c
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40004400 	.word	0x40004400

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e38:	f7ff fdf6 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e48:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <LoopForever+0xa>)
  ldr r3, =_edata
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <LoopForever+0xe>)
  adds r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <LoopForever+0x12>)
  b LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  str  r3, [r2]
 8000e58:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5a:	3204      	adds	r2, #4

08000e5c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <LoopForever+0x16>)
  cmp r2, r3
 8000e5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000e62:	f003 fa73 	bl	800434c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fc8b 	bl	8000780 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000e70:	08004490 	.word	0x08004490
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e78:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000e7c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000e80:	200002bc 	.word	0x200002bc

08000e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_IRQHandler>

08000e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e92:	2003      	movs	r0, #3
 8000e94:	f000 f80e 	bl	8000eb4 <HAL_InitTick>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e001      	b.n	8000ea8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea4:	f7ff fd82 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_InitTick+0x88>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d02b      	beq.n	8000f24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_InitTick+0x8c>)
 8000ece:	681c      	ldr	r4, [r3, #0]
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <HAL_InitTick+0x88>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	23fa      	movs	r3, #250	@ 0xfa
 8000ed8:	0098      	lsls	r0, r3, #2
 8000eda:	f7ff f915 	bl	8000108 <__udivsi3>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f7ff f910 	bl	8000108 <__udivsi3>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fd8d 	bl	8001a0a <HAL_SYSTICK_Config>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d112      	bne.n	8000f1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d80a      	bhi.n	8000f10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	2301      	movs	r3, #1
 8000efe:	425b      	negs	r3, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 fd6c 	bl	80019e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <HAL_InitTick+0x90>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e00d      	b.n	8000f2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	e008      	b.n	8000f2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e003      	b.n	8000f2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
}
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b005      	add	sp, #20
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_IncTick+0x1c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	001a      	movs	r2, r3
 8000f52:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	18d2      	adds	r2, r2, r3
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	20000008 	.word	0x20000008
 8000f68:	200002b8 	.word	0x200002b8

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b02      	ldr	r3, [pc, #8]	@ (8000f7c <HAL_GetTick+0x10>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	200002b8 	.word	0x200002b8

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff fff0 	bl	8000f6c <HAL_GetTick>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3301      	adds	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	f7ff ffe0 	bl	8000f6c <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000fd8:	401a      	ands	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	ff3fffff 	.word	0xff3fffff

08000ff0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	23c0      	movs	r3, #192	@ 0xc0
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	4013      	ands	r3, r2
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}

0800100a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	2104      	movs	r1, #4
 800101e:	400a      	ands	r2, r1
 8001020:	2107      	movs	r1, #7
 8001022:	4091      	lsls	r1, r2
 8001024:	000a      	movs	r2, r1
 8001026:	43d2      	mvns	r2, r2
 8001028:	401a      	ands	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2104      	movs	r1, #4
 800102e:	400b      	ands	r3, r1
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4099      	lsls	r1, r3
 8001034:	000b      	movs	r3, r1
 8001036:	431a      	orrs	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b004      	add	sp, #16
 8001042:	bd80      	pop	{r7, pc}

08001044 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	2104      	movs	r1, #4
 8001056:	400a      	ands	r2, r1
 8001058:	2107      	movs	r1, #7
 800105a:	4091      	lsls	r1, r2
 800105c:	000a      	movs	r2, r1
 800105e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2104      	movs	r1, #4
 8001064:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001066:	40da      	lsrs	r2, r3
 8001068:	0013      	movs	r3, r2
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}

08001072 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	211f      	movs	r1, #31
 8001086:	400a      	ands	r2, r1
 8001088:	210f      	movs	r1, #15
 800108a:	4091      	lsls	r1, r2
 800108c:	000a      	movs	r2, r1
 800108e:	43d2      	mvns	r2, r2
 8001090:	401a      	ands	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	0e9b      	lsrs	r3, r3, #26
 8001096:	210f      	movs	r1, #15
 8001098:	4019      	ands	r1, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	201f      	movs	r0, #31
 800109e:	4003      	ands	r3, r0
 80010a0:	4099      	lsls	r1, r3
 80010a2:	000b      	movs	r3, r1
 80010a4:	431a      	orrs	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	0a5b      	lsrs	r3, r3, #9
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	0a52      	lsrs	r2, r2, #9
 80010e8:	43d2      	mvns	r2, r2
 80010ea:	401a      	ands	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	0212      	lsls	r2, r2, #8
 800110c:	43d2      	mvns	r2, r2
 800110e:	401a      	ands	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	400b      	ands	r3, r1
 8001118:	4904      	ldr	r1, [pc, #16]	@ (800112c <LL_ADC_SetChannelSamplingTime+0x34>)
 800111a:	400b      	ands	r3, r1
 800111c:	431a      	orrs	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b004      	add	sp, #16
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	7fffff00 	.word	0x7fffff00

08001130 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <LL_ADC_EnableInternalRegulator+0x24>)
 800113e:	4013      	ands	r3, r2
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	0552      	lsls	r2, r2, #21
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	6fffffe8 	.word	0x6fffffe8

08001158 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	055b      	lsls	r3, r3, #21
 8001168:	401a      	ands	r2, r3
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	055b      	lsls	r3, r3, #21
 800116e:	429a      	cmp	r2, r3
 8001170:	d101      	bne.n	8001176 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001176:	2300      	movs	r3, #0
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}

08001180 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2201      	movs	r2, #1
 800118e:	4013      	ands	r3, r2
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <LL_ADC_IsEnabled+0x18>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <LL_ADC_IsEnabled+0x1a>
 8001198:	2300      	movs	r3, #0
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2204      	movs	r2, #4
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d101      	bne.n	80011ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	231f      	movs	r3, #31
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e17e      	b.n	80014e8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10a      	bne.n	8001208 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff f969 	bl	80004cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2254      	movs	r2, #84	@ 0x54
 8001204:	2100      	movs	r1, #0
 8001206:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ffa3 	bl	8001158 <LL_ADC_IsInternalRegulatorEnabled>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d114      	bne.n	8001240 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff ff88 	bl	8001130 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001220:	4bb3      	ldr	r3, [pc, #716]	@ (80014f0 <HAL_ADC_Init+0x32c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	49b3      	ldr	r1, [pc, #716]	@ (80014f4 <HAL_ADC_Init+0x330>)
 8001226:	0018      	movs	r0, r3
 8001228:	f7fe ff6e 	bl	8000108 <__udivsi3>
 800122c:	0003      	movs	r3, r0
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001232:	e002      	b.n	800123a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3b01      	subs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f9      	bne.n	8001234 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ff87 	bl	8001158 <LL_ADC_IsInternalRegulatorEnabled>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d10f      	bne.n	800126e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	2210      	movs	r2, #16
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800125e:	2201      	movs	r2, #1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001266:	231f      	movs	r3, #31
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff ff95 	bl	80011a2 <LL_ADC_REG_IsConversionOngoing>
 8001278:	0003      	movs	r3, r0
 800127a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	2210      	movs	r2, #16
 8001282:	4013      	ands	r3, r2
 8001284:	d000      	beq.n	8001288 <HAL_ADC_Init+0xc4>
 8001286:	e122      	b.n	80014ce <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d000      	beq.n	8001290 <HAL_ADC_Init+0xcc>
 800128e:	e11e      	b.n	80014ce <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	4a98      	ldr	r2, [pc, #608]	@ (80014f8 <HAL_ADC_Init+0x334>)
 8001296:	4013      	ands	r3, r2
 8001298:	2202      	movs	r2, #2
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff ff6b 	bl	8001180 <LL_ADC_IsEnabled>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d000      	beq.n	80012b0 <HAL_ADC_Init+0xec>
 80012ae:	e0ad      	b.n	800140c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7e1b      	ldrb	r3, [r3, #24]
 80012b8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012ba:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e5b      	ldrb	r3, [r3, #25]
 80012c0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012c2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e9b      	ldrb	r3, [r3, #26]
 80012c8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012ca:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <HAL_ADC_Init+0x116>
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	015b      	lsls	r3, r3, #5
 80012d8:	e000      	b.n	80012dc <HAL_ADC_Init+0x118>
 80012da:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012dc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012e2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da04      	bge.n	80012f6 <HAL_ADC_Init+0x132>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	e001      	b.n	80012fa <HAL_ADC_Init+0x136>
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80012fa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	212c      	movs	r1, #44	@ 0x2c
 8001300:	5c5b      	ldrb	r3, [r3, r1]
 8001302:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001304:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2220      	movs	r2, #32
 8001310:	5c9b      	ldrb	r3, [r3, r2]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d115      	bne.n	8001342 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7e9b      	ldrb	r3, [r3, #26]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	0252      	lsls	r2, r2, #9
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	e00b      	b.n	8001342 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	2220      	movs	r2, #32
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133a:	2201      	movs	r2, #1
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800134e:	23e0      	movs	r3, #224	@ 0xe0
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001358:	4313      	orrs	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	4a65      	ldr	r2, [pc, #404]	@ (80014fc <HAL_ADC_Init+0x338>)
 8001368:	4013      	ands	r3, r2
 800136a:	0019      	movs	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	430a      	orrs	r2, r1
 8001374:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	0f9b      	lsrs	r3, r3, #30
 800137c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001382:	4313      	orrs	r3, r2
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	223c      	movs	r2, #60	@ 0x3c
 800138e:	5c9b      	ldrb	r3, [r3, r2]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d111      	bne.n	80013b8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	0f9b      	lsrs	r3, r3, #30
 800139a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80013a0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80013a6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80013ac:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	2201      	movs	r2, #1
 80013b4:	4313      	orrs	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	4a50      	ldr	r2, [pc, #320]	@ (8001500 <HAL_ADC_Init+0x33c>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	0019      	movs	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	23c0      	movs	r3, #192	@ 0xc0
 80013d4:	061b      	lsls	r3, r3, #24
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d018      	beq.n	800140c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	05db      	lsls	r3, r3, #23
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d012      	beq.n	800140c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013ea:	2380      	movs	r3, #128	@ 0x80
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d00c      	beq.n	800140c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013f2:	4b44      	ldr	r3, [pc, #272]	@ (8001504 <HAL_ADC_Init+0x340>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a44      	ldr	r2, [pc, #272]	@ (8001508 <HAL_ADC_Init+0x344>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	0019      	movs	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	23f0      	movs	r3, #240	@ 0xf0
 8001402:	039b      	lsls	r3, r3, #14
 8001404:	401a      	ands	r2, r3
 8001406:	4b3f      	ldr	r3, [pc, #252]	@ (8001504 <HAL_ADC_Init+0x340>)
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001414:	001a      	movs	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	f7ff fdf7 	bl	800100a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001424:	4939      	ldr	r1, [pc, #228]	@ (800150c <HAL_ADC_Init+0x348>)
 8001426:	001a      	movs	r2, r3
 8001428:	f7ff fdef 	bl	800100a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d109      	bne.n	8001448 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2110      	movs	r1, #16
 8001440:	4249      	negs	r1, r1
 8001442:	430a      	orrs	r2, r1
 8001444:	629a      	str	r2, [r3, #40]	@ 0x28
 8001446:	e018      	b.n	800147a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	039b      	lsls	r3, r3, #14
 8001450:	429a      	cmp	r2, r3
 8001452:	d112      	bne.n	800147a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	3b01      	subs	r3, #1
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	221c      	movs	r2, #28
 8001464:	4013      	ands	r3, r2
 8001466:	2210      	movs	r2, #16
 8001468:	4252      	negs	r2, r2
 800146a:	409a      	lsls	r2, r3
 800146c:	0011      	movs	r1, r2
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2100      	movs	r1, #0
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff fddf 	bl	8001044 <LL_ADC_GetSamplingTimeCommonChannels>
 8001486:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800148c:	429a      	cmp	r2, r3
 800148e:	d10b      	bne.n	80014a8 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	2203      	movs	r2, #3
 800149c:	4393      	bics	r3, r2
 800149e:	2201      	movs	r2, #1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014a6:	e01c      	b.n	80014e2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	2212      	movs	r2, #18
 80014ae:	4393      	bics	r3, r2
 80014b0:	2210      	movs	r2, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014bc:	2201      	movs	r2, #1
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80014c4:	231f      	movs	r3, #31
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014cc:	e009      	b.n	80014e2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	2210      	movs	r2, #16
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80014da:	231f      	movs	r3, #31
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80014e2:	231f      	movs	r3, #31
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	781b      	ldrb	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b008      	add	sp, #32
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	00030d40 	.word	0x00030d40
 80014f8:	fffffefd 	.word	0xfffffefd
 80014fc:	ffde0201 	.word	0xffde0201
 8001500:	1ffffc02 	.word	0x1ffffc02
 8001504:	40012708 	.word	0x40012708
 8001508:	ffc3ffff 	.word	0xffc3ffff
 800150c:	7fffff04 	.word	0x7fffff04

08001510 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151a:	2317      	movs	r3, #23
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2254      	movs	r2, #84	@ 0x54
 800152a:	5c9b      	ldrb	r3, [r3, r2]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x24>
 8001530:	2302      	movs	r3, #2
 8001532:	e1be      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x3a2>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2254      	movs	r2, #84	@ 0x54
 8001538:	2101      	movs	r1, #1
 800153a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff fe2e 	bl	80011a2 <LL_ADC_REG_IsConversionOngoing>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d000      	beq.n	800154c <HAL_ADC_ConfigChannel+0x3c>
 800154a:	e1a1      	b.n	8001890 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d100      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x46>
 8001554:	e152      	b.n	80017fc <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691a      	ldr	r2, [r3, #16]
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	429a      	cmp	r2, r3
 8001560:	d004      	beq.n	800156c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001566:	4ac2      	ldr	r2, [pc, #776]	@ (8001870 <HAL_ADC_ConfigChannel+0x360>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d108      	bne.n	800157e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0019      	movs	r1, r3
 8001576:	0010      	movs	r0, r2
 8001578:	f7ff fd9b 	bl	80010b2 <LL_ADC_REG_SetSequencerChAdd>
 800157c:	e0ed      	b.n	800175a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	211f      	movs	r1, #31
 8001588:	400b      	ands	r3, r1
 800158a:	210f      	movs	r1, #15
 800158c:	4099      	lsls	r1, r3
 800158e:	000b      	movs	r3, r1
 8001590:	43db      	mvns	r3, r3
 8001592:	4013      	ands	r3, r2
 8001594:	0019      	movs	r1, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	0a5b      	lsrs	r3, r3, #9
 800159e:	d105      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x9c>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0e9b      	lsrs	r3, r3, #26
 80015a6:	221f      	movs	r2, #31
 80015a8:	4013      	ands	r3, r2
 80015aa:	e0bc      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	d000      	beq.n	80015b8 <HAL_ADC_ConfigChannel+0xa8>
 80015b6:	e0b5      	b.n	8001724 <HAL_ADC_ConfigChannel+0x214>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d000      	beq.n	80015c4 <HAL_ADC_ConfigChannel+0xb4>
 80015c2:	e0ad      	b.n	8001720 <HAL_ADC_ConfigChannel+0x210>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2204      	movs	r2, #4
 80015ca:	4013      	ands	r3, r2
 80015cc:	d000      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0xc0>
 80015ce:	e0a5      	b.n	800171c <HAL_ADC_ConfigChannel+0x20c>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2208      	movs	r2, #8
 80015d6:	4013      	ands	r3, r2
 80015d8:	d000      	beq.n	80015dc <HAL_ADC_ConfigChannel+0xcc>
 80015da:	e09d      	b.n	8001718 <HAL_ADC_ConfigChannel+0x208>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2210      	movs	r2, #16
 80015e2:	4013      	ands	r3, r2
 80015e4:	d000      	beq.n	80015e8 <HAL_ADC_ConfigChannel+0xd8>
 80015e6:	e095      	b.n	8001714 <HAL_ADC_ConfigChannel+0x204>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2220      	movs	r2, #32
 80015ee:	4013      	ands	r3, r2
 80015f0:	d000      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0xe4>
 80015f2:	e08d      	b.n	8001710 <HAL_ADC_ConfigChannel+0x200>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2240      	movs	r2, #64	@ 0x40
 80015fa:	4013      	ands	r3, r2
 80015fc:	d000      	beq.n	8001600 <HAL_ADC_ConfigChannel+0xf0>
 80015fe:	e085      	b.n	800170c <HAL_ADC_ConfigChannel+0x1fc>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	4013      	ands	r3, r2
 8001608:	d000      	beq.n	800160c <HAL_ADC_ConfigChannel+0xfc>
 800160a:	e07d      	b.n	8001708 <HAL_ADC_ConfigChannel+0x1f8>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4013      	ands	r3, r2
 8001616:	d000      	beq.n	800161a <HAL_ADC_ConfigChannel+0x10a>
 8001618:	e074      	b.n	8001704 <HAL_ADC_ConfigChannel+0x1f4>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d000      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x118>
 8001626:	e06b      	b.n	8001700 <HAL_ADC_ConfigChannel+0x1f0>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4013      	ands	r3, r2
 8001632:	d000      	beq.n	8001636 <HAL_ADC_ConfigChannel+0x126>
 8001634:	e062      	b.n	80016fc <HAL_ADC_ConfigChannel+0x1ec>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4013      	ands	r3, r2
 8001640:	d000      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x134>
 8001642:	e059      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x1e8>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	015b      	lsls	r3, r3, #5
 800164c:	4013      	ands	r3, r2
 800164e:	d151      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1e4>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	019b      	lsls	r3, r3, #6
 8001658:	4013      	ands	r3, r2
 800165a:	d149      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1e0>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	01db      	lsls	r3, r3, #7
 8001664:	4013      	ands	r3, r2
 8001666:	d141      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x1dc>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	4013      	ands	r3, r2
 8001672:	d139      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1d8>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	4013      	ands	r3, r2
 800167e:	d131      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1d4>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d129      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1d0>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	02db      	lsls	r3, r3, #11
 8001694:	4013      	ands	r3, r2
 8001696:	d121      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1cc>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	031b      	lsls	r3, r3, #12
 80016a0:	4013      	ands	r3, r2
 80016a2:	d119      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1c8>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	035b      	lsls	r3, r3, #13
 80016ac:	4013      	ands	r3, r2
 80016ae:	d111      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1c4>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	039b      	lsls	r3, r3, #14
 80016b8:	4013      	ands	r3, r2
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1c0>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	03db      	lsls	r3, r3, #15
 80016c4:	4013      	ands	r3, r2
 80016c6:	d001      	beq.n	80016cc <HAL_ADC_ConfigChannel+0x1bc>
 80016c8:	2316      	movs	r3, #22
 80016ca:	e02c      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016cc:	2300      	movs	r3, #0
 80016ce:	e02a      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016d0:	2315      	movs	r3, #21
 80016d2:	e028      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016d4:	2314      	movs	r3, #20
 80016d6:	e026      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016d8:	2313      	movs	r3, #19
 80016da:	e024      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016dc:	2312      	movs	r3, #18
 80016de:	e022      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016e0:	2311      	movs	r3, #17
 80016e2:	e020      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016e4:	2310      	movs	r3, #16
 80016e6:	e01e      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016e8:	230f      	movs	r3, #15
 80016ea:	e01c      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016ec:	230e      	movs	r3, #14
 80016ee:	e01a      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016f0:	230d      	movs	r3, #13
 80016f2:	e018      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016f4:	230c      	movs	r3, #12
 80016f6:	e016      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016f8:	230b      	movs	r3, #11
 80016fa:	e014      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 80016fc:	230a      	movs	r3, #10
 80016fe:	e012      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 8001700:	2309      	movs	r3, #9
 8001702:	e010      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 8001704:	2308      	movs	r3, #8
 8001706:	e00e      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 8001708:	2307      	movs	r3, #7
 800170a:	e00c      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 800170c:	2306      	movs	r3, #6
 800170e:	e00a      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 8001710:	2305      	movs	r3, #5
 8001712:	e008      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 8001714:	2304      	movs	r3, #4
 8001716:	e006      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 8001718:	2303      	movs	r3, #3
 800171a:	e004      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_ADC_ConfigChannel+0x216>
 8001724:	2300      	movs	r3, #0
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	6852      	ldr	r2, [r2, #4]
 800172a:	201f      	movs	r0, #31
 800172c:	4002      	ands	r2, r0
 800172e:	4093      	lsls	r3, r2
 8001730:	000a      	movs	r2, r1
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	429a      	cmp	r2, r3
 8001746:	d808      	bhi.n	800175a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	001a      	movs	r2, r3
 8001756:	f7ff fc8c 	bl	8001072 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	001a      	movs	r2, r3
 8001768:	f7ff fcc6 	bl	80010f8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db00      	blt.n	8001776 <HAL_ADC_ConfigChannel+0x266>
 8001774:	e096      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001776:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <HAL_ADC_ConfigChannel+0x364>)
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff fc39 	bl	8000ff0 <LL_ADC_GetCommonPathInternalCh>
 800177e:	0003      	movs	r3, r0
 8001780:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a3c      	ldr	r2, [pc, #240]	@ (8001878 <HAL_ADC_ConfigChannel+0x368>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d123      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001794:	d11e      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2280      	movs	r2, #128	@ 0x80
 800179a:	0412      	lsls	r2, r2, #16
 800179c:	4313      	orrs	r3, r2
 800179e:	4a35      	ldr	r2, [pc, #212]	@ (8001874 <HAL_ADC_ConfigChannel+0x364>)
 80017a0:	0019      	movs	r1, r3
 80017a2:	0010      	movs	r0, r2
 80017a4:	f7ff fc10 	bl	8000fc8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80017a8:	4b34      	ldr	r3, [pc, #208]	@ (800187c <HAL_ADC_ConfigChannel+0x36c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4934      	ldr	r1, [pc, #208]	@ (8001880 <HAL_ADC_ConfigChannel+0x370>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7fe fcaa 	bl	8000108 <__udivsi3>
 80017b4:	0003      	movs	r3, r0
 80017b6:	001a      	movs	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	189b      	adds	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	3301      	adds	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017c4:	e002      	b.n	80017cc <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f9      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017d2:	e067      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001884 <HAL_ADC_ConfigChannel+0x374>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d162      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	03db      	lsls	r3, r3, #15
 80017e4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017e6:	d15d      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2280      	movs	r2, #128	@ 0x80
 80017ec:	03d2      	lsls	r2, r2, #15
 80017ee:	4313      	orrs	r3, r2
 80017f0:	4a20      	ldr	r2, [pc, #128]	@ (8001874 <HAL_ADC_ConfigChannel+0x364>)
 80017f2:	0019      	movs	r1, r3
 80017f4:	0010      	movs	r0, r2
 80017f6:	f7ff fbe7 	bl	8000fc8 <LL_ADC_SetCommonPathInternalCh>
 80017fa:	e053      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	061b      	lsls	r3, r3, #24
 8001804:	429a      	cmp	r2, r3
 8001806:	d004      	beq.n	8001812 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800180c:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <HAL_ADC_ConfigChannel+0x360>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d107      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0019      	movs	r1, r3
 800181c:	0010      	movs	r0, r2
 800181e:	f7ff fc59 	bl	80010d4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da3c      	bge.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_ADC_ConfigChannel+0x364>)
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fbdf 	bl	8000ff0 <LL_ADC_GetCommonPathInternalCh>
 8001832:	0003      	movs	r3, r0
 8001834:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0f      	ldr	r2, [pc, #60]	@ (8001878 <HAL_ADC_ConfigChannel+0x368>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d108      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4a11      	ldr	r2, [pc, #68]	@ (8001888 <HAL_ADC_ConfigChannel+0x378>)
 8001844:	4013      	ands	r3, r2
 8001846:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <HAL_ADC_ConfigChannel+0x364>)
 8001848:	0019      	movs	r1, r3
 800184a:	0010      	movs	r0, r2
 800184c:	f7ff fbbc 	bl	8000fc8 <LL_ADC_SetCommonPathInternalCh>
 8001850:	e028      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <HAL_ADC_ConfigChannel+0x374>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d123      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <HAL_ADC_ConfigChannel+0x37c>)
 8001860:	4013      	ands	r3, r2
 8001862:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <HAL_ADC_ConfigChannel+0x364>)
 8001864:	0019      	movs	r1, r3
 8001866:	0010      	movs	r0, r2
 8001868:	f7ff fbae 	bl	8000fc8 <LL_ADC_SetCommonPathInternalCh>
 800186c:	e01a      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x394>
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	80000004 	.word	0x80000004
 8001874:	40012708 	.word	0x40012708
 8001878:	a4000200 	.word	0xa4000200
 800187c:	20000000 	.word	0x20000000
 8001880:	00030d40 	.word	0x00030d40
 8001884:	a8000400 	.word	0xa8000400
 8001888:	ff7fffff 	.word	0xff7fffff
 800188c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	2220      	movs	r2, #32
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800189c:	2317      	movs	r3, #23
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2254      	movs	r2, #84	@ 0x54
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80018ac:	2317      	movs	r3, #23
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	781b      	ldrb	r3, [r3, #0]
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b006      	add	sp, #24
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	0002      	movs	r2, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	1dfb      	adds	r3, r7, #7
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80018d0:	d828      	bhi.n	8001924 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001990 <__NVIC_SetPriority+0xd4>)
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	33c0      	adds	r3, #192	@ 0xc0
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	589b      	ldr	r3, [r3, r2]
 80018e2:	1dfa      	adds	r2, r7, #7
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	0011      	movs	r1, r2
 80018e8:	2203      	movs	r2, #3
 80018ea:	400a      	ands	r2, r1
 80018ec:	00d2      	lsls	r2, r2, #3
 80018ee:	21ff      	movs	r1, #255	@ 0xff
 80018f0:	4091      	lsls	r1, r2
 80018f2:	000a      	movs	r2, r1
 80018f4:	43d2      	mvns	r2, r2
 80018f6:	401a      	ands	r2, r3
 80018f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	019b      	lsls	r3, r3, #6
 80018fe:	22ff      	movs	r2, #255	@ 0xff
 8001900:	401a      	ands	r2, r3
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	0018      	movs	r0, r3
 8001908:	2303      	movs	r3, #3
 800190a:	4003      	ands	r3, r0
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001910:	481f      	ldr	r0, [pc, #124]	@ (8001990 <__NVIC_SetPriority+0xd4>)
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b25b      	sxtb	r3, r3
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	430a      	orrs	r2, r1
 800191c:	33c0      	adds	r3, #192	@ 0xc0
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001922:	e031      	b.n	8001988 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001924:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <__NVIC_SetPriority+0xd8>)
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	0019      	movs	r1, r3
 800192c:	230f      	movs	r3, #15
 800192e:	400b      	ands	r3, r1
 8001930:	3b08      	subs	r3, #8
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3306      	adds	r3, #6
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	3304      	adds	r3, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1dfa      	adds	r2, r7, #7
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	0011      	movs	r1, r2
 8001944:	2203      	movs	r2, #3
 8001946:	400a      	ands	r2, r1
 8001948:	00d2      	lsls	r2, r2, #3
 800194a:	21ff      	movs	r1, #255	@ 0xff
 800194c:	4091      	lsls	r1, r2
 800194e:	000a      	movs	r2, r1
 8001950:	43d2      	mvns	r2, r2
 8001952:	401a      	ands	r2, r3
 8001954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	019b      	lsls	r3, r3, #6
 800195a:	22ff      	movs	r2, #255	@ 0xff
 800195c:	401a      	ands	r2, r3
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	0018      	movs	r0, r3
 8001964:	2303      	movs	r3, #3
 8001966:	4003      	ands	r3, r0
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196c:	4809      	ldr	r0, [pc, #36]	@ (8001994 <__NVIC_SetPriority+0xd8>)
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	001c      	movs	r4, r3
 8001974:	230f      	movs	r3, #15
 8001976:	4023      	ands	r3, r4
 8001978:	3b08      	subs	r3, #8
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	430a      	orrs	r2, r1
 800197e:	3306      	adds	r3, #6
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	18c3      	adds	r3, r0, r3
 8001984:	3304      	adds	r3, #4
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b003      	add	sp, #12
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	1e5a      	subs	r2, r3, #1
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	045b      	lsls	r3, r3, #17
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d301      	bcc.n	80019b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ac:	2301      	movs	r3, #1
 80019ae:	e010      	b.n	80019d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <SysTick_Config+0x44>)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	3a01      	subs	r2, #1
 80019b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b8:	2301      	movs	r3, #1
 80019ba:	425b      	negs	r3, r3
 80019bc:	2103      	movs	r1, #3
 80019be:	0018      	movs	r0, r3
 80019c0:	f7ff ff7c 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <SysTick_Config+0x44>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <SysTick_Config+0x44>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	210f      	movs	r1, #15
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	1c02      	adds	r2, r0, #0
 80019f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	0011      	movs	r1, r2
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff ffbf 	bl	8001998 <SysTick_Config>
 8001a1a:	0003      	movs	r3, r0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a32:	e153      	b.n	8001cdc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4091      	lsls	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d100      	bne.n	8001a4c <HAL_GPIO_Init+0x28>
 8001a4a:	e144      	b.n	8001cd6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x38>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b12      	cmp	r3, #18
 8001a5a:	d125      	bne.n	8001aa8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	08da      	lsrs	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3208      	adds	r2, #8
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	58d3      	ldr	r3, [r2, r3]
 8001a68:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	4013      	ands	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	220f      	movs	r2, #15
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	220f      	movs	r2, #15
 8001a86:	401a      	ands	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2107      	movs	r1, #7
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	409a      	lsls	r2, r3
 8001a92:	0013      	movs	r3, r2
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	6979      	ldr	r1, [r7, #20]
 8001aa6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	0013      	movs	r3, r2
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	0013      	movs	r3, r2
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d00b      	beq.n	8001afc <HAL_GPIO_Init+0xd8>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af0:	2b11      	cmp	r3, #17
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	0013      	movs	r3, r2
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	2201      	movs	r2, #1
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d017      	beq.n	8001b96 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	43da      	mvns	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	2380      	movs	r3, #128	@ 0x80
 8001b9c:	055b      	lsls	r3, r3, #21
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d100      	bne.n	8001ba4 <HAL_GPIO_Init+0x180>
 8001ba2:	e098      	b.n	8001cd6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ba4:	4a53      	ldr	r2, [pc, #332]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3318      	adds	r3, #24
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	589b      	ldr	r3, [r3, r2]
 8001bb0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	220f      	movs	r2, #15
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	23a0      	movs	r3, #160	@ 0xa0
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d019      	beq.n	8001c06 <HAL_GPIO_Init+0x1e2>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a48      	ldr	r2, [pc, #288]	@ (8001cf8 <HAL_GPIO_Init+0x2d4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0x1de>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a47      	ldr	r2, [pc, #284]	@ (8001cfc <HAL_GPIO_Init+0x2d8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00d      	beq.n	8001bfe <HAL_GPIO_Init+0x1da>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a46      	ldr	r2, [pc, #280]	@ (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d007      	beq.n	8001bfa <HAL_GPIO_Init+0x1d6>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a45      	ldr	r2, [pc, #276]	@ (8001d04 <HAL_GPIO_Init+0x2e0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_GPIO_Init+0x1d2>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e008      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e004      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001c06:	2300      	movs	r3, #0
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	00d2      	lsls	r2, r2, #3
 8001c10:	4093      	lsls	r3, r2
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001c18:	4936      	ldr	r1, [pc, #216]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3318      	adds	r3, #24
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001c26:	4a33      	ldr	r2, [pc, #204]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	58d3      	ldr	r3, [r2, r3]
 8001c2c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43da      	mvns	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	025b      	lsls	r3, r3, #9
 8001c40:	4013      	ands	r3, r2
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001c4c:	4929      	ldr	r1, [pc, #164]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	2280      	movs	r2, #128	@ 0x80
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001c54:	4a27      	ldr	r2, [pc, #156]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c56:	2384      	movs	r3, #132	@ 0x84
 8001c58:	58d3      	ldr	r3, [r2, r3]
 8001c5a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	4013      	ands	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001c7a:	491e      	ldr	r1, [pc, #120]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c7c:	2284      	movs	r2, #132	@ 0x84
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001c82:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	035b      	lsls	r3, r3, #13
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	039b      	lsls	r3, r3, #14
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	40da      	lsrs	r2, r3
 8001ce4:	1e13      	subs	r3, r2, #0
 8001ce6:	d000      	beq.n	8001cea <HAL_GPIO_Init+0x2c6>
 8001ce8:	e6a4      	b.n	8001a34 <HAL_GPIO_Init+0x10>
  }
}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b006      	add	sp, #24
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021800 	.word	0x40021800
 8001cf8:	50000400 	.word	0x50000400
 8001cfc:	50000800 	.word	0x50000800
 8001d00:	50000c00 	.word	0x50000c00
 8001d04:	50001400 	.word	0x50001400

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	0008      	movs	r0, r1
 8001d12:	0011      	movs	r1, r2
 8001d14:	1cbb      	adds	r3, r7, #2
 8001d16:	1c02      	adds	r2, r0, #0
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	1c7b      	adds	r3, r7, #1
 8001d1c:	1c0a      	adds	r2, r1, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d20:	1c7b      	adds	r3, r7, #1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d28:	1cbb      	adds	r3, r7, #2
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d32:	1cbb      	adds	r3, r7, #2
 8001d34:	881a      	ldrh	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	1cbb      	adds	r3, r7, #2
 8001d4e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d56:	1cbb      	adds	r3, r7, #2
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	041a      	lsls	r2, r3, #16
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	1cb9      	adds	r1, r7, #2
 8001d66:	8809      	ldrh	r1, [r1, #0]
 8001d68:	400b      	ands	r3, r1
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
}
 8001d70:	46c0      	nop			@ (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b004      	add	sp, #16
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e08f      	b.n	8001eaa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2241      	movs	r2, #65	@ 0x41
 8001d8e:	5c9b      	ldrb	r3, [r3, r2]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2240      	movs	r2, #64	@ 0x40
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7fe fc8b 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2241      	movs	r2, #65	@ 0x41
 8001daa:	2124      	movs	r1, #36	@ 0x24
 8001dac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	438a      	bics	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	493b      	ldr	r1, [pc, #236]	@ (8001eb4 <HAL_I2C_Init+0x13c>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4938      	ldr	r1, [pc, #224]	@ (8001eb8 <HAL_I2C_Init+0x140>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d108      	bne.n	8001df6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0209      	lsls	r1, r1, #8
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	e007      	b.n	8001e06 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2184      	movs	r1, #132	@ 0x84
 8001e00:	0209      	lsls	r1, r1, #8
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d109      	bne.n	8001e22 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2180      	movs	r1, #128	@ 0x80
 8001e1a:	0109      	lsls	r1, r1, #4
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	e007      	b.n	8001e32 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4923      	ldr	r1, [pc, #140]	@ (8001ebc <HAL_I2C_Init+0x144>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4920      	ldr	r1, [pc, #128]	@ (8001ec0 <HAL_I2C_Init+0x148>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	491a      	ldr	r1, [pc, #104]	@ (8001eb8 <HAL_I2C_Init+0x140>)
 8001e4e:	400a      	ands	r2, r1
 8001e50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69d9      	ldr	r1, [r3, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2241      	movs	r2, #65	@ 0x41
 8001e96:	2120      	movs	r1, #32
 8001e98:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2242      	movs	r2, #66	@ 0x42
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	f0ffffff 	.word	0xf0ffffff
 8001eb8:	ffff7fff 	.word	0xffff7fff
 8001ebc:	fffff7ff 	.word	0xfffff7ff
 8001ec0:	02008000 	.word	0x02008000

08001ec4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2241      	movs	r2, #65	@ 0x41
 8001ed2:	5c9b      	ldrb	r3, [r3, r2]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d138      	bne.n	8001f4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2240      	movs	r2, #64	@ 0x40
 8001ede:	5c9b      	ldrb	r3, [r3, r2]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e032      	b.n	8001f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2240      	movs	r2, #64	@ 0x40
 8001eec:	2101      	movs	r1, #1
 8001eee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2241      	movs	r2, #65	@ 0x41
 8001ef4:	2124      	movs	r1, #36	@ 0x24
 8001ef6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2101      	movs	r1, #1
 8001f04:	438a      	bics	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4911      	ldr	r1, [pc, #68]	@ (8001f58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2101      	movs	r1, #1
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2241      	movs	r2, #65	@ 0x41
 8001f3c:	2120      	movs	r1, #32
 8001f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2240      	movs	r2, #64	@ 0x40
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	ffffefff 	.word	0xffffefff

08001f5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2241      	movs	r2, #65	@ 0x41
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d139      	bne.n	8001fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2240      	movs	r2, #64	@ 0x40
 8001f76:	5c9b      	ldrb	r3, [r3, r2]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e033      	b.n	8001fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2240      	movs	r2, #64	@ 0x40
 8001f84:	2101      	movs	r1, #1
 8001f86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2241      	movs	r2, #65	@ 0x41
 8001f8c:	2124      	movs	r1, #36	@ 0x24
 8001f8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2241      	movs	r2, #65	@ 0x41
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2240      	movs	r2, #64	@ 0x40
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
  }
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b004      	add	sp, #16
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	fffff0ff 	.word	0xfffff0ff

08001ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e1d0      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	4013      	ands	r3, r2
 800200e:	d100      	bne.n	8002012 <HAL_RCC_OscConfig+0x1e>
 8002010:	e069      	b.n	80020e6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002012:	4bc8      	ldr	r3, [pc, #800]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2238      	movs	r2, #56	@ 0x38
 8002018:	4013      	ands	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b08      	cmp	r3, #8
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d15d      	bne.n	80020e6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1bc      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	429a      	cmp	r2, r3
 8002038:	d107      	bne.n	800204a <HAL_RCC_OscConfig+0x56>
 800203a:	4bbe      	ldr	r3, [pc, #760]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4bbd      	ldr	r3, [pc, #756]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002040:	2180      	movs	r1, #128	@ 0x80
 8002042:	0249      	lsls	r1, r1, #9
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e020      	b.n	800208c <HAL_RCC_OscConfig+0x98>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	23a0      	movs	r3, #160	@ 0xa0
 8002050:	02db      	lsls	r3, r3, #11
 8002052:	429a      	cmp	r2, r3
 8002054:	d10e      	bne.n	8002074 <HAL_RCC_OscConfig+0x80>
 8002056:	4bb7      	ldr	r3, [pc, #732]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4bb6      	ldr	r3, [pc, #728]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800205c:	2180      	movs	r1, #128	@ 0x80
 800205e:	02c9      	lsls	r1, r1, #11
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	4bb3      	ldr	r3, [pc, #716]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4bb2      	ldr	r3, [pc, #712]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800206a:	2180      	movs	r1, #128	@ 0x80
 800206c:	0249      	lsls	r1, r1, #9
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0x98>
 8002074:	4baf      	ldr	r3, [pc, #700]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4bae      	ldr	r3, [pc, #696]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800207a:	49af      	ldr	r1, [pc, #700]	@ (8002338 <HAL_RCC_OscConfig+0x344>)
 800207c:	400a      	ands	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	4bac      	ldr	r3, [pc, #688]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4bab      	ldr	r3, [pc, #684]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002086:	49ad      	ldr	r1, [pc, #692]	@ (800233c <HAL_RCC_OscConfig+0x348>)
 8002088:	400a      	ands	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d014      	beq.n	80020be <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe ff6a 	bl	8000f6c <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800209e:	f7fe ff65 	bl	8000f6c <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b64      	cmp	r3, #100	@ 0x64
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e17b      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0xaa>
 80020bc:	e013      	b.n	80020e6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7fe ff55 	bl	8000f6c <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020c8:	f7fe ff50 	bl	8000f6c <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	@ 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e166      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020da:	4b96      	ldr	r3, [pc, #600]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	029b      	lsls	r3, r3, #10
 80020e2:	4013      	ands	r3, r2
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2202      	movs	r2, #2
 80020ec:	4013      	ands	r3, r2
 80020ee:	d100      	bne.n	80020f2 <HAL_RCC_OscConfig+0xfe>
 80020f0:	e086      	b.n	8002200 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b90      	ldr	r3, [pc, #576]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2238      	movs	r2, #56	@ 0x38
 80020f8:	4013      	ands	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d12f      	bne.n	8002162 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e14c      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b89      	ldr	r3, [pc, #548]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a8b      	ldr	r2, [pc, #556]	@ (8002340 <HAL_RCC_OscConfig+0x34c>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	021a      	lsls	r2, r3, #8
 800211e:	4b85      	ldr	r3, [pc, #532]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d112      	bne.n	8002150 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800212a:	4b82      	ldr	r3, [pc, #520]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a85      	ldr	r2, [pc, #532]	@ (8002344 <HAL_RCC_OscConfig+0x350>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	4b7e      	ldr	r3, [pc, #504]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800213e:	4b7d      	ldr	r3, [pc, #500]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0adb      	lsrs	r3, r3, #11
 8002144:	2207      	movs	r2, #7
 8002146:	4013      	ands	r3, r2
 8002148:	4a7f      	ldr	r2, [pc, #508]	@ (8002348 <HAL_RCC_OscConfig+0x354>)
 800214a:	40da      	lsrs	r2, r3
 800214c:	4b7f      	ldr	r3, [pc, #508]	@ (800234c <HAL_RCC_OscConfig+0x358>)
 800214e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002150:	4b7f      	ldr	r3, [pc, #508]	@ (8002350 <HAL_RCC_OscConfig+0x35c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0018      	movs	r0, r3
 8002156:	f7fe fead 	bl	8000eb4 <HAL_InitTick>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d050      	beq.n	8002200 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e122      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d030      	beq.n	80021cc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800216a:	4b72      	ldr	r3, [pc, #456]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a75      	ldr	r2, [pc, #468]	@ (8002344 <HAL_RCC_OscConfig+0x350>)
 8002170:	4013      	ands	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	4b6e      	ldr	r3, [pc, #440]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800217e:	4b6d      	ldr	r3, [pc, #436]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b6c      	ldr	r3, [pc, #432]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002184:	2180      	movs	r1, #128	@ 0x80
 8002186:	0049      	lsls	r1, r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe feee 	bl	8000f6c <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002196:	f7fe fee9 	bl	8000f6c <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0ff      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a8:	4b62      	ldr	r3, [pc, #392]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4013      	ands	r3, r2
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a61      	ldr	r2, [pc, #388]	@ (8002340 <HAL_RCC_OscConfig+0x34c>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e019      	b.n	8002200 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b58      	ldr	r3, [pc, #352]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80021d2:	4960      	ldr	r1, [pc, #384]	@ (8002354 <HAL_RCC_OscConfig+0x360>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fec8 	bl	8000f6c <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021e2:	f7fe fec3 	bl	8000f6c <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0d9      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4013      	ands	r3, r2
 80021fe:	d1f0      	bne.n	80021e2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2208      	movs	r2, #8
 8002206:	4013      	ands	r3, r2
 8002208:	d042      	beq.n	8002290 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800220a:	4b4a      	ldr	r3, [pc, #296]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2238      	movs	r2, #56	@ 0x38
 8002210:	4013      	ands	r3, r2
 8002212:	2b18      	cmp	r3, #24
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d138      	bne.n	8002290 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0c2      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d019      	beq.n	800225e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800222a:	4b42      	ldr	r3, [pc, #264]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 800222c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800222e:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fe99 	bl	8000f6c <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002240:	f7fe fe94 	bl	8000f6c <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0aa      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002252:	4b38      	ldr	r3, [pc, #224]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d0f1      	beq.n	8002240 <HAL_RCC_OscConfig+0x24c>
 800225c:	e018      	b.n	8002290 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800225e:	4b35      	ldr	r3, [pc, #212]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002260:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002262:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002264:	2101      	movs	r1, #1
 8002266:	438a      	bics	r2, r1
 8002268:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe fe7f 	bl	8000f6c <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002274:	f7fe fe7a 	bl	8000f6c <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e090      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002286:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228a:	2202      	movs	r2, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d1f1      	bne.n	8002274 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2204      	movs	r2, #4
 8002296:	4013      	ands	r3, r2
 8002298:	d100      	bne.n	800229c <HAL_RCC_OscConfig+0x2a8>
 800229a:	e084      	b.n	80023a6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229c:	230f      	movs	r3, #15
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80022a4:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2238      	movs	r2, #56	@ 0x38
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d000      	beq.n	80022ba <HAL_RCC_OscConfig+0x2c6>
 80022b8:	e075      	b.n	80023a6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e074      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2e0>
 80022c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022cc:	2101      	movs	r1, #1
 80022ce:	430a      	orrs	r2, r1
 80022d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022d2:	e01c      	b.n	800230e <HAL_RCC_OscConfig+0x31a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d10c      	bne.n	80022f6 <HAL_RCC_OscConfig+0x302>
 80022dc:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022e2:	2104      	movs	r1, #4
 80022e4:	430a      	orrs	r2, r1
 80022e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022f4:	e00b      	b.n	800230e <HAL_RCC_OscConfig+0x31a>
 80022f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	438a      	bics	r2, r1
 8002300:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002302:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002304:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_OscConfig+0x340>)
 8002308:	2104      	movs	r1, #4
 800230a:	438a      	bics	r2, r1
 800230c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe fe29 	bl	8000f6c <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe fe24 	bl	8000f6c <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <HAL_RCC_OscConfig+0x364>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d915      	bls.n	800235c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e039      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
 8002334:	40021000 	.word	0x40021000
 8002338:	fffeffff 	.word	0xfffeffff
 800233c:	fffbffff 	.word	0xfffbffff
 8002340:	ffff80ff 	.word	0xffff80ff
 8002344:	ffffc7ff 	.word	0xffffc7ff
 8002348:	02dc6c00 	.word	0x02dc6c00
 800234c:	20000000 	.word	0x20000000
 8002350:	20000004 	.word	0x20000004
 8002354:	fffffeff 	.word	0xfffffeff
 8002358:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800235c:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <HAL_RCC_OscConfig+0x3bc>)
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d0dc      	beq.n	8002320 <HAL_RCC_OscConfig+0x32c>
 8002366:	e013      	b.n	8002390 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fe00 	bl	8000f6c <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002370:	e009      	b.n	8002386 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe fdfb 	bl	8000f6c <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <HAL_RCC_OscConfig+0x3c0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e010      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_RCC_OscConfig+0x3bc>)
 8002388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238a:	2202      	movs	r2, #2
 800238c:	4013      	ands	r3, r2
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002390:	230f      	movs	r3, #15
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <HAL_RCC_OscConfig+0x3bc>)
 800239c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800239e:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <HAL_RCC_OscConfig+0x3bc>)
 80023a0:	4905      	ldr	r1, [pc, #20]	@ (80023b8 <HAL_RCC_OscConfig+0x3c4>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b006      	add	sp, #24
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	00001388 	.word	0x00001388
 80023b8:	efffffff 	.word	0xefffffff

080023bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0e9      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b76      	ldr	r3, [pc, #472]	@ (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2207      	movs	r2, #7
 80023d6:	4013      	ands	r3, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d91e      	bls.n	800241c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b73      	ldr	r3, [pc, #460]	@ (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2207      	movs	r2, #7
 80023e4:	4393      	bics	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	4b70      	ldr	r3, [pc, #448]	@ (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fdbc 	bl	8000f6c <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023f8:	e009      	b.n	800240e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe fdb7 	bl	8000f6c <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a6a      	ldr	r2, [pc, #424]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0ca      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800240e:	4b67      	ldr	r3, [pc, #412]	@ (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2207      	movs	r2, #7
 8002414:	4013      	ands	r3, r2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2202      	movs	r2, #2
 8002422:	4013      	ands	r3, r2
 8002424:	d017      	beq.n	8002456 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2204      	movs	r2, #4
 800242c:	4013      	ands	r3, r2
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002430:	4b60      	ldr	r3, [pc, #384]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a60      	ldr	r2, [pc, #384]	@ (80025b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002436:	401a      	ands	r2, r3
 8002438:	4b5e      	ldr	r3, [pc, #376]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 800243a:	21b0      	movs	r1, #176	@ 0xb0
 800243c:	0109      	lsls	r1, r1, #4
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002442:	4b5c      	ldr	r3, [pc, #368]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4a5d      	ldr	r2, [pc, #372]	@ (80025bc <HAL_RCC_ClockConfig+0x200>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	4b58      	ldr	r3, [pc, #352]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d055      	beq.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002460:	4b54      	ldr	r3, [pc, #336]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	221c      	movs	r2, #28
 8002466:	4393      	bics	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	4b51      	ldr	r3, [pc, #324]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d107      	bne.n	800248c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247c:	4b4d      	ldr	r3, [pc, #308]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	4013      	ands	r3, r2
 8002486:	d11f      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e08b      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002494:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4013      	ands	r3, r2
 800249e:	d113      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e07f      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80024ac:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b0:	2202      	movs	r2, #2
 80024b2:	4013      	ands	r3, r2
 80024b4:	d108      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e074      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80024ba:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	2202      	movs	r2, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e06d      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c8:	4b3a      	ldr	r3, [pc, #232]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2207      	movs	r2, #7
 80024ce:	4393      	bics	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024dc:	f7fe fd46 	bl	8000f6c <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e4:	e009      	b.n	80024fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024e6:	f7fe fd41 	bl	8000f6c <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4a2f      	ldr	r2, [pc, #188]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e054      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2e      	ldr	r3, [pc, #184]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2238      	movs	r2, #56	@ 0x38
 8002500:	401a      	ands	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	429a      	cmp	r2, r3
 800250a:	d1ec      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2207      	movs	r2, #7
 8002512:	4013      	ands	r3, r2
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d21e      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2207      	movs	r2, #7
 8002520:	4393      	bics	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800252c:	f7fe fd1e 	bl	8000f6c <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002534:	e009      	b.n	800254a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002536:	f7fe fd19 	bl	8000f6c <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	4a1b      	ldr	r2, [pc, #108]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e02c      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2207      	movs	r2, #7
 8002550:	4013      	ands	r3, r2
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d1ee      	bne.n	8002536 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2204      	movs	r2, #4
 800255e:	4013      	ands	r3, r2
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002562:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4a16      	ldr	r2, [pc, #88]	@ (80025c0 <HAL_RCC_ClockConfig+0x204>)
 8002568:	4013      	ands	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002576:	f000 f82b 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 800257a:	0001      	movs	r1, r0
 800257c:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	220f      	movs	r2, #15
 8002584:	401a      	ands	r2, r3
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <HAL_RCC_ClockConfig+0x208>)
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	58d3      	ldr	r3, [r2, r3]
 800258c:	221f      	movs	r2, #31
 800258e:	4013      	ands	r3, r2
 8002590:	000a      	movs	r2, r1
 8002592:	40da      	lsrs	r2, r3
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_RCC_ClockConfig+0x20c>)
 8002596:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <HAL_RCC_ClockConfig+0x210>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0018      	movs	r0, r3
 800259e:	f7fe fc89 	bl	8000eb4 <HAL_InitTick>
 80025a2:	0003      	movs	r3, r0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b004      	add	sp, #16
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40022000 	.word	0x40022000
 80025b0:	00001388 	.word	0x00001388
 80025b4:	40021000 	.word	0x40021000
 80025b8:	ffff84ff 	.word	0xffff84ff
 80025bc:	fffff0ff 	.word	0xfffff0ff
 80025c0:	ffff8fff 	.word	0xffff8fff
 80025c4:	080043ac 	.word	0x080043ac
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004

080025d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x78>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2238      	movs	r2, #56	@ 0x38
 80025dc:	4013      	ands	r3, r2
 80025de:	d10f      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025e0:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x78>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0adb      	lsrs	r3, r3, #11
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	2201      	movs	r2, #1
 80025ec:	409a      	lsls	r2, r3
 80025ee:	0013      	movs	r3, r2
 80025f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	4815      	ldr	r0, [pc, #84]	@ (800264c <HAL_RCC_GetSysClockFreq+0x7c>)
 80025f6:	f7fd fd87 	bl	8000108 <__udivsi3>
 80025fa:	0003      	movs	r3, r0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	e01e      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002600:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x78>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2238      	movs	r2, #56	@ 0x38
 8002606:	4013      	ands	r3, r2
 8002608:	2b08      	cmp	r3, #8
 800260a:	d102      	bne.n	8002612 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x80>)
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	e015      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x78>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2238      	movs	r2, #56	@ 0x38
 8002618:	4013      	ands	r3, r2
 800261a:	2b20      	cmp	r3, #32
 800261c:	d103      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	e00b      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x78>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2238      	movs	r2, #56	@ 0x38
 800262c:	4013      	ands	r3, r2
 800262e:	2b18      	cmp	r3, #24
 8002630:	d103      	bne.n	800263a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002632:	23fa      	movs	r3, #250	@ 0xfa
 8002634:	01db      	lsls	r3, r3, #7
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	e001      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800263e:	687b      	ldr	r3, [r7, #4]
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	02dc6c00 	.word	0x02dc6c00
 8002650:	00f42400 	.word	0x00f42400

08002654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002658:	4b02      	ldr	r3, [pc, #8]	@ (8002664 <HAL_RCC_GetHCLKFreq+0x10>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			@ (mov r8, r8)
 8002664:	20000000 	.word	0x20000000

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800266c:	f7ff fff2 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002670:	0001      	movs	r1, r0
 8002672:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0b1b      	lsrs	r3, r3, #12
 8002678:	2207      	movs	r2, #7
 800267a:	401a      	ands	r2, r3
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	58d3      	ldr	r3, [r2, r3]
 8002682:	221f      	movs	r2, #31
 8002684:	4013      	ands	r3, r2
 8002686:	40d9      	lsrs	r1, r3
 8002688:	000b      	movs	r3, r1
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	080043ec 	.word	0x080043ec

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80026a0:	2313      	movs	r3, #19
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026a8:	2312      	movs	r3, #18
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	4013      	ands	r3, r2
 80026ba:	d100      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80026bc:	e079      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2011      	movs	r0, #17
 80026c0:	183b      	adds	r3, r7, r0
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b64      	ldr	r3, [pc, #400]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	055b      	lsls	r3, r3, #21
 80026ce:	4013      	ands	r3, r2
 80026d0:	d110      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	4b61      	ldr	r3, [pc, #388]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026d6:	4b60      	ldr	r3, [pc, #384]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d8:	2180      	movs	r1, #128	@ 0x80
 80026da:	0549      	lsls	r1, r1, #21
 80026dc:	430a      	orrs	r2, r1
 80026de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	055b      	lsls	r3, r3, #21
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	183b      	adds	r3, r7, r0
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80026f4:	4b58      	ldr	r3, [pc, #352]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026f8:	23c0      	movs	r3, #192	@ 0xc0
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	429a      	cmp	r2, r3
 800270e:	d014      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002710:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	4a51      	ldr	r2, [pc, #324]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002716:	4013      	ands	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800271a:	4b4f      	ldr	r3, [pc, #316]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800271c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800271e:	4b4e      	ldr	r3, [pc, #312]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002720:	2180      	movs	r1, #128	@ 0x80
 8002722:	0249      	lsls	r1, r1, #9
 8002724:	430a      	orrs	r2, r1
 8002726:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002728:	4b4b      	ldr	r3, [pc, #300]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800272a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800272c:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800272e:	494c      	ldr	r1, [pc, #304]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002730:	400a      	ands	r2, r1
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002734:	4b48      	ldr	r3, [pc, #288]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2201      	movs	r2, #1
 800273e:	4013      	ands	r3, r2
 8002740:	d016      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fc13 	bl	8000f6c <HAL_GetTick>
 8002746:	0003      	movs	r3, r0
 8002748:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800274a:	e00c      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7fe fc0e 	bl	8000f6c <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	4a43      	ldr	r2, [pc, #268]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d904      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 800275c:	2313      	movs	r3, #19
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2203      	movs	r2, #3
 8002762:	701a      	strb	r2, [r3, #0]
          break;
 8002764:	e004      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002766:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	d0ed      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002770:	2313      	movs	r3, #19
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800277a:	4b37      	ldr	r3, [pc, #220]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	4a37      	ldr	r2, [pc, #220]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	4b33      	ldr	r3, [pc, #204]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800278a:	430a      	orrs	r2, r1
 800278c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800278e:	e005      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	2312      	movs	r3, #18
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2213      	movs	r2, #19
 8002796:	18ba      	adds	r2, r7, r2
 8002798:	7812      	ldrb	r2, [r2, #0]
 800279a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279c:	2311      	movs	r3, #17
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027ac:	492e      	ldr	r1, [pc, #184]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027bc:	4b26      	ldr	r3, [pc, #152]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	2203      	movs	r2, #3
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2240      	movs	r2, #64	@ 0x40
 80027d6:	4013      	ands	r3, r2
 80027d8:	d009      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027da:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027de:	4a23      	ldr	r2, [pc, #140]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	01db      	lsls	r3, r3, #7
 80027f6:	4013      	ands	r3, r2
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027fa:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	0899      	lsrs	r1, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002808:	430a      	orrs	r2, r1
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	4013      	ands	r3, r2
 8002816:	d009      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	4a14      	ldr	r2, [pc, #80]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002828:	430a      	orrs	r2, r1
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	da09      	bge.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	22e0      	movs	r2, #224	@ 0xe0
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002848:	2312      	movs	r3, #18
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	781b      	ldrb	r3, [r3, #0]
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b006      	add	sp, #24
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	40021000 	.word	0x40021000
 800285c:	fffffcff 	.word	0xfffffcff
 8002860:	fffeffff 	.word	0xfffeffff
 8002864:	00001388 	.word	0x00001388
 8002868:	efffffff 	.word	0xefffffff
 800286c:	ffffcfff 	.word	0xffffcfff
 8002870:	ffff3fff 	.word	0xffff3fff

08002874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0a8      	b.n	80029d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	2382      	movs	r3, #130	@ 0x82
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	429a      	cmp	r2, r3
 8002898:	d009      	beq.n	80028ae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	61da      	str	r2, [r3, #28]
 80028a0:	e005      	b.n	80028ae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	225d      	movs	r2, #93	@ 0x5d
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	225c      	movs	r2, #92	@ 0x5c
 80028c4:	2100      	movs	r1, #0
 80028c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f7fe f80c 	bl	80008e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	225d      	movs	r2, #93	@ 0x5d
 80028d4:	2102      	movs	r1, #2
 80028d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2140      	movs	r1, #64	@ 0x40
 80028e4:	438a      	bics	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	23e0      	movs	r3, #224	@ 0xe0
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d902      	bls.n	80028fa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e002      	b.n	8002900 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	23f0      	movs	r3, #240	@ 0xf0
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	429a      	cmp	r2, r3
 800290a:	d008      	beq.n	800291e <HAL_SPI_Init+0xaa>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	23e0      	movs	r3, #224	@ 0xe0
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	429a      	cmp	r2, r3
 8002916:	d002      	beq.n	800291e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	2382      	movs	r3, #130	@ 0x82
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	401a      	ands	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	2384      	movs	r3, #132	@ 0x84
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	400b      	ands	r3, r1
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2102      	movs	r1, #2
 800293a:	400b      	ands	r3, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2101      	movs	r1, #1
 8002944:	400b      	ands	r3, r1
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6999      	ldr	r1, [r3, #24]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	400b      	ands	r3, r1
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2138      	movs	r1, #56	@ 0x38
 800295a:	400b      	ands	r3, r1
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	2180      	movs	r1, #128	@ 0x80
 8002964:	400b      	ands	r3, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	0011      	movs	r1, r2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	401a      	ands	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	2204      	movs	r2, #4
 8002984:	401a      	ands	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	2110      	movs	r1, #16
 800298c:	400b      	ands	r3, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002994:	2108      	movs	r1, #8
 8002996:	400b      	ands	r3, r1
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68d9      	ldr	r1, [r3, #12]
 800299e:	23f0      	movs	r3, #240	@ 0xf0
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	400b      	ands	r3, r1
 80029a4:	431a      	orrs	r2, r3
 80029a6:	0011      	movs	r1, r2
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	2380      	movs	r3, #128	@ 0x80
 80029ac:	015b      	lsls	r3, r3, #5
 80029ae:	401a      	ands	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4907      	ldr	r1, [pc, #28]	@ (80029e0 <HAL_SPI_Init+0x16c>)
 80029c4:	400a      	ands	r2, r1
 80029c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	225d      	movs	r2, #93	@ 0x5d
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	fffff7ff 	.word	0xfffff7ff

080029e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e04a      	b.n	8002a8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	223d      	movs	r2, #61	@ 0x3d
 80029fa:	5c9b      	ldrb	r3, [r3, r2]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	223c      	movs	r2, #60	@ 0x3c
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7fe f899 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	223d      	movs	r2, #61	@ 0x3d
 8002a16:	2102      	movs	r1, #2
 8002a18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	0019      	movs	r1, r3
 8002a24:	0010      	movs	r0, r2
 8002a26:	f000 fb43 	bl	80030b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2248      	movs	r2, #72	@ 0x48
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	223e      	movs	r2, #62	@ 0x3e
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	223f      	movs	r2, #63	@ 0x3f
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2240      	movs	r2, #64	@ 0x40
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2241      	movs	r2, #65	@ 0x41
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2242      	movs	r2, #66	@ 0x42
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2243      	movs	r2, #67	@ 0x43
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2244      	movs	r2, #68	@ 0x44
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2245      	movs	r2, #69	@ 0x45
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2246      	movs	r2, #70	@ 0x46
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2247      	movs	r2, #71	@ 0x47
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	223d      	movs	r2, #61	@ 0x3d
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e04a      	b.n	8002b3c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223d      	movs	r2, #61	@ 0x3d
 8002aaa:	5c9b      	ldrb	r3, [r3, r2]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223c      	movs	r2, #60	@ 0x3c
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f841 	bl	8002b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	223d      	movs	r2, #61	@ 0x3d
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	f000 faeb 	bl	80030b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2248      	movs	r2, #72	@ 0x48
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	223e      	movs	r2, #62	@ 0x3e
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	223f      	movs	r2, #63	@ 0x3f
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2240      	movs	r2, #64	@ 0x40
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2241      	movs	r2, #65	@ 0x41
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2242      	movs	r2, #66	@ 0x42
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2243      	movs	r2, #67	@ 0x43
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2244      	movs	r2, #68	@ 0x44
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2245      	movs	r2, #69	@ 0x45
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2246      	movs	r2, #70	@ 0x46
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2247      	movs	r2, #71	@ 0x47
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	223d      	movs	r2, #61	@ 0x3d
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <HAL_TIM_PWM_Start+0x22>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	223e      	movs	r2, #62	@ 0x3e
 8002b68:	5c9b      	ldrb	r3, [r3, r2]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	4193      	sbcs	r3, r2
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	e037      	b.n	8002be6 <HAL_TIM_PWM_Start+0x92>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d108      	bne.n	8002b8e <HAL_TIM_PWM_Start+0x3a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	223f      	movs	r2, #63	@ 0x3f
 8002b80:	5c9b      	ldrb	r3, [r3, r2]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	1e5a      	subs	r2, r3, #1
 8002b88:	4193      	sbcs	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e02b      	b.n	8002be6 <HAL_TIM_PWM_Start+0x92>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d108      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0x52>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2240      	movs	r2, #64	@ 0x40
 8002b98:	5c9b      	ldrb	r3, [r3, r2]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	1e5a      	subs	r2, r3, #1
 8002ba0:	4193      	sbcs	r3, r2
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	e01f      	b.n	8002be6 <HAL_TIM_PWM_Start+0x92>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d108      	bne.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2241      	movs	r2, #65	@ 0x41
 8002bb0:	5c9b      	ldrb	r3, [r3, r2]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	1e5a      	subs	r2, r3, #1
 8002bb8:	4193      	sbcs	r3, r2
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e013      	b.n	8002be6 <HAL_TIM_PWM_Start+0x92>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d108      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x82>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2242      	movs	r2, #66	@ 0x42
 8002bc8:	5c9b      	ldrb	r3, [r3, r2]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	4193      	sbcs	r3, r2
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	e007      	b.n	8002be6 <HAL_TIM_PWM_Start+0x92>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2243      	movs	r2, #67	@ 0x43
 8002bda:	5c9b      	ldrb	r3, [r3, r2]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	1e5a      	subs	r2, r3, #1
 8002be2:	4193      	sbcs	r3, r2
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07b      	b.n	8002ce6 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	223e      	movs	r2, #62	@ 0x3e
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	5499      	strb	r1, [r3, r2]
 8002bfc:	e023      	b.n	8002c46 <HAL_TIM_PWM_Start+0xf2>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0xba>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	223f      	movs	r2, #63	@ 0x3f
 8002c08:	2102      	movs	r1, #2
 8002c0a:	5499      	strb	r1, [r3, r2]
 8002c0c:	e01b      	b.n	8002c46 <HAL_TIM_PWM_Start+0xf2>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0xca>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2240      	movs	r2, #64	@ 0x40
 8002c18:	2102      	movs	r1, #2
 8002c1a:	5499      	strb	r1, [r3, r2]
 8002c1c:	e013      	b.n	8002c46 <HAL_TIM_PWM_Start+0xf2>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_PWM_Start+0xda>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2241      	movs	r2, #65	@ 0x41
 8002c28:	2102      	movs	r1, #2
 8002c2a:	5499      	strb	r1, [r3, r2]
 8002c2c:	e00b      	b.n	8002c46 <HAL_TIM_PWM_Start+0xf2>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_PWM_Start+0xea>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2242      	movs	r2, #66	@ 0x42
 8002c38:	2102      	movs	r1, #2
 8002c3a:	5499      	strb	r1, [r3, r2]
 8002c3c:	e003      	b.n	8002c46 <HAL_TIM_PWM_Start+0xf2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2243      	movs	r2, #67	@ 0x43
 8002c42:	2102      	movs	r1, #2
 8002c44:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fdd2 	bl	80037f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a25      	ldr	r2, [pc, #148]	@ (8002cf0 <HAL_TIM_PWM_Start+0x19c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x11e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a24      	ldr	r2, [pc, #144]	@ (8002cf4 <HAL_TIM_PWM_Start+0x1a0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x11e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a22      	ldr	r2, [pc, #136]	@ (8002cf8 <HAL_TIM_PWM_Start+0x1a4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x122>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_TIM_PWM_Start+0x124>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2180      	movs	r1, #128	@ 0x80
 8002c88:	0209      	lsls	r1, r1, #8
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <HAL_TIM_PWM_Start+0x19c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x14e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	@ (8002cfc <HAL_TIM_PWM_Start+0x1a8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d116      	bne.n	8002cd0 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <HAL_TIM_PWM_Start+0x1ac>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d016      	beq.n	8002ce2 <HAL_TIM_PWM_Start+0x18e>
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	025b      	lsls	r3, r3, #9
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d011      	beq.n	8002ce2 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	e008      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e000      	b.n	8002ce4 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b004      	add	sp, #16
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40014400 	.word	0x40014400
 8002cf8:	40014800 	.word	0x40014800
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	00010007 	.word	0x00010007

08002d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d10:	2317      	movs	r3, #23
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	223c      	movs	r2, #60	@ 0x3c
 8002d1c:	5c9b      	ldrb	r3, [r3, r2]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0e5      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	223c      	movs	r2, #60	@ 0x3c
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b14      	cmp	r3, #20
 8002d32:	d900      	bls.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d34:	e0d1      	b.n	8002eda <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	009a      	lsls	r2, r3, #2
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fa1c 	bl	8003188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2108      	movs	r1, #8
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6999      	ldr	r1, [r3, #24]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	619a      	str	r2, [r3, #24]
      break;
 8002d82:	e0af      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fa7b 	bl	8003288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2180      	movs	r1, #128	@ 0x80
 8002d9e:	0109      	lsls	r1, r1, #4
 8002da0:	430a      	orrs	r2, r1
 8002da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4954      	ldr	r1, [pc, #336]	@ (8002f00 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	619a      	str	r2, [r3, #24]
      break;
 8002dc8:	e08c      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fad6 	bl	8003384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2108      	movs	r1, #8
 8002de4:	430a      	orrs	r2, r1
 8002de6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2104      	movs	r1, #4
 8002df4:	438a      	bics	r2, r1
 8002df6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69d9      	ldr	r1, [r3, #28]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	61da      	str	r2, [r3, #28]
      break;
 8002e0a:	e06b      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	0011      	movs	r1, r2
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 fb37 	bl	8003488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0109      	lsls	r1, r1, #4
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4932      	ldr	r1, [pc, #200]	@ (8002f00 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69d9      	ldr	r1, [r3, #28]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	61da      	str	r2, [r3, #28]
      break;
 8002e50:	e048      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	0011      	movs	r1, r2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fb78 	bl	8003550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2108      	movs	r1, #8
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	438a      	bics	r2, r1
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e92:	e027      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	0011      	movs	r1, r2
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 fbb1 	bl	8003604 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2180      	movs	r1, #128	@ 0x80
 8002eae:	0109      	lsls	r1, r1, #4
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4910      	ldr	r1, [pc, #64]	@ (8002f00 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	021a      	lsls	r2, r3, #8
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ed8:	e004      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002eda:	2317      	movs	r3, #23
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
      break;
 8002ee2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	223c      	movs	r2, #60	@ 0x3c
 8002ee8:	2100      	movs	r1, #0
 8002eea:	5499      	strb	r1, [r3, r2]

  return status;
 8002eec:	2317      	movs	r3, #23
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b006      	add	sp, #24
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	0800440c 	.word	0x0800440c
 8002f00:	fffffbff 	.word	0xfffffbff

08002f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	223c      	movs	r2, #60	@ 0x3c
 8002f1a:	5c9b      	ldrb	r3, [r3, r2]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_TIM_ConfigClockSource+0x20>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e0bc      	b.n	800309e <HAL_TIM_ConfigClockSource+0x19a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	223c      	movs	r2, #60	@ 0x3c
 8002f28:	2101      	movs	r1, #1
 8002f2a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	223d      	movs	r2, #61	@ 0x3d
 8002f30:	2102      	movs	r1, #2
 8002f32:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a5a      	ldr	r2, [pc, #360]	@ (80030a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a59      	ldr	r2, [pc, #356]	@ (80030ac <HAL_TIM_ConfigClockSource+0x1a8>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	0192      	lsls	r2, r2, #6
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d040      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0xde>
 8002f60:	2280      	movs	r2, #128	@ 0x80
 8002f62:	0192      	lsls	r2, r2, #6
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d900      	bls.n	8002f6a <HAL_TIM_ConfigClockSource+0x66>
 8002f68:	e088      	b.n	800307c <HAL_TIM_ConfigClockSource+0x178>
 8002f6a:	2280      	movs	r2, #128	@ 0x80
 8002f6c:	0152      	lsls	r2, r2, #5
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d100      	bne.n	8002f74 <HAL_TIM_ConfigClockSource+0x70>
 8002f72:	e088      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x182>
 8002f74:	2280      	movs	r2, #128	@ 0x80
 8002f76:	0152      	lsls	r2, r2, #5
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d900      	bls.n	8002f7e <HAL_TIM_ConfigClockSource+0x7a>
 8002f7c:	e07e      	b.n	800307c <HAL_TIM_ConfigClockSource+0x178>
 8002f7e:	2b70      	cmp	r3, #112	@ 0x70
 8002f80:	d018      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0xb0>
 8002f82:	d900      	bls.n	8002f86 <HAL_TIM_ConfigClockSource+0x82>
 8002f84:	e07a      	b.n	800307c <HAL_TIM_ConfigClockSource+0x178>
 8002f86:	2b60      	cmp	r3, #96	@ 0x60
 8002f88:	d04f      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x126>
 8002f8a:	d900      	bls.n	8002f8e <HAL_TIM_ConfigClockSource+0x8a>
 8002f8c:	e076      	b.n	800307c <HAL_TIM_ConfigClockSource+0x178>
 8002f8e:	2b50      	cmp	r3, #80	@ 0x50
 8002f90:	d03b      	beq.n	800300a <HAL_TIM_ConfigClockSource+0x106>
 8002f92:	d900      	bls.n	8002f96 <HAL_TIM_ConfigClockSource+0x92>
 8002f94:	e072      	b.n	800307c <HAL_TIM_ConfigClockSource+0x178>
 8002f96:	2b40      	cmp	r3, #64	@ 0x40
 8002f98:	d057      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x146>
 8002f9a:	d900      	bls.n	8002f9e <HAL_TIM_ConfigClockSource+0x9a>
 8002f9c:	e06e      	b.n	800307c <HAL_TIM_ConfigClockSource+0x178>
 8002f9e:	2b30      	cmp	r3, #48	@ 0x30
 8002fa0:	d063      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x166>
 8002fa2:	d86b      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x178>
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d060      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x166>
 8002fa8:	d868      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x178>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d05d      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x166>
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d05b      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x166>
 8002fb2:	e063      	b.n	800307c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fc4:	f000 fbf8 	bl	80037b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2277      	movs	r2, #119	@ 0x77
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]
      break;
 8002fe0:	e052      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ff2:	f000 fbe1 	bl	80037b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2180      	movs	r1, #128	@ 0x80
 8003002:	01c9      	lsls	r1, r1, #7
 8003004:	430a      	orrs	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
      break;
 8003008:	e03e      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003016:	001a      	movs	r2, r3
 8003018:	f000 fb52 	bl	80036c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2150      	movs	r1, #80	@ 0x50
 8003022:	0018      	movs	r0, r3
 8003024:	f000 fbac 	bl	8003780 <TIM_ITRx_SetConfig>
      break;
 8003028:	e02e      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003036:	001a      	movs	r2, r3
 8003038:	f000 fb70 	bl	800371c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2160      	movs	r1, #96	@ 0x60
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fb9c 	bl	8003780 <TIM_ITRx_SetConfig>
      break;
 8003048:	e01e      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	001a      	movs	r2, r3
 8003058:	f000 fb32 	bl	80036c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2140      	movs	r1, #64	@ 0x40
 8003062:	0018      	movs	r0, r3
 8003064:	f000 fb8c 	bl	8003780 <TIM_ITRx_SetConfig>
      break;
 8003068:	e00e      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0019      	movs	r1, r3
 8003074:	0010      	movs	r0, r2
 8003076:	f000 fb83 	bl	8003780 <TIM_ITRx_SetConfig>
      break;
 800307a:	e005      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800307c:	230f      	movs	r3, #15
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
      break;
 8003084:	e000      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003086:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	223d      	movs	r2, #61	@ 0x3d
 800308c:	2101      	movs	r1, #1
 800308e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	223c      	movs	r2, #60	@ 0x3c
 8003094:	2100      	movs	r1, #0
 8003096:	5499      	strb	r1, [r3, r2]

  return status;
 8003098:	230f      	movs	r3, #15
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	781b      	ldrb	r3, [r3, #0]
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	ffceff88 	.word	0xffceff88
 80030ac:	ffff00ff 	.word	0xffff00ff

080030b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003170 <TIM_Base_SetConfig+0xc0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_Base_SetConfig+0x20>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003174 <TIM_Base_SetConfig+0xc4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d108      	bne.n	80030e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2270      	movs	r2, #112	@ 0x70
 80030d4:	4393      	bics	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a22      	ldr	r2, [pc, #136]	@ (8003170 <TIM_Base_SetConfig+0xc0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00f      	beq.n	800310a <TIM_Base_SetConfig+0x5a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a21      	ldr	r2, [pc, #132]	@ (8003174 <TIM_Base_SetConfig+0xc4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00b      	beq.n	800310a <TIM_Base_SetConfig+0x5a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a20      	ldr	r2, [pc, #128]	@ (8003178 <TIM_Base_SetConfig+0xc8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <TIM_Base_SetConfig+0x5a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1f      	ldr	r2, [pc, #124]	@ (800317c <TIM_Base_SetConfig+0xcc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <TIM_Base_SetConfig+0x5a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1e      	ldr	r2, [pc, #120]	@ (8003180 <TIM_Base_SetConfig+0xd0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d108      	bne.n	800311c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a1d      	ldr	r2, [pc, #116]	@ (8003184 <TIM_Base_SetConfig+0xd4>)
 800310e:	4013      	ands	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	4393      	bics	r3, r2
 8003122:	001a      	movs	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <TIM_Base_SetConfig+0xc0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d007      	beq.n	800315a <TIM_Base_SetConfig+0xaa>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a0b      	ldr	r2, [pc, #44]	@ (800317c <TIM_Base_SetConfig+0xcc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d003      	beq.n	800315a <TIM_Base_SetConfig+0xaa>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <TIM_Base_SetConfig+0xd0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d103      	bne.n	8003162 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	615a      	str	r2, [r3, #20]
}
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40000400 	.word	0x40000400
 8003178:	40002000 	.word	0x40002000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800
 8003184:	fffffcff 	.word	0xfffffcff

08003188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	2201      	movs	r2, #1
 800319e:	4393      	bics	r3, r2
 80031a0:	001a      	movs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003270 <TIM_OC1_SetConfig+0xe8>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2203      	movs	r2, #3
 80031be:	4393      	bics	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2202      	movs	r2, #2
 80031d0:	4393      	bics	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a24      	ldr	r2, [pc, #144]	@ (8003274 <TIM_OC1_SetConfig+0xec>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <TIM_OC1_SetConfig+0x6e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a23      	ldr	r2, [pc, #140]	@ (8003278 <TIM_OC1_SetConfig+0xf0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_OC1_SetConfig+0x6e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a22      	ldr	r2, [pc, #136]	@ (800327c <TIM_OC1_SetConfig+0xf4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10c      	bne.n	8003210 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2208      	movs	r2, #8
 80031fa:	4393      	bics	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2204      	movs	r2, #4
 800320c:	4393      	bics	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <TIM_OC1_SetConfig+0xec>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <TIM_OC1_SetConfig+0xa0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a17      	ldr	r2, [pc, #92]	@ (8003278 <TIM_OC1_SetConfig+0xf0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_OC1_SetConfig+0xa0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a16      	ldr	r2, [pc, #88]	@ (800327c <TIM_OC1_SetConfig+0xf4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d111      	bne.n	800324c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4a15      	ldr	r2, [pc, #84]	@ (8003280 <TIM_OC1_SetConfig+0xf8>)
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4a14      	ldr	r2, [pc, #80]	@ (8003284 <TIM_OC1_SetConfig+0xfc>)
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	621a      	str	r2, [r3, #32]
}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b006      	add	sp, #24
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	fffeff8f 	.word	0xfffeff8f
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800
 8003280:	fffffeff 	.word	0xfffffeff
 8003284:	fffffdff 	.word	0xfffffdff

08003288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	2210      	movs	r2, #16
 800329e:	4393      	bics	r3, r2
 80032a0:	001a      	movs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003368 <TIM_OC2_SetConfig+0xe0>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	@ (800336c <TIM_OC2_SetConfig+0xe4>)
 80032be:	4013      	ands	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2220      	movs	r2, #32
 80032d2:	4393      	bics	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <TIM_OC2_SetConfig+0xe8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10d      	bne.n	8003306 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2280      	movs	r2, #128	@ 0x80
 80032ee:	4393      	bics	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2240      	movs	r2, #64	@ 0x40
 8003302:	4393      	bics	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a19      	ldr	r2, [pc, #100]	@ (8003370 <TIM_OC2_SetConfig+0xe8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_OC2_SetConfig+0x96>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a18      	ldr	r2, [pc, #96]	@ (8003374 <TIM_OC2_SetConfig+0xec>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_OC2_SetConfig+0x96>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <TIM_OC2_SetConfig+0xf0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d113      	bne.n	8003346 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4a16      	ldr	r2, [pc, #88]	@ (800337c <TIM_OC2_SetConfig+0xf4>)
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4a15      	ldr	r2, [pc, #84]	@ (8003380 <TIM_OC2_SetConfig+0xf8>)
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	feff8fff 	.word	0xfeff8fff
 800336c:	fffffcff 	.word	0xfffffcff
 8003370:	40012c00 	.word	0x40012c00
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800
 800337c:	fffffbff 	.word	0xfffffbff
 8003380:	fffff7ff 	.word	0xfffff7ff

08003384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a31      	ldr	r2, [pc, #196]	@ (8003460 <TIM_OC3_SetConfig+0xdc>)
 800339a:	401a      	ands	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003464 <TIM_OC3_SetConfig+0xe0>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2203      	movs	r2, #3
 80033b8:	4393      	bics	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4a27      	ldr	r2, [pc, #156]	@ (8003468 <TIM_OC3_SetConfig+0xe4>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a23      	ldr	r2, [pc, #140]	@ (800346c <TIM_OC3_SetConfig+0xe8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10d      	bne.n	80033fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4a22      	ldr	r2, [pc, #136]	@ (8003470 <TIM_OC3_SetConfig+0xec>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003474 <TIM_OC3_SetConfig+0xf0>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1a      	ldr	r2, [pc, #104]	@ (800346c <TIM_OC3_SetConfig+0xe8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <TIM_OC3_SetConfig+0x92>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <TIM_OC3_SetConfig+0xf4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d003      	beq.n	8003416 <TIM_OC3_SetConfig+0x92>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1a      	ldr	r2, [pc, #104]	@ (800347c <TIM_OC3_SetConfig+0xf8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d113      	bne.n	800343e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4a19      	ldr	r2, [pc, #100]	@ (8003480 <TIM_OC3_SetConfig+0xfc>)
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4a18      	ldr	r2, [pc, #96]	@ (8003484 <TIM_OC3_SetConfig+0x100>)
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	621a      	str	r2, [r3, #32]
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b006      	add	sp, #24
 800345e:	bd80      	pop	{r7, pc}
 8003460:	fffffeff 	.word	0xfffffeff
 8003464:	fffeff8f 	.word	0xfffeff8f
 8003468:	fffffdff 	.word	0xfffffdff
 800346c:	40012c00 	.word	0x40012c00
 8003470:	fffff7ff 	.word	0xfffff7ff
 8003474:	fffffbff 	.word	0xfffffbff
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800
 8003480:	ffffefff 	.word	0xffffefff
 8003484:	ffffdfff 	.word	0xffffdfff

08003488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4a24      	ldr	r2, [pc, #144]	@ (8003530 <TIM_OC4_SetConfig+0xa8>)
 800349e:	401a      	ands	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a20      	ldr	r2, [pc, #128]	@ (8003534 <TIM_OC4_SetConfig+0xac>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003538 <TIM_OC4_SetConfig+0xb0>)
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <TIM_OC4_SetConfig+0xb4>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	031b      	lsls	r3, r3, #12
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <TIM_OC4_SetConfig+0xb8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_OC4_SetConfig+0x70>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <TIM_OC4_SetConfig+0xbc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_OC4_SetConfig+0x70>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a15      	ldr	r2, [pc, #84]	@ (8003548 <TIM_OC4_SetConfig+0xc0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d109      	bne.n	800350c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4a14      	ldr	r2, [pc, #80]	@ (800354c <TIM_OC4_SetConfig+0xc4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	019b      	lsls	r3, r3, #6
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	621a      	str	r2, [r3, #32]
}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b006      	add	sp, #24
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	ffffefff 	.word	0xffffefff
 8003534:	feff8fff 	.word	0xfeff8fff
 8003538:	fffffcff 	.word	0xfffffcff
 800353c:	ffffdfff 	.word	0xffffdfff
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40014400 	.word	0x40014400
 8003548:	40014800 	.word	0x40014800
 800354c:	ffffbfff 	.word	0xffffbfff

08003550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a21      	ldr	r2, [pc, #132]	@ (80035ec <TIM_OC5_SetConfig+0x9c>)
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4a1d      	ldr	r2, [pc, #116]	@ (80035f0 <TIM_OC5_SetConfig+0xa0>)
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4a19      	ldr	r2, [pc, #100]	@ (80035f4 <TIM_OC5_SetConfig+0xa4>)
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	041b      	lsls	r3, r3, #16
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a15      	ldr	r2, [pc, #84]	@ (80035f8 <TIM_OC5_SetConfig+0xa8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <TIM_OC5_SetConfig+0x66>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a14      	ldr	r2, [pc, #80]	@ (80035fc <TIM_OC5_SetConfig+0xac>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d003      	beq.n	80035b6 <TIM_OC5_SetConfig+0x66>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a13      	ldr	r2, [pc, #76]	@ (8003600 <TIM_OC5_SetConfig+0xb0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d109      	bne.n	80035ca <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	4a0c      	ldr	r2, [pc, #48]	@ (80035ec <TIM_OC5_SetConfig+0x9c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	621a      	str	r2, [r3, #32]
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b006      	add	sp, #24
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	fffeffff 	.word	0xfffeffff
 80035f0:	fffeff8f 	.word	0xfffeff8f
 80035f4:	fffdffff 	.word	0xfffdffff
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800

08003604 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	4a22      	ldr	r2, [pc, #136]	@ (80036a4 <TIM_OC6_SetConfig+0xa0>)
 800361a:	401a      	ands	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a1e      	ldr	r2, [pc, #120]	@ (80036a8 <TIM_OC6_SetConfig+0xa4>)
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4a1a      	ldr	r2, [pc, #104]	@ (80036ac <TIM_OC6_SetConfig+0xa8>)
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	051b      	lsls	r3, r3, #20
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a16      	ldr	r2, [pc, #88]	@ (80036b0 <TIM_OC6_SetConfig+0xac>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_OC6_SetConfig+0x68>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a15      	ldr	r2, [pc, #84]	@ (80036b4 <TIM_OC6_SetConfig+0xb0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_OC6_SetConfig+0x68>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a14      	ldr	r2, [pc, #80]	@ (80036b8 <TIM_OC6_SetConfig+0xb4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d109      	bne.n	8003680 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4a13      	ldr	r2, [pc, #76]	@ (80036bc <TIM_OC6_SetConfig+0xb8>)
 8003670:	4013      	ands	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	029b      	lsls	r3, r3, #10
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b006      	add	sp, #24
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	ffefffff 	.word	0xffefffff
 80036a8:	feff8fff 	.word	0xfeff8fff
 80036ac:	ffdfffff 	.word	0xffdfffff
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	fffbffff 	.word	0xfffbffff

080036c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	2201      	movs	r2, #1
 80036d8:	4393      	bics	r3, r2
 80036da:	001a      	movs	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	22f0      	movs	r2, #240	@ 0xf0
 80036ea:	4393      	bics	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	220a      	movs	r2, #10
 80036fc:	4393      	bics	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	46c0      	nop			@ (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b006      	add	sp, #24
 800371a:	bd80      	pop	{r7, pc}

0800371c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	2210      	movs	r2, #16
 8003734:	4393      	bics	r3, r2
 8003736:	001a      	movs	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <TIM_TI2_ConfigInputStage+0x60>)
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	031b      	lsls	r3, r3, #12
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	22a0      	movs	r2, #160	@ 0xa0
 8003758:	4393      	bics	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b006      	add	sp, #24
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			@ (mov r8, r8)
 800377c:	ffff0fff 	.word	0xffff0fff

08003780 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a08      	ldr	r2, [pc, #32]	@ (80037b4 <TIM_ITRx_SetConfig+0x34>)
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	2207      	movs	r2, #7
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	609a      	str	r2, [r3, #8]
}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b004      	add	sp, #16
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	ffcfff8f 	.word	0xffcfff8f

080037b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	4a09      	ldr	r2, [pc, #36]	@ (80037f4 <TIM_ETR_SetConfig+0x3c>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	431a      	orrs	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b006      	add	sp, #24
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	ffff00ff 	.word	0xffff00ff

080037f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	221f      	movs	r2, #31
 8003808:	4013      	ands	r3, r2
 800380a:	2201      	movs	r2, #1
 800380c:	409a      	lsls	r2, r3
 800380e:	0013      	movs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	43d2      	mvns	r2, r2
 800381a:	401a      	ands	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	211f      	movs	r1, #31
 8003828:	400b      	ands	r3, r1
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4099      	lsls	r1, r3
 800382e:	000b      	movs	r3, r1
 8003830:	431a      	orrs	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b006      	add	sp, #24
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	223c      	movs	r2, #60	@ 0x3c
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003854:	2302      	movs	r3, #2
 8003856:	e04a      	b.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	223c      	movs	r2, #60	@ 0x3c
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	223d      	movs	r2, #61	@ 0x3d
 8003864:	2102      	movs	r1, #2
 8003866:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1e      	ldr	r2, [pc, #120]	@ (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d108      	bne.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a1d      	ldr	r2, [pc, #116]	@ (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003886:	4013      	ands	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2270      	movs	r2, #112	@ 0x70
 8003898:	4393      	bics	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a11      	ldr	r2, [pc, #68]	@ (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a10      	ldr	r2, [pc, #64]	@ (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d10c      	bne.n	80038dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2280      	movs	r2, #128	@ 0x80
 80038c6:	4393      	bics	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	223d      	movs	r2, #61	@ 0x3d
 80038e0:	2101      	movs	r1, #1
 80038e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	223c      	movs	r2, #60	@ 0x3c
 80038e8:	2100      	movs	r1, #0
 80038ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	ff0fffff 	.word	0xff0fffff
 8003900:	40000400 	.word	0x40000400

08003904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e046      	b.n	80039a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2288      	movs	r2, #136	@ 0x88
 800391a:	589b      	ldr	r3, [r3, r2]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2284      	movs	r2, #132	@ 0x84
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0018      	movs	r0, r3
 800392c:	f7fd f9e8 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2288      	movs	r2, #136	@ 0x88
 8003934:	2124      	movs	r1, #36	@ 0x24
 8003936:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	438a      	bics	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f9aa 	bl	8003cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	0018      	movs	r0, r3
 800395c:	f000 f828 	bl	80039b0 <UART_SetConfig>
 8003960:	0003      	movs	r3, r0
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e01c      	b.n	80039a4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	490d      	ldr	r1, [pc, #52]	@ (80039ac <HAL_UART_Init+0xa8>)
 8003976:	400a      	ands	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	212a      	movs	r1, #42	@ 0x2a
 8003986:	438a      	bics	r2, r1
 8003988:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 fa39 	bl	8003e14 <UART_CheckIdleState>
 80039a2:	0003      	movs	r3, r0
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	ffffb7ff 	.word	0xffffb7ff

080039b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039b8:	231e      	movs	r3, #30
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4aab      	ldr	r2, [pc, #684]	@ (8003c8c <UART_SetConfig+0x2dc>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	0019      	movs	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4aa6      	ldr	r2, [pc, #664]	@ (8003c90 <UART_SetConfig+0x2e0>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a9d      	ldr	r2, [pc, #628]	@ (8003c94 <UART_SetConfig+0x2e4>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	0019      	movs	r1, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	220f      	movs	r2, #15
 8003a34:	4393      	bics	r3, r2
 8003a36:	0019      	movs	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a93      	ldr	r2, [pc, #588]	@ (8003c98 <UART_SetConfig+0x2e8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d127      	bne.n	8003a9e <UART_SetConfig+0xee>
 8003a4e:	4b93      	ldr	r3, [pc, #588]	@ (8003c9c <UART_SetConfig+0x2ec>)
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	2203      	movs	r2, #3
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d017      	beq.n	8003a8a <UART_SetConfig+0xda>
 8003a5a:	d81b      	bhi.n	8003a94 <UART_SetConfig+0xe4>
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d00a      	beq.n	8003a76 <UART_SetConfig+0xc6>
 8003a60:	d818      	bhi.n	8003a94 <UART_SetConfig+0xe4>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <UART_SetConfig+0xbc>
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d00a      	beq.n	8003a80 <UART_SetConfig+0xd0>
 8003a6a:	e013      	b.n	8003a94 <UART_SetConfig+0xe4>
 8003a6c:	231f      	movs	r3, #31
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e021      	b.n	8003aba <UART_SetConfig+0x10a>
 8003a76:	231f      	movs	r3, #31
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e01c      	b.n	8003aba <UART_SetConfig+0x10a>
 8003a80:	231f      	movs	r3, #31
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	2204      	movs	r2, #4
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e017      	b.n	8003aba <UART_SetConfig+0x10a>
 8003a8a:	231f      	movs	r3, #31
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	2208      	movs	r2, #8
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e012      	b.n	8003aba <UART_SetConfig+0x10a>
 8003a94:	231f      	movs	r3, #31
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	2210      	movs	r2, #16
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e00d      	b.n	8003aba <UART_SetConfig+0x10a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca0 <UART_SetConfig+0x2f0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d104      	bne.n	8003ab2 <UART_SetConfig+0x102>
 8003aa8:	231f      	movs	r3, #31
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	e003      	b.n	8003aba <UART_SetConfig+0x10a>
 8003ab2:	231f      	movs	r3, #31
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	2210      	movs	r2, #16
 8003ab8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	2380      	movs	r3, #128	@ 0x80
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d000      	beq.n	8003ac8 <UART_SetConfig+0x118>
 8003ac6:	e06f      	b.n	8003ba8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003ac8:	231f      	movs	r3, #31
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d01f      	beq.n	8003b12 <UART_SetConfig+0x162>
 8003ad2:	dc22      	bgt.n	8003b1a <UART_SetConfig+0x16a>
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d017      	beq.n	8003b08 <UART_SetConfig+0x158>
 8003ad8:	dc1f      	bgt.n	8003b1a <UART_SetConfig+0x16a>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <UART_SetConfig+0x134>
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d005      	beq.n	8003aee <UART_SetConfig+0x13e>
 8003ae2:	e01a      	b.n	8003b1a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae4:	f7fe fdc0 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	61bb      	str	r3, [r7, #24]
        break;
 8003aec:	e01c      	b.n	8003b28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003aee:	4b6b      	ldr	r3, [pc, #428]	@ (8003c9c <UART_SetConfig+0x2ec>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2207      	movs	r2, #7
 8003af6:	4013      	ands	r3, r2
 8003af8:	3301      	adds	r3, #1
 8003afa:	0019      	movs	r1, r3
 8003afc:	4869      	ldr	r0, [pc, #420]	@ (8003ca4 <UART_SetConfig+0x2f4>)
 8003afe:	f7fc fb03 	bl	8000108 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	61bb      	str	r3, [r7, #24]
        break;
 8003b06:	e00f      	b.n	8003b28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b08:	f7fe fd62 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	61bb      	str	r3, [r7, #24]
        break;
 8003b10:	e00a      	b.n	8003b28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	61bb      	str	r3, [r7, #24]
        break;
 8003b18:	e006      	b.n	8003b28 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b1e:	231e      	movs	r3, #30
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
        break;
 8003b26:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d100      	bne.n	8003b30 <UART_SetConfig+0x180>
 8003b2e:	e097      	b.n	8003c60 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b34:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca8 <UART_SetConfig+0x2f8>)
 8003b36:	0052      	lsls	r2, r2, #1
 8003b38:	5ad3      	ldrh	r3, [r2, r3]
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	69b8      	ldr	r0, [r7, #24]
 8003b3e:	f7fc fae3 	bl	8000108 <__udivsi3>
 8003b42:	0003      	movs	r3, r0
 8003b44:	005a      	lsls	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	18d2      	adds	r2, r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0019      	movs	r1, r3
 8003b54:	0010      	movs	r0, r2
 8003b56:	f7fc fad7 	bl	8000108 <__udivsi3>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d91c      	bls.n	8003b9e <UART_SetConfig+0x1ee>
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	025b      	lsls	r3, r3, #9
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d217      	bcs.n	8003b9e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	200e      	movs	r0, #14
 8003b74:	183b      	adds	r3, r7, r0
 8003b76:	210f      	movs	r1, #15
 8003b78:	438a      	bics	r2, r1
 8003b7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2207      	movs	r2, #7
 8003b84:	4013      	ands	r3, r2
 8003b86:	b299      	uxth	r1, r3
 8003b88:	183b      	adds	r3, r7, r0
 8003b8a:	183a      	adds	r2, r7, r0
 8003b8c:	8812      	ldrh	r2, [r2, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	183a      	adds	r2, r7, r0
 8003b98:	8812      	ldrh	r2, [r2, #0]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	e060      	b.n	8003c60 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9e:	231e      	movs	r3, #30
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e05b      	b.n	8003c60 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba8:	231f      	movs	r3, #31
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d01f      	beq.n	8003bf2 <UART_SetConfig+0x242>
 8003bb2:	dc22      	bgt.n	8003bfa <UART_SetConfig+0x24a>
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d017      	beq.n	8003be8 <UART_SetConfig+0x238>
 8003bb8:	dc1f      	bgt.n	8003bfa <UART_SetConfig+0x24a>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <UART_SetConfig+0x214>
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d005      	beq.n	8003bce <UART_SetConfig+0x21e>
 8003bc2:	e01a      	b.n	8003bfa <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f7fe fd50 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	61bb      	str	r3, [r7, #24]
        break;
 8003bcc:	e01c      	b.n	8003c08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003bce:	4b33      	ldr	r3, [pc, #204]	@ (8003c9c <UART_SetConfig+0x2ec>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	3301      	adds	r3, #1
 8003bda:	0019      	movs	r1, r3
 8003bdc:	4831      	ldr	r0, [pc, #196]	@ (8003ca4 <UART_SetConfig+0x2f4>)
 8003bde:	f7fc fa93 	bl	8000108 <__udivsi3>
 8003be2:	0003      	movs	r3, r0
 8003be4:	61bb      	str	r3, [r7, #24]
        break;
 8003be6:	e00f      	b.n	8003c08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be8:	f7fe fcf2 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8003bec:	0003      	movs	r3, r0
 8003bee:	61bb      	str	r3, [r7, #24]
        break;
 8003bf0:	e00a      	b.n	8003c08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf2:	2380      	movs	r3, #128	@ 0x80
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e006      	b.n	8003c08 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bfe:	231e      	movs	r3, #30
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
        break;
 8003c06:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c12:	4b25      	ldr	r3, [pc, #148]	@ (8003ca8 <UART_SetConfig+0x2f8>)
 8003c14:	0052      	lsls	r2, r2, #1
 8003c16:	5ad3      	ldrh	r3, [r2, r3]
 8003c18:	0019      	movs	r1, r3
 8003c1a:	69b8      	ldr	r0, [r7, #24]
 8003c1c:	f7fc fa74 	bl	8000108 <__udivsi3>
 8003c20:	0003      	movs	r3, r0
 8003c22:	001a      	movs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	18d2      	adds	r2, r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	0019      	movs	r1, r3
 8003c32:	0010      	movs	r0, r2
 8003c34:	f7fc fa68 	bl	8000108 <__udivsi3>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	2b0f      	cmp	r3, #15
 8003c40:	d90a      	bls.n	8003c58 <UART_SetConfig+0x2a8>
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	2380      	movs	r3, #128	@ 0x80
 8003c46:	025b      	lsls	r3, r3, #9
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d205      	bcs.n	8003c58 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	e003      	b.n	8003c60 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c58:	231e      	movs	r3, #30
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	226a      	movs	r2, #106	@ 0x6a
 8003c64:	2101      	movs	r1, #1
 8003c66:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2268      	movs	r2, #104	@ 0x68
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c7c:	231e      	movs	r3, #30
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	781b      	ldrb	r3, [r3, #0]
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b008      	add	sp, #32
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	cfff69f3 	.word	0xcfff69f3
 8003c90:	ffffcfff 	.word	0xffffcfff
 8003c94:	11fff4ff 	.word	0x11fff4ff
 8003c98:	40013800 	.word	0x40013800
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40004400 	.word	0x40004400
 8003ca4:	02dc6c00 	.word	0x02dc6c00
 8003ca8:	08004460 	.word	0x08004460

08003cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	2208      	movs	r2, #8
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8003df0 <UART_AdvFeatureConfig+0x144>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4a43      	ldr	r2, [pc, #268]	@ (8003df4 <UART_AdvFeatureConfig+0x148>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d00b      	beq.n	8003d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a3b      	ldr	r2, [pc, #236]	@ (8003df8 <UART_AdvFeatureConfig+0x14c>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1e:	2204      	movs	r2, #4
 8003d20:	4013      	ands	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a34      	ldr	r2, [pc, #208]	@ (8003dfc <UART_AdvFeatureConfig+0x150>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	2210      	movs	r2, #16
 8003d42:	4013      	ands	r3, r2
 8003d44:	d00b      	beq.n	8003d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e00 <UART_AdvFeatureConfig+0x154>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	0019      	movs	r1, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d62:	2220      	movs	r2, #32
 8003d64:	4013      	ands	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4a25      	ldr	r2, [pc, #148]	@ (8003e04 <UART_AdvFeatureConfig+0x158>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	2240      	movs	r2, #64	@ 0x40
 8003d86:	4013      	ands	r3, r2
 8003d88:	d01d      	beq.n	8003dc6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <UART_AdvFeatureConfig+0x15c>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	0019      	movs	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003da6:	2380      	movs	r3, #128	@ 0x80
 8003da8:	035b      	lsls	r3, r3, #13
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d10b      	bne.n	8003dc6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a15      	ldr	r2, [pc, #84]	@ (8003e0c <UART_AdvFeatureConfig+0x160>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	2280      	movs	r2, #128	@ 0x80
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e10 <UART_AdvFeatureConfig+0x164>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	0019      	movs	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }
}
 8003de8:	46c0      	nop			@ (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	ffff7fff 	.word	0xffff7fff
 8003df4:	fffdffff 	.word	0xfffdffff
 8003df8:	fffeffff 	.word	0xfffeffff
 8003dfc:	fffbffff 	.word	0xfffbffff
 8003e00:	ffffefff 	.word	0xffffefff
 8003e04:	ffffdfff 	.word	0xffffdfff
 8003e08:	ffefffff 	.word	0xffefffff
 8003e0c:	ff9fffff 	.word	0xff9fffff
 8003e10:	fff7ffff 	.word	0xfff7ffff

08003e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b092      	sub	sp, #72	@ 0x48
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2290      	movs	r2, #144	@ 0x90
 8003e20:	2100      	movs	r1, #0
 8003e22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e24:	f7fd f8a2 	bl	8000f6c <HAL_GetTick>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2208      	movs	r2, #8
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d12d      	bne.n	8003e96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3c:	2280      	movs	r2, #128	@ 0x80
 8003e3e:	0391      	lsls	r1, r2, #14
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4a47      	ldr	r2, [pc, #284]	@ (8003f60 <UART_CheckIdleState+0x14c>)
 8003e44:	9200      	str	r2, [sp, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f000 f88e 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d022      	beq.n	8003e96 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e50:	f3ef 8310 	mrs	r3, PRIMASK
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	f383 8810 	msr	PRIMASK, r3
}
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2180      	movs	r1, #128	@ 0x80
 8003e72:	438a      	bics	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7c:	f383 8810 	msr	PRIMASK, r3
}
 8003e80:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2288      	movs	r2, #136	@ 0x88
 8003e86:	2120      	movs	r1, #32
 8003e88:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2284      	movs	r2, #132	@ 0x84
 8003e8e:	2100      	movs	r1, #0
 8003e90:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e060      	b.n	8003f58 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d146      	bne.n	8003f32 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea6:	2280      	movs	r2, #128	@ 0x80
 8003ea8:	03d1      	lsls	r1, r2, #15
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4a2c      	ldr	r2, [pc, #176]	@ (8003f60 <UART_CheckIdleState+0x14c>)
 8003eae:	9200      	str	r2, [sp, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f000 f859 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 8003eb6:	1e03      	subs	r3, r0, #0
 8003eb8:	d03b      	beq.n	8003f32 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003eba:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4922      	ldr	r1, [pc, #136]	@ (8003f64 <UART_CheckIdleState+0x150>)
 8003edc:	400a      	ands	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003eec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	46c0      	nop			@ (mov r8, r8)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	438a      	bics	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	228c      	movs	r2, #140	@ 0x8c
 8003f22:	2120      	movs	r1, #32
 8003f24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2284      	movs	r2, #132	@ 0x84
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e012      	b.n	8003f58 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2288      	movs	r2, #136	@ 0x88
 8003f36:	2120      	movs	r1, #32
 8003f38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	228c      	movs	r2, #140	@ 0x8c
 8003f3e:	2120      	movs	r1, #32
 8003f40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2284      	movs	r2, #132	@ 0x84
 8003f52:	2100      	movs	r1, #0
 8003f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b010      	add	sp, #64	@ 0x40
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	01ffffff 	.word	0x01ffffff
 8003f64:	fffffedf 	.word	0xfffffedf

08003f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	1dfb      	adds	r3, r7, #7
 8003f76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f78:	e04b      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	d048      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f80:	f7fc fff4 	bl	8000f6c <HAL_GetTick>
 8003f84:	0002      	movs	r2, r0
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e04b      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d035      	beq.n	8004012 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	2208      	movs	r2, #8
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d111      	bne.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 f83c 	bl	800403c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2290      	movs	r2, #144	@ 0x90
 8003fc8:	2108      	movs	r1, #8
 8003fca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2284      	movs	r2, #132	@ 0x84
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e02c      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	2380      	movs	r3, #128	@ 0x80
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	2380      	movs	r3, #128	@ 0x80
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d112      	bne.n	8004012 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2280      	movs	r2, #128	@ 0x80
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 f81f 	bl	800403c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2290      	movs	r2, #144	@ 0x90
 8004002:	2120      	movs	r1, #32
 8004004:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2284      	movs	r2, #132	@ 0x84
 800400a:	2100      	movs	r1, #0
 800400c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e00f      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	425a      	negs	r2, r3
 8004022:	4153      	adcs	r3, r2
 8004024:	b2db      	uxtb	r3, r3
 8004026:	001a      	movs	r2, r3
 8004028:	1dfb      	adds	r3, r7, #7
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d0a4      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08e      	sub	sp, #56	@ 0x38
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004044:	f3ef 8310 	mrs	r3, PRIMASK
 8004048:	617b      	str	r3, [r7, #20]
  return(result);
 800404a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800404c:	637b      	str	r3, [r7, #52]	@ 0x34
 800404e:	2301      	movs	r3, #1
 8004050:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4926      	ldr	r1, [pc, #152]	@ (8004100 <UART_EndRxTransfer+0xc4>)
 8004066:	400a      	ands	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004076:	f3ef 8310 	mrs	r3, PRIMASK
 800407a:	623b      	str	r3, [r7, #32]
  return(result);
 800407c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800407e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004080:	2301      	movs	r3, #1
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	f383 8810 	msr	PRIMASK, r3
}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	491b      	ldr	r1, [pc, #108]	@ (8004104 <UART_EndRxTransfer+0xc8>)
 8004098:	400a      	ands	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a2:	f383 8810 	msr	PRIMASK, r3
}
 80040a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d118      	bne.n	80040e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040b0:	f3ef 8310 	mrs	r3, PRIMASK
 80040b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80040b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ba:	2301      	movs	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f383 8810 	msr	PRIMASK, r3
}
 80040c4:	46c0      	nop			@ (mov r8, r8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2110      	movs	r1, #16
 80040d2:	438a      	bics	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f383 8810 	msr	PRIMASK, r3
}
 80040e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	228c      	movs	r2, #140	@ 0x8c
 80040e6:	2120      	movs	r1, #32
 80040e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b00e      	add	sp, #56	@ 0x38
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	fffffedf 	.word	0xfffffedf
 8004104:	effffffe 	.word	0xeffffffe

08004108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2284      	movs	r2, #132	@ 0x84
 8004114:	5c9b      	ldrb	r3, [r3, r2]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_UARTEx_DisableFifoMode+0x16>
 800411a:	2302      	movs	r3, #2
 800411c:	e027      	b.n	800416e <HAL_UARTEx_DisableFifoMode+0x66>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2284      	movs	r2, #132	@ 0x84
 8004122:	2101      	movs	r1, #1
 8004124:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2288      	movs	r2, #136	@ 0x88
 800412a:	2124      	movs	r1, #36	@ 0x24
 800412c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	438a      	bics	r2, r1
 8004144:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4a0b      	ldr	r2, [pc, #44]	@ (8004178 <HAL_UARTEx_DisableFifoMode+0x70>)
 800414a:	4013      	ands	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2288      	movs	r2, #136	@ 0x88
 8004160:	2120      	movs	r1, #32
 8004162:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2284      	movs	r2, #132	@ 0x84
 8004168:	2100      	movs	r1, #0
 800416a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b004      	add	sp, #16
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	dfffffff 	.word	0xdfffffff

0800417c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2284      	movs	r2, #132	@ 0x84
 800418a:	5c9b      	ldrb	r3, [r3, r2]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004190:	2302      	movs	r3, #2
 8004192:	e02e      	b.n	80041f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2284      	movs	r2, #132	@ 0x84
 8004198:	2101      	movs	r1, #1
 800419a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2288      	movs	r2, #136	@ 0x88
 80041a0:	2124      	movs	r1, #36	@ 0x24
 80041a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	438a      	bics	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	08d9      	lsrs	r1, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 f854 	bl	8004280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2288      	movs	r2, #136	@ 0x88
 80041e4:	2120      	movs	r1, #32
 80041e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2284      	movs	r2, #132	@ 0x84
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2284      	movs	r2, #132	@ 0x84
 800420a:	5c9b      	ldrb	r3, [r3, r2]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004210:	2302      	movs	r3, #2
 8004212:	e02f      	b.n	8004274 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2284      	movs	r2, #132	@ 0x84
 8004218:	2101      	movs	r1, #1
 800421a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2288      	movs	r2, #136	@ 0x88
 8004220:	2124      	movs	r1, #36	@ 0x24
 8004222:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2101      	movs	r1, #1
 8004238:	438a      	bics	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4a0e      	ldr	r2, [pc, #56]	@ (800427c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004244:	4013      	ands	r3, r2
 8004246:	0019      	movs	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 f813 	bl	8004280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2288      	movs	r2, #136	@ 0x88
 8004266:	2120      	movs	r1, #32
 8004268:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2284      	movs	r2, #132	@ 0x84
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	0018      	movs	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	b004      	add	sp, #16
 800427a:	bd80      	pop	{r7, pc}
 800427c:	f1ffffff 	.word	0xf1ffffff

08004280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800428c:	2b00      	cmp	r3, #0
 800428e:	d108      	bne.n	80042a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	226a      	movs	r2, #106	@ 0x6a
 8004294:	2101      	movs	r1, #1
 8004296:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2268      	movs	r2, #104	@ 0x68
 800429c:	2101      	movs	r1, #1
 800429e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042a0:	e043      	b.n	800432a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042a2:	260f      	movs	r6, #15
 80042a4:	19bb      	adds	r3, r7, r6
 80042a6:	2208      	movs	r2, #8
 80042a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042aa:	200e      	movs	r0, #14
 80042ac:	183b      	adds	r3, r7, r0
 80042ae:	2208      	movs	r2, #8
 80042b0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	0e5b      	lsrs	r3, r3, #25
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	240d      	movs	r4, #13
 80042be:	193b      	adds	r3, r7, r4
 80042c0:	2107      	movs	r1, #7
 80042c2:	400a      	ands	r2, r1
 80042c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	0f5b      	lsrs	r3, r3, #29
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	250c      	movs	r5, #12
 80042d2:	197b      	adds	r3, r7, r5
 80042d4:	2107      	movs	r1, #7
 80042d6:	400a      	ands	r2, r1
 80042d8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	197a      	adds	r2, r7, r5
 80042e0:	7812      	ldrb	r2, [r2, #0]
 80042e2:	4914      	ldr	r1, [pc, #80]	@ (8004334 <UARTEx_SetNbDataToProcess+0xb4>)
 80042e4:	5c8a      	ldrb	r2, [r1, r2]
 80042e6:	435a      	muls	r2, r3
 80042e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80042ea:	197b      	adds	r3, r7, r5
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <UARTEx_SetNbDataToProcess+0xb8>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042f2:	0019      	movs	r1, r3
 80042f4:	f7fb ff92 	bl	800021c <__divsi3>
 80042f8:	0003      	movs	r3, r0
 80042fa:	b299      	uxth	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	226a      	movs	r2, #106	@ 0x6a
 8004300:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004302:	19bb      	adds	r3, r7, r6
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	193a      	adds	r2, r7, r4
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	490a      	ldr	r1, [pc, #40]	@ (8004334 <UARTEx_SetNbDataToProcess+0xb4>)
 800430c:	5c8a      	ldrb	r2, [r1, r2]
 800430e:	435a      	muls	r2, r3
 8004310:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004312:	193b      	adds	r3, r7, r4
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	4a08      	ldr	r2, [pc, #32]	@ (8004338 <UARTEx_SetNbDataToProcess+0xb8>)
 8004318:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800431a:	0019      	movs	r1, r3
 800431c:	f7fb ff7e 	bl	800021c <__divsi3>
 8004320:	0003      	movs	r3, r0
 8004322:	b299      	uxth	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2268      	movs	r2, #104	@ 0x68
 8004328:	5299      	strh	r1, [r3, r2]
}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b005      	add	sp, #20
 8004330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	08004478 	.word	0x08004478
 8004338:	08004480 	.word	0x08004480

0800433c <memset>:
 800433c:	0003      	movs	r3, r0
 800433e:	1882      	adds	r2, r0, r2
 8004340:	4293      	cmp	r3, r2
 8004342:	d100      	bne.n	8004346 <memset+0xa>
 8004344:	4770      	bx	lr
 8004346:	7019      	strb	r1, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	e7f9      	b.n	8004340 <memset+0x4>

0800434c <__libc_init_array>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	2600      	movs	r6, #0
 8004350:	4c0c      	ldr	r4, [pc, #48]	@ (8004384 <__libc_init_array+0x38>)
 8004352:	4d0d      	ldr	r5, [pc, #52]	@ (8004388 <__libc_init_array+0x3c>)
 8004354:	1b64      	subs	r4, r4, r5
 8004356:	10a4      	asrs	r4, r4, #2
 8004358:	42a6      	cmp	r6, r4
 800435a:	d109      	bne.n	8004370 <__libc_init_array+0x24>
 800435c:	2600      	movs	r6, #0
 800435e:	f000 f819 	bl	8004394 <_init>
 8004362:	4c0a      	ldr	r4, [pc, #40]	@ (800438c <__libc_init_array+0x40>)
 8004364:	4d0a      	ldr	r5, [pc, #40]	@ (8004390 <__libc_init_array+0x44>)
 8004366:	1b64      	subs	r4, r4, r5
 8004368:	10a4      	asrs	r4, r4, #2
 800436a:	42a6      	cmp	r6, r4
 800436c:	d105      	bne.n	800437a <__libc_init_array+0x2e>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	00b3      	lsls	r3, r6, #2
 8004372:	58eb      	ldr	r3, [r5, r3]
 8004374:	4798      	blx	r3
 8004376:	3601      	adds	r6, #1
 8004378:	e7ee      	b.n	8004358 <__libc_init_array+0xc>
 800437a:	00b3      	lsls	r3, r6, #2
 800437c:	58eb      	ldr	r3, [r5, r3]
 800437e:	4798      	blx	r3
 8004380:	3601      	adds	r6, #1
 8004382:	e7f2      	b.n	800436a <__libc_init_array+0x1e>
 8004384:	08004488 	.word	0x08004488
 8004388:	08004488 	.word	0x08004488
 800438c:	0800448c 	.word	0x0800448c
 8004390:	08004488 	.word	0x08004488

08004394 <_init>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr

080043a0 <_fini>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr
